{"ast":null,"code":"// tslint:disable radix\n/**\r\n * Converts a number to its string representation in decimal. This function\r\n * differs from simply converting a number to a string with `.toString()`\r\n * because this function's output string will **not** contain exponential\r\n * notation.\r\n *\r\n * Credit: https://stackoverflow.com/a/46545519\r\n */\nexport var numberToString = function (num) {\n  var numStr = String(num);\n  if (Math.abs(num) < 1.0) {\n    var e = parseInt(num.toString().split('e-')[1]);\n    if (e) {\n      var negative = num < 0;\n      if (negative) num *= -1;\n      num *= Math.pow(10, e - 1);\n      numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\n      if (negative) numStr = '-' + numStr;\n    }\n  } else {\n    var e = parseInt(num.toString().split('+')[1]);\n    if (e > 20) {\n      e -= 20;\n      num /= Math.pow(10, e);\n      numStr = num.toString() + new Array(e + 1).join('0');\n    }\n  }\n  return numStr;\n};\nexport var sizeInBytes = function (n) {\n  return Math.ceil(n.toString(2).length / 8);\n};\n/**\r\n * Converts a number into its constituent bytes and returns them as\r\n * a number[].\r\n *\r\n * Returns most significant byte as first element in array. It may be necessary\r\n * to call .reverse() to get the bits in the desired order.\r\n *\r\n * Example:\r\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\r\n *\r\n * Credit for algorithm: https://stackoverflow.com/a/1936865\r\n */\nexport var bytesFor = function (n) {\n  var bytes = new Uint8Array(sizeInBytes(n));\n  for (var i = 1; i <= bytes.length; i++) {\n    bytes[i - 1] = n >> (bytes.length - i) * 8;\n  }\n  return bytes;\n};","map":{"version":3,"names":["numberToString","num","numStr","String","Math","abs","e","parseInt","toString","split","negative","pow","Array","join","substring","sizeInBytes","n","ceil","length","bytesFor","bytes","Uint8Array","i"],"sources":["C:\\Users\\Uzer\\Desktop\\works\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\utils\\numbers.ts"],"sourcesContent":["// tslint:disable radix\r\n\r\n/**\r\n * Converts a number to its string representation in decimal. This function\r\n * differs from simply converting a number to a string with `.toString()`\r\n * because this function's output string will **not** contain exponential\r\n * notation.\r\n *\r\n * Credit: https://stackoverflow.com/a/46545519\r\n */\r\nexport const numberToString = (num: number) => {\r\n  let numStr = String(num);\r\n\r\n  if (Math.abs(num) < 1.0) {\r\n    const e = parseInt(num.toString().split('e-')[1]);\r\n    if (e) {\r\n      const negative = num < 0;\r\n      if (negative) num *= -1;\r\n      num *= Math.pow(10, e - 1);\r\n      numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\r\n      if (negative) numStr = '-' + numStr;\r\n    }\r\n  } else {\r\n    let e = parseInt(num.toString().split('+')[1]);\r\n    if (e > 20) {\r\n      e -= 20;\r\n      num /= Math.pow(10, e);\r\n      numStr = num.toString() + new Array(e + 1).join('0');\r\n    }\r\n  }\r\n\r\n  return numStr;\r\n};\r\n\r\nexport const sizeInBytes = (n: number) => Math.ceil(n.toString(2).length / 8);\r\n\r\n/**\r\n * Converts a number into its constituent bytes and returns them as\r\n * a number[].\r\n *\r\n * Returns most significant byte as first element in array. It may be necessary\r\n * to call .reverse() to get the bits in the desired order.\r\n *\r\n * Example:\r\n *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\r\n *\r\n * Credit for algorithm: https://stackoverflow.com/a/1936865\r\n */\r\nexport const bytesFor = (n: number) => {\r\n  const bytes = new Uint8Array(sizeInBytes(n));\r\n  for (let i = 1; i <= bytes.length; i++) {\r\n    bytes[i - 1] = n >> ((bytes.length - i) * 8);\r\n  }\r\n  return bytes;\r\n};\r\n"],"mappings":"AAAA;AAEA;;;;;;;;AAQA,OAAO,IAAMA,cAAc,GAAG,SAAAA,CAACC,GAAW;EACxC,IAAIC,MAAM,GAAGC,MAAM,CAACF,GAAG,CAAC;EAExB,IAAIG,IAAI,CAACC,GAAG,CAACJ,GAAG,CAAC,GAAG,GAAG,EAAE;IACvB,IAAMK,CAAC,GAAGC,QAAQ,CAACN,GAAG,CAACO,QAAQ,EAAE,CAACC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,IAAIH,CAAC,EAAE;MACL,IAAMI,QAAQ,GAAGT,GAAG,GAAG,CAAC;MACxB,IAAIS,QAAQ,EAAET,GAAG,IAAI,CAAC,CAAC;MACvBA,GAAG,IAAIG,IAAI,CAACO,GAAG,CAAC,EAAE,EAAEL,CAAC,GAAG,CAAC,CAAC;MAC1BJ,MAAM,GAAG,IAAI,GAAG,IAAIU,KAAK,CAACN,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC,GAAGZ,GAAG,CAACO,QAAQ,EAAE,CAACM,SAAS,CAAC,CAAC,CAAC;MACpE,IAAIJ,QAAQ,EAAER,MAAM,GAAG,GAAG,GAAGA,MAAM;;GAEtC,MAAM;IACL,IAAII,CAAC,GAAGC,QAAQ,CAACN,GAAG,CAACO,QAAQ,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAIH,CAAC,GAAG,EAAE,EAAE;MACVA,CAAC,IAAI,EAAE;MACPL,GAAG,IAAIG,IAAI,CAACO,GAAG,CAAC,EAAE,EAAEL,CAAC,CAAC;MACtBJ,MAAM,GAAGD,GAAG,CAACO,QAAQ,EAAE,GAAG,IAAII,KAAK,CAACN,CAAC,GAAG,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC;;;EAIxD,OAAOX,MAAM;AACf,CAAC;AAED,OAAO,IAAMa,WAAW,GAAG,SAAAA,CAACC,CAAS;EAAK,OAAAZ,IAAI,CAACa,IAAI,CAACD,CAAC,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACU,MAAM,GAAG,CAAC,CAAC;AAAnC,CAAmC;AAE7E;;;;;;;;;;;;AAYA,OAAO,IAAMC,QAAQ,GAAG,SAAAA,CAACH,CAAS;EAChC,IAAMI,KAAK,GAAG,IAAIC,UAAU,CAACN,WAAW,CAACC,CAAC,CAAC,CAAC;EAC5C,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,KAAK,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;IACtCF,KAAK,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGN,CAAC,IAAK,CAACI,KAAK,CAACF,MAAM,GAAGI,CAAC,IAAI,CAAE;;EAE9C,OAAOF,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}