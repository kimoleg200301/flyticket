{"ast":null,"code":"import PDFObject from \"../objects/PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer } from \"../../utils\";\nvar PDFOperator = /** @class */function () {\n  function PDFOperator(name, args) {\n    this.name = name;\n    this.args = args || [];\n  }\n  PDFOperator.prototype.clone = function (context) {\n    var args = new Array(this.args.length);\n    for (var idx = 0, len = args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n    }\n    return PDFOperator.of(this.name, args);\n  };\n  PDFOperator.prototype.toString = function () {\n    var value = '';\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      value += String(this.args[idx]) + ' ';\n    }\n    value += this.name;\n    return value;\n  };\n  PDFOperator.prototype.sizeInBytes = function () {\n    var size = 0;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n    }\n    size += this.name.length;\n    return size;\n  };\n  PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n    var initialOffset = offset;\n    for (var idx = 0, len = this.args.length; idx < len; idx++) {\n      var arg = this.args[idx];\n      if (arg instanceof PDFObject) {\n        offset += arg.copyBytesInto(buffer, offset);\n      } else {\n        offset += copyStringIntoBuffer(arg, buffer, offset);\n      }\n      buffer[offset++] = CharCodes.Space;\n    }\n    offset += copyStringIntoBuffer(this.name, buffer, offset);\n    return offset - initialOffset;\n  };\n  PDFOperator.of = function (name, args) {\n    return new PDFOperator(name, args);\n  };\n  return PDFOperator;\n}();\nexport default PDFOperator;","map":{"version":3,"names":["PDFObject","CharCodes","copyStringIntoBuffer","PDFOperator","name","args","prototype","clone","context","Array","length","idx","len","arg","of","toString","value","String","sizeInBytes","size","copyBytesInto","buffer","offset","initialOffset","Space"],"sources":["C:\\oleg\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\core\\operators\\PDFOperator.ts"],"sourcesContent":["import PDFArray from 'src/core/objects/PDFArray';\r\nimport PDFHexString from 'src/core/objects/PDFHexString';\r\nimport PDFName from 'src/core/objects/PDFName';\r\nimport PDFNumber from 'src/core/objects/PDFNumber';\r\nimport PDFObject from 'src/core/objects/PDFObject';\r\nimport PDFString from 'src/core/objects/PDFString';\r\nimport PDFOperatorNames from 'src/core/operators/PDFOperatorNames';\r\nimport PDFContext from 'src/core/PDFContext';\r\nimport CharCodes from 'src/core/syntax/CharCodes';\r\nimport { copyStringIntoBuffer } from 'src/utils';\r\n\r\nexport type PDFOperatorArg =\r\n  | string\r\n  | PDFName\r\n  | PDFArray\r\n  | PDFNumber\r\n  | PDFString\r\n  | PDFHexString;\r\n\r\nclass PDFOperator {\r\n  static of = (name: PDFOperatorNames, args?: PDFOperatorArg[]) =>\r\n    new PDFOperator(name, args);\r\n\r\n  private readonly name: PDFOperatorNames;\r\n  private readonly args: PDFOperatorArg[];\r\n\r\n  private constructor(name: PDFOperatorNames, args?: PDFOperatorArg[]) {\r\n    this.name = name;\r\n    this.args = args || [];\r\n  }\r\n\r\n  clone(context?: PDFContext): PDFOperator {\r\n    const args = new Array(this.args.length);\r\n    for (let idx = 0, len = args.length; idx < len; idx++) {\r\n      const arg = this.args[idx];\r\n      args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\r\n    }\r\n    return PDFOperator.of(this.name, args);\r\n  }\r\n\r\n  toString(): string {\r\n    let value = '';\r\n    for (let idx = 0, len = this.args.length; idx < len; idx++) {\r\n      value += String(this.args[idx]) + ' ';\r\n    }\r\n    value += this.name;\r\n    return value;\r\n  }\r\n\r\n  sizeInBytes(): number {\r\n    let size = 0;\r\n    for (let idx = 0, len = this.args.length; idx < len; idx++) {\r\n      const arg = this.args[idx];\r\n      size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\r\n    }\r\n    size += this.name.length;\r\n    return size;\r\n  }\r\n\r\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\r\n    const initialOffset = offset;\r\n\r\n    for (let idx = 0, len = this.args.length; idx < len; idx++) {\r\n      const arg = this.args[idx];\r\n      if (arg instanceof PDFObject) {\r\n        offset += arg.copyBytesInto(buffer, offset);\r\n      } else {\r\n        offset += copyStringIntoBuffer(arg, buffer, offset);\r\n      }\r\n      buffer[offset++] = CharCodes.Space;\r\n    }\r\n\r\n    offset += copyStringIntoBuffer(this.name, buffer, offset);\r\n\r\n    return offset - initialOffset;\r\n  }\r\n}\r\n\r\nexport default PDFOperator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}