{"ast":null,"code":"import PDFArray from \"../objects/PDFArray\";\nimport PDFBool from \"../objects/PDFBool\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport { assertEachIs, assertInteger, assertIsOneOf, assertRange } from \"../../utils\";\nvar asEnum = function (rawValue, enumType) {\n  if (rawValue === undefined) return undefined;\n  return enumType[rawValue];\n};\nexport var NonFullScreenPageMode;\n(function (NonFullScreenPageMode) {\n  /**\r\n   * After exiting FullScreen mode, neither the document outline nor thumbnail\r\n   * images should be visible.\r\n   */\n  NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n  /** After exiting FullScreen mode, the document outline should be visible. */\n  NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n  /** After exiting FullScreen mode, thumbnail images should be visible. */\n  NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n  /**\r\n   * After exiting FullScreen mode, the optional content group panel should be\r\n   * visible.\r\n   */\n  NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n})(NonFullScreenPageMode || (NonFullScreenPageMode = {}));\nexport var ReadingDirection;\n(function (ReadingDirection) {\n  /** The predominant reading order is Left to Right. */\n  ReadingDirection[\"L2R\"] = \"L2R\";\n  /**\r\n   * The predominant reading order is Right to left (including vertical writing\r\n   * systems, such as Chinese, Japanese and Korean).\r\n   */\n  ReadingDirection[\"R2L\"] = \"R2L\";\n})(ReadingDirection || (ReadingDirection = {}));\nexport var PrintScaling;\n(function (PrintScaling) {\n  /** No page scaling. */\n  PrintScaling[\"None\"] = \"None\";\n  /* Use the PDF reader's default print scaling. */\n  PrintScaling[\"AppDefault\"] = \"AppDefault\";\n})(PrintScaling || (PrintScaling = {}));\nexport var Duplex;\n(function (Duplex) {\n  /** The PDF reader should print single-sided. */\n  Duplex[\"Simplex\"] = \"Simplex\";\n  /**\r\n   * The PDF reader should print double sided and flip on the short edge of the\r\n   * sheet.\r\n   */\n  Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n  /**\r\n   * The PDF reader should print double sided and flip on the long edge of the\r\n   * sheet.\r\n   */\n  Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n})(Duplex || (Duplex = {}));\nvar ViewerPreferences = /** @class */function () {\n  /** @ignore */\n  function ViewerPreferences(dict) {\n    this.dict = dict;\n  }\n  ViewerPreferences.prototype.lookupBool = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFBool) return returnObj;\n    return undefined;\n  };\n  ViewerPreferences.prototype.lookupName = function (key) {\n    var returnObj = this.dict.lookup(PDFName.of(key));\n    if (returnObj instanceof PDFName) return returnObj;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideToolbar = function () {\n    return this.lookupBool('HideToolbar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideMenubar = function () {\n    return this.lookupBool('HideMenubar');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.HideWindowUI = function () {\n    return this.lookupBool('HideWindowUI');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.FitWindow = function () {\n    return this.lookupBool('FitWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.CenterWindow = function () {\n    return this.lookupBool('CenterWindow');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.DisplayDocTitle = function () {\n    return this.lookupBool('DisplayDocTitle');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n    return this.lookupName('NonFullScreenPageMode');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Direction = function () {\n    return this.lookupName('Direction');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintScaling = function () {\n    return this.lookupName('PrintScaling');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.Duplex = function () {\n    return this.lookupName('Duplex');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n    return this.lookupBool('PickTrayByPDFSize');\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.PrintPageRange = function () {\n    var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n    if (PrintPageRange instanceof PDFArray) return PrintPageRange;\n    return undefined;\n  };\n  /** @ignore */\n  ViewerPreferences.prototype.NumCopies = function () {\n    var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n    if (NumCopies instanceof PDFNumber) return NumCopies;\n    return undefined;\n  };\n  /**\r\n   * Returns `true` if PDF readers should hide the toolbar menus when displaying\r\n   * this document.\r\n   * @returns Whether or not toolbars should be hidden.\r\n   */\n  ViewerPreferences.prototype.getHideToolbar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should hide the menu bar when displaying this\r\n   * document.\r\n   * @returns Whether or not the menu bar should be hidden.\r\n   */\n  ViewerPreferences.prototype.getHideMenubar = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should hide the user interface elements in\r\n   * the document's window (such as scroll bars and navigation controls),\r\n   * leaving only the document's contents displayed.\r\n   * @returns Whether or not user interface elements should be hidden.\r\n   */\n  ViewerPreferences.prototype.getHideWindowUI = function () {\n    var _a, _b;\n    return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should resize the document's window to fit\r\n   * the size of the first displayed page.\r\n   * @returns Whether or not the window should be resized to fit.\r\n   */\n  ViewerPreferences.prototype.getFitWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if PDF readers should position the document's window in the\r\n   * center of the screen.\r\n   * @returns Whether or not to center the document window.\r\n   */\n  ViewerPreferences.prototype.getCenterWindow = function () {\n    var _a, _b;\n    return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns `true` if the window's title bar should display the document\r\n   * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\r\n   * Returns `false` if the title bar should instead display the filename of the\r\n   * PDF file.\r\n   * @returns Whether to display the document title.\r\n   */\n  ViewerPreferences.prototype.getDisplayDocTitle = function () {\n    var _a, _b;\n    return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\r\n   * Returns the page mode, which tells the PDF reader how to display the\r\n   * document after exiting full-screen mode.\r\n   * @returns The page mode after exiting full-screen mode.\r\n   */\n  ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n    var _a, _b;\n    var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(mode, NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : NonFullScreenPageMode.UseNone;\n  };\n  /**\r\n   * Returns the predominant reading order for text.\r\n   * @returns The text reading order.\r\n   */\n  ViewerPreferences.prototype.getReadingDirection = function () {\n    var _a, _b;\n    var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(direction, ReadingDirection)) !== null && _b !== void 0 ? _b : ReadingDirection.L2R;\n  };\n  /**\r\n   * Returns the page scaling option that the PDF reader should select when the\r\n   * print dialog is displayed.\r\n   * @returns The page scaling option.\r\n   */\n  ViewerPreferences.prototype.getPrintScaling = function () {\n    var _a, _b;\n    var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return (_b = asEnum(scaling, PrintScaling)) !== null && _b !== void 0 ? _b : PrintScaling.AppDefault;\n  };\n  /**\r\n   * Returns the paper handling option that should be used when printing the\r\n   * file from the print dialog.\r\n   * @returns The paper handling option.\r\n   */\n  ViewerPreferences.prototype.getDuplex = function () {\n    var _a;\n    var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n    return asEnum(duplex, Duplex);\n  };\n  /**\r\n   * Returns `true` if the PDF page size should be used to select the input\r\n   * paper tray.\r\n   * @returns Whether or not the PDF page size should be used to select the\r\n   *          input paper tray.\r\n   */\n  ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n    var _a;\n    return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n  };\n  /**\r\n   * Returns an array of page number ranges, which are the values used to\r\n   * initialize the print dialog box when the file is printed. Each range\r\n   * specifies the first (`start`) and last (`end`) pages in a sub-range of\r\n   * pages to be printed. The first page of the PDF file is denoted by 0.\r\n   * For example:\r\n   * ```js\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * const includesPage3 = viewerPrefs\r\n   *   .getPrintRanges()\r\n   *   .some(pr => pr.start =< 2 && pr.end >= 2)\r\n   * if (includesPage3) console.log('printRange includes page 3')\r\n   * ```\r\n   * @returns An array of objects, each with the properties `start` and `end`,\r\n   *          denoting page indices. If not, specified an empty array is\r\n   *          returned.\r\n   */\n  ViewerPreferences.prototype.getPrintPageRange = function () {\n    var rng = this.PrintPageRange();\n    if (!rng) return [];\n    var pageRanges = [];\n    for (var i = 0; i < rng.size(); i += 2) {\n      // Despite the spec clearly stating that \"The first page of the PDF file\n      // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n      // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n      // actually a 0 based index.\n      var start = rng.lookup(i, PDFNumber).asNumber();\n      var end = rng.lookup(i + 1, PDFNumber).asNumber();\n      pageRanges.push({\n        start: start,\n        end: end\n      });\n    }\n    return pageRanges;\n  };\n  /**\r\n   * Returns the number of copies to be printed when the print dialog is opened\r\n   * for this document.\r\n   * @returns The default number of copies to be printed.\r\n   */\n  ViewerPreferences.prototype.getNumCopies = function () {\n    var _a, _b;\n    return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n  };\n  /**\r\n   * Choose whether the PDF reader's toolbars should be hidden while the\r\n   * document is active.\r\n   * @param hideToolbar `true` if the toolbar should be hidden.\r\n   */\n  ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n    var HideToolbar = this.dict.context.obj(hideToolbar);\n    this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n  };\n  /**\r\n   * Choose whether the PDF reader's menu bar should be hidden while the\r\n   * document is active.\r\n   * @param hideMenubar `true` if the menu bar should be hidden.\r\n   */\n  ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n    var HideMenubar = this.dict.context.obj(hideMenubar);\n    this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n  };\n  /**\r\n   * Choose whether the PDF reader should hide user interface elements in the\r\n   * document's window (such as scroll bars and navigation controls), leaving\r\n   * only the document's contents displayed.\r\n   * @param hideWindowUI `true` if the user interface elements should be hidden.\r\n   */\n  ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n    var HideWindowUI = this.dict.context.obj(hideWindowUI);\n    this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n  };\n  /**\r\n   * Choose whether the PDF reader should resize the document's window to fit\r\n   * the size of the first displayed page.\r\n   * @param fitWindow `true` if the window should be resized.\r\n   */\n  ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n    var FitWindow = this.dict.context.obj(fitWindow);\n    this.dict.set(PDFName.of('FitWindow'), FitWindow);\n  };\n  /**\r\n   * Choose whether the PDF reader should position the document's window in the\r\n   * center of the screen.\r\n   * @param centerWindow `true` if the window should be centered.\r\n   */\n  ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n    var CenterWindow = this.dict.context.obj(centerWindow);\n    this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n  };\n  /**\r\n   * Choose whether the window's title bar should display the document `Title`\r\n   * taken from the document metadata (see [[PDFDocument.setTitle]]). If\r\n   * `false`, the title bar should instead display the PDF filename.\r\n   * @param displayTitle `true` if the document title should be displayed.\r\n   */\n  ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n    var DisplayDocTitle = this.dict.context.obj(displayTitle);\n    this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n  };\n  /**\r\n   * Choose how the PDF reader should display the document upon exiting\r\n   * full-screen mode. This entry is meaningful only if the value of the\r\n   * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   *\r\n   * // Set the PageMode\r\n   * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\r\n   *\r\n   * // Set what happens when full-screen is closed\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\r\n   * ```\r\n   *\r\n   * @param nonFullScreenPageMode How the document should be displayed upon\r\n   *                              exiting full screen mode.\r\n   */\n  ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n    assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', NonFullScreenPageMode);\n    var mode = PDFName.of(nonFullScreenPageMode);\n    this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n  };\n  /**\r\n   * Choose the predominant reading order for text.\r\n   *\r\n   * This entry has no direct effect on the document's contents or page\r\n   * numbering, but may be used to determine the relative positioning of pages\r\n   * when displayed side by side or printed n-up.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, ReadingDirection } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\r\n   * ```\r\n   *\r\n   * @param readingDirection The reading order for text.\r\n   */\n  ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n    assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\n    var direction = PDFName.of(readingDirection);\n    this.dict.set(PDFName.of('Direction'), direction);\n  };\n  /**\r\n   * Choose the page scaling option that should be selected when a print dialog\r\n   * is displayed for this document.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, PrintScaling } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setPrintScaling(PrintScaling.None)\r\n   * ```\r\n   *\r\n   * @param printScaling The print scaling option.\r\n   */\n  ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n    assertIsOneOf(printScaling, 'printScaling', PrintScaling);\n    var scaling = PDFName.of(printScaling);\n    this.dict.set(PDFName.of('PrintScaling'), scaling);\n  };\n  /**\r\n   * Choose the paper handling option that should be selected by default in the\r\n   * print dialog.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, Duplex } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\r\n   * ```\r\n   *\r\n   * @param duplex The double or single sided printing option.\r\n   */\n  ViewerPreferences.prototype.setDuplex = function (duplex) {\n    assertIsOneOf(duplex, 'duplex', Duplex);\n    var dup = PDFName.of(duplex);\n    this.dict.set(PDFName.of('Duplex'), dup);\n  };\n  /**\r\n   * Choose whether the PDF document's page size should be used to select the\r\n   * input paper tray when printing. This setting influences only the preset\r\n   * values used to populate the print dialog presented by a PDF reader.\r\n   *\r\n   * If PickTrayByPDFSize is true, the check box in the print dialog associated\r\n   * with input paper tray should be checked. This setting has no effect on\r\n   * operating systems that do not provide the ability to pick the input tray\r\n   * by size.\r\n   *\r\n   * @param pickTrayByPDFSize `true` if the document's page size should be used\r\n   *                          to select the input paper tray.\r\n   */\n  ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n    var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n    this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n  };\n  /**\r\n   * Choose the page numbers used to initialize the print dialog box when the\r\n   * file is printed. The first page of the PDF file is denoted by 0.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   *\r\n   * // We can set the default print range to only the first page\r\n   * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\r\n   *\r\n   * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\r\n   * viewerPrefs.setPrintPageRange([\r\n   *   { start: 0, end: 0 },\r\n   *   { start: 2, end: 2 },\r\n   *   { start: 4, end: 6 },\r\n   * ])\r\n   * ```\r\n   *\r\n   * @param printPageRange An object or array of objects, each with the\r\n   *                       properties `start` and `end`, denoting a range of\r\n   *                       page indices.\r\n   */\n  ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n    if (!Array.isArray(printPageRange)) printPageRange = [printPageRange];\n    var flatRange = [];\n    for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n      flatRange.push(printPageRange[idx].start);\n      flatRange.push(printPageRange[idx].end);\n    }\n    assertEachIs(flatRange, 'printPageRange', ['number']);\n    var pageRanges = this.dict.context.obj(flatRange);\n    this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n  };\n  /**\r\n   * Choose the default number of copies to be printed when the print dialog is\r\n   * opened for this file.\r\n   * @param numCopies The default number of copies.\r\n   */\n  ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n    assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n    assertInteger(numCopies, 'numCopies');\n    var NumCopies = this.dict.context.obj(numCopies);\n    this.dict.set(PDFName.of('NumCopies'), NumCopies);\n  };\n  /** @ignore */\n  ViewerPreferences.fromDict = function (dict) {\n    return new ViewerPreferences(dict);\n  };\n  /** @ignore */\n  ViewerPreferences.create = function (context) {\n    var dict = context.obj({});\n    return new ViewerPreferences(dict);\n  };\n  return ViewerPreferences;\n}();\nexport default ViewerPreferences;","map":{"version":3,"names":["PDFArray","PDFBool","PDFName","PDFNumber","assertEachIs","assertInteger","assertIsOneOf","assertRange","asEnum","rawValue","enumType","undefined","NonFullScreenPageMode","ReadingDirection","PrintScaling","Duplex","ViewerPreferences","dict","prototype","lookupBool","key","returnObj","lookup","of","lookupName","HideToolbar","HideMenubar","HideWindowUI","FitWindow","CenterWindow","DisplayDocTitle","Direction","PickTrayByPDFSize","PrintPageRange","NumCopies","getHideToolbar","_b","_a","asBoolean","getHideMenubar","getHideWindowUI","getFitWindow","getCenterWindow","getDisplayDocTitle","getNonFullScreenPageMode","mode","decodeText","UseNone","getReadingDirection","direction","L2R","getPrintScaling","scaling","AppDefault","getDuplex","duplex","getPickTrayByPDFSize","getPrintPageRange","rng","pageRanges","i","size","start","asNumber","end","push","getNumCopies","setHideToolbar","hideToolbar","context","obj","set","setHideMenubar","hideMenubar","setHideWindowUI","hideWindowUI","setFitWindow","fitWindow","setCenterWindow","centerWindow","setDisplayDocTitle","displayTitle","setNonFullScreenPageMode","nonFullScreenPageMode","setReadingDirection","readingDirection","setPrintScaling","printScaling","setDuplex","dup","setPickTrayByPDFSize","pickTrayByPDFSize","setPrintPageRange","printPageRange","Array","isArray","flatRange","idx","len","length","setNumCopies","numCopies","Number","MAX_VALUE","fromDict","create"],"sources":["C:\\oleg\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\core\\interactive\\ViewerPreferences.ts"],"sourcesContent":["import PDFArray from 'src/core/objects/PDFArray';\r\nimport PDFBool from 'src/core/objects/PDFBool';\r\nimport PDFDict from 'src/core/objects/PDFDict';\r\nimport PDFName from 'src/core/objects/PDFName';\r\nimport PDFNumber from 'src/core/objects/PDFNumber';\r\nimport PDFContext from 'src/core/PDFContext';\r\nimport {\r\n  assertEachIs,\r\n  assertInteger,\r\n  assertIsOneOf,\r\n  assertRange,\r\n} from 'src/utils';\r\n\r\nconst asEnum = <T extends string | number, U extends { [key: string]: T }>(\r\n  rawValue: T | undefined,\r\n  enumType: U,\r\n): U[keyof U] | undefined => {\r\n  if (rawValue === undefined) return undefined;\r\n  return enumType[rawValue];\r\n};\r\n\r\nexport enum NonFullScreenPageMode {\r\n  /**\r\n   * After exiting FullScreen mode, neither the document outline nor thumbnail\r\n   * images should be visible.\r\n   */\r\n  UseNone = 'UseNone',\r\n\r\n  /** After exiting FullScreen mode, the document outline should be visible. */\r\n  UseOutlines = 'UseOutlines',\r\n\r\n  /** After exiting FullScreen mode, thumbnail images should be visible. */\r\n  UseThumbs = 'UseThumbs',\r\n\r\n  /**\r\n   * After exiting FullScreen mode, the optional content group panel should be\r\n   * visible.\r\n   */\r\n  UseOC = 'UseOC',\r\n}\r\n\r\nexport enum ReadingDirection {\r\n  /** The predominant reading order is Left to Right. */\r\n  L2R = 'L2R',\r\n\r\n  /**\r\n   * The predominant reading order is Right to left (including vertical writing\r\n   * systems, such as Chinese, Japanese and Korean).\r\n   */\r\n  R2L = 'R2L',\r\n}\r\n\r\nexport enum PrintScaling {\r\n  /** No page scaling. */\r\n  None = 'None',\r\n\r\n  /* Use the PDF reader's default print scaling. */\r\n  AppDefault = 'AppDefault',\r\n}\r\n\r\nexport enum Duplex {\r\n  /** The PDF reader should print single-sided. */\r\n  Simplex = 'Simplex',\r\n\r\n  /**\r\n   * The PDF reader should print double sided and flip on the short edge of the\r\n   * sheet.\r\n   */\r\n  DuplexFlipShortEdge = 'DuplexFlipShortEdge',\r\n\r\n  /**\r\n   * The PDF reader should print double sided and flip on the long edge of the\r\n   * sheet.\r\n   */\r\n  DuplexFlipLongEdge = 'DuplexFlipLongEdge',\r\n}\r\n\r\ntype BoolViewerPrefKey =\r\n  | 'HideToolbar'\r\n  | 'HideMenubar'\r\n  | 'HideWindowUI'\r\n  | 'FitWindow'\r\n  | 'CenterWindow'\r\n  | 'DisplayDocTitle'\r\n  | 'PickTrayByPDFSize';\r\ntype NameViewerPrefKey =\r\n  | 'NonFullScreenPageMode'\r\n  | 'Direction'\r\n  | 'PrintScaling'\r\n  | 'Duplex';\r\n\r\ninterface PageRange {\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\nclass ViewerPreferences {\r\n  /** @ignore */\r\n  readonly dict: PDFDict;\r\n\r\n  /** @ignore */\r\n  static fromDict = (dict: PDFDict): ViewerPreferences =>\r\n    new ViewerPreferences(dict);\r\n\r\n  /** @ignore */\r\n  static create = (context: PDFContext) => {\r\n    const dict = context.obj({});\r\n    return new ViewerPreferences(dict);\r\n  };\r\n\r\n  /** @ignore */\r\n  protected constructor(dict: PDFDict) {\r\n    this.dict = dict;\r\n  }\r\n\r\n  protected lookupBool(key: BoolViewerPrefKey): PDFBool | undefined {\r\n    const returnObj = this.dict.lookup(PDFName.of(key));\r\n    if (returnObj instanceof PDFBool) return returnObj;\r\n    return undefined;\r\n  }\r\n\r\n  protected lookupName(key: NameViewerPrefKey): PDFName | undefined {\r\n    const returnObj = this.dict.lookup(PDFName.of(key));\r\n    if (returnObj instanceof PDFName) return returnObj;\r\n    return undefined;\r\n  }\r\n\r\n  /** @ignore */\r\n  HideToolbar(): PDFBool | undefined {\r\n    return this.lookupBool('HideToolbar');\r\n  }\r\n\r\n  /** @ignore */\r\n  HideMenubar(): PDFBool | undefined {\r\n    return this.lookupBool('HideMenubar');\r\n  }\r\n\r\n  /** @ignore */\r\n  HideWindowUI(): PDFBool | undefined {\r\n    return this.lookupBool('HideWindowUI');\r\n  }\r\n\r\n  /** @ignore */\r\n  FitWindow(): PDFBool | undefined {\r\n    return this.lookupBool('FitWindow');\r\n  }\r\n\r\n  /** @ignore */\r\n  CenterWindow(): PDFBool | undefined {\r\n    return this.lookupBool('CenterWindow');\r\n  }\r\n\r\n  /** @ignore */\r\n  DisplayDocTitle(): PDFBool | undefined {\r\n    return this.lookupBool('DisplayDocTitle');\r\n  }\r\n\r\n  /** @ignore */\r\n  NonFullScreenPageMode(): PDFName | undefined {\r\n    return this.lookupName('NonFullScreenPageMode');\r\n  }\r\n\r\n  /** @ignore */\r\n  Direction(): PDFName | undefined {\r\n    return this.lookupName('Direction');\r\n  }\r\n\r\n  /** @ignore */\r\n  PrintScaling(): PDFName | undefined {\r\n    return this.lookupName('PrintScaling');\r\n  }\r\n\r\n  /** @ignore */\r\n  Duplex(): PDFName | undefined {\r\n    return this.lookupName('Duplex');\r\n  }\r\n\r\n  /** @ignore */\r\n  PickTrayByPDFSize(): PDFBool | undefined {\r\n    return this.lookupBool('PickTrayByPDFSize');\r\n  }\r\n\r\n  /** @ignore */\r\n  PrintPageRange(): PDFArray | undefined {\r\n    const PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\r\n    if (PrintPageRange instanceof PDFArray) return PrintPageRange;\r\n    return undefined;\r\n  }\r\n\r\n  /** @ignore */\r\n  NumCopies(): PDFNumber | undefined {\r\n    const NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\r\n    if (NumCopies instanceof PDFNumber) return NumCopies;\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if PDF readers should hide the toolbar menus when displaying\r\n   * this document.\r\n   * @returns Whether or not toolbars should be hidden.\r\n   */\r\n  getHideToolbar(): boolean {\r\n    return this.HideToolbar()?.asBoolean() ?? false;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if PDF readers should hide the menu bar when displaying this\r\n   * document.\r\n   * @returns Whether or not the menu bar should be hidden.\r\n   */\r\n  getHideMenubar(): boolean {\r\n    return this.HideMenubar()?.asBoolean() ?? false;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if PDF readers should hide the user interface elements in\r\n   * the document's window (such as scroll bars and navigation controls),\r\n   * leaving only the document's contents displayed.\r\n   * @returns Whether or not user interface elements should be hidden.\r\n   */\r\n  getHideWindowUI(): boolean {\r\n    return this.HideWindowUI()?.asBoolean() ?? false;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if PDF readers should resize the document's window to fit\r\n   * the size of the first displayed page.\r\n   * @returns Whether or not the window should be resized to fit.\r\n   */\r\n  getFitWindow(): boolean {\r\n    return this.FitWindow()?.asBoolean() ?? false;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if PDF readers should position the document's window in the\r\n   * center of the screen.\r\n   * @returns Whether or not to center the document window.\r\n   */\r\n  getCenterWindow(): boolean {\r\n    return this.CenterWindow()?.asBoolean() ?? false;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the window's title bar should display the document\r\n   * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\r\n   * Returns `false` if the title bar should instead display the filename of the\r\n   * PDF file.\r\n   * @returns Whether to display the document title.\r\n   */\r\n  getDisplayDocTitle(): boolean {\r\n    return this.DisplayDocTitle()?.asBoolean() ?? false;\r\n  }\r\n\r\n  /**\r\n   * Returns the page mode, which tells the PDF reader how to display the\r\n   * document after exiting full-screen mode.\r\n   * @returns The page mode after exiting full-screen mode.\r\n   */\r\n  getNonFullScreenPageMode(): NonFullScreenPageMode {\r\n    const mode = this.NonFullScreenPageMode()?.decodeText();\r\n    return asEnum(mode, NonFullScreenPageMode) ?? NonFullScreenPageMode.UseNone;\r\n  }\r\n\r\n  /**\r\n   * Returns the predominant reading order for text.\r\n   * @returns The text reading order.\r\n   */\r\n  getReadingDirection(): ReadingDirection {\r\n    const direction = this.Direction()?.decodeText();\r\n    return asEnum(direction, ReadingDirection) ?? ReadingDirection.L2R;\r\n  }\r\n\r\n  /**\r\n   * Returns the page scaling option that the PDF reader should select when the\r\n   * print dialog is displayed.\r\n   * @returns The page scaling option.\r\n   */\r\n  getPrintScaling(): PrintScaling {\r\n    const scaling = this.PrintScaling()?.decodeText();\r\n    return asEnum(scaling, PrintScaling) ?? PrintScaling.AppDefault;\r\n  }\r\n\r\n  /**\r\n   * Returns the paper handling option that should be used when printing the\r\n   * file from the print dialog.\r\n   * @returns The paper handling option.\r\n   */\r\n  getDuplex(): Duplex | undefined {\r\n    const duplex = this.Duplex()?.decodeText();\r\n    return asEnum(duplex, Duplex);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the PDF page size should be used to select the input\r\n   * paper tray.\r\n   * @returns Whether or not the PDF page size should be used to select the\r\n   *          input paper tray.\r\n   */\r\n  getPickTrayByPDFSize(): boolean | undefined {\r\n    return this.PickTrayByPDFSize()?.asBoolean();\r\n  }\r\n\r\n  /**\r\n   * Returns an array of page number ranges, which are the values used to\r\n   * initialize the print dialog box when the file is printed. Each range\r\n   * specifies the first (`start`) and last (`end`) pages in a sub-range of\r\n   * pages to be printed. The first page of the PDF file is denoted by 0.\r\n   * For example:\r\n   * ```js\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * const includesPage3 = viewerPrefs\r\n   *   .getPrintRanges()\r\n   *   .some(pr => pr.start =< 2 && pr.end >= 2)\r\n   * if (includesPage3) console.log('printRange includes page 3')\r\n   * ```\r\n   * @returns An array of objects, each with the properties `start` and `end`,\r\n   *          denoting page indices. If not, specified an empty array is\r\n   *          returned.\r\n   */\r\n  getPrintPageRange(): PageRange[] {\r\n    const rng = this.PrintPageRange();\r\n    if (!rng) return [];\r\n\r\n    const pageRanges: PageRange[] = [];\r\n    for (let i = 0; i < rng.size(); i += 2) {\r\n      // Despite the spec clearly stating that \"The first page of the PDF file\r\n      // shall be donoted by 1\", several test PDFs (spec 1.7) created in\r\n      // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\r\n      // actually a 0 based index.\r\n      const start = rng.lookup(i, PDFNumber).asNumber();\r\n      const end = rng.lookup(i + 1, PDFNumber).asNumber();\r\n      pageRanges.push({ start, end });\r\n    }\r\n\r\n    return pageRanges;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of copies to be printed when the print dialog is opened\r\n   * for this document.\r\n   * @returns The default number of copies to be printed.\r\n   */\r\n  getNumCopies(): number {\r\n    return this.NumCopies()?.asNumber() ?? 1;\r\n  }\r\n\r\n  /**\r\n   * Choose whether the PDF reader's toolbars should be hidden while the\r\n   * document is active.\r\n   * @param hideToolbar `true` if the toolbar should be hidden.\r\n   */\r\n  setHideToolbar(hideToolbar: boolean) {\r\n    const HideToolbar = this.dict.context.obj(hideToolbar);\r\n    this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\r\n  }\r\n\r\n  /**\r\n   * Choose whether the PDF reader's menu bar should be hidden while the\r\n   * document is active.\r\n   * @param hideMenubar `true` if the menu bar should be hidden.\r\n   */\r\n  setHideMenubar(hideMenubar: boolean) {\r\n    const HideMenubar = this.dict.context.obj(hideMenubar);\r\n    this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\r\n  }\r\n\r\n  /**\r\n   * Choose whether the PDF reader should hide user interface elements in the\r\n   * document's window (such as scroll bars and navigation controls), leaving\r\n   * only the document's contents displayed.\r\n   * @param hideWindowUI `true` if the user interface elements should be hidden.\r\n   */\r\n  setHideWindowUI(hideWindowUI: boolean) {\r\n    const HideWindowUI = this.dict.context.obj(hideWindowUI);\r\n    this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\r\n  }\r\n\r\n  /**\r\n   * Choose whether the PDF reader should resize the document's window to fit\r\n   * the size of the first displayed page.\r\n   * @param fitWindow `true` if the window should be resized.\r\n   */\r\n  setFitWindow(fitWindow: boolean) {\r\n    const FitWindow = this.dict.context.obj(fitWindow);\r\n    this.dict.set(PDFName.of('FitWindow'), FitWindow);\r\n  }\r\n\r\n  /**\r\n   * Choose whether the PDF reader should position the document's window in the\r\n   * center of the screen.\r\n   * @param centerWindow `true` if the window should be centered.\r\n   */\r\n  setCenterWindow(centerWindow: boolean) {\r\n    const CenterWindow = this.dict.context.obj(centerWindow);\r\n    this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\r\n  }\r\n\r\n  /**\r\n   * Choose whether the window's title bar should display the document `Title`\r\n   * taken from the document metadata (see [[PDFDocument.setTitle]]). If\r\n   * `false`, the title bar should instead display the PDF filename.\r\n   * @param displayTitle `true` if the document title should be displayed.\r\n   */\r\n  setDisplayDocTitle(displayTitle: boolean) {\r\n    const DisplayDocTitle = this.dict.context.obj(displayTitle);\r\n    this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\r\n  }\r\n\r\n  /**\r\n   * Choose how the PDF reader should display the document upon exiting\r\n   * full-screen mode. This entry is meaningful only if the value of the\r\n   * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   *\r\n   * // Set the PageMode\r\n   * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\r\n   *\r\n   * // Set what happens when full-screen is closed\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\r\n   * ```\r\n   *\r\n   * @param nonFullScreenPageMode How the document should be displayed upon\r\n   *                              exiting full screen mode.\r\n   */\r\n  setNonFullScreenPageMode(nonFullScreenPageMode: NonFullScreenPageMode) {\r\n    assertIsOneOf(\r\n      nonFullScreenPageMode,\r\n      'nonFullScreenPageMode',\r\n      NonFullScreenPageMode,\r\n    );\r\n    const mode = PDFName.of(nonFullScreenPageMode);\r\n    this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\r\n  }\r\n\r\n  /**\r\n   * Choose the predominant reading order for text.\r\n   *\r\n   * This entry has no direct effect on the document's contents or page\r\n   * numbering, but may be used to determine the relative positioning of pages\r\n   * when displayed side by side or printed n-up.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, ReadingDirection } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\r\n   * ```\r\n   *\r\n   * @param readingDirection The reading order for text.\r\n   */\r\n  setReadingDirection(readingDirection: ReadingDirection) {\r\n    assertIsOneOf(readingDirection, 'readingDirection', ReadingDirection);\r\n    const direction = PDFName.of(readingDirection);\r\n    this.dict.set(PDFName.of('Direction'), direction);\r\n  }\r\n\r\n  /**\r\n   * Choose the page scaling option that should be selected when a print dialog\r\n   * is displayed for this document.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, PrintScaling } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setPrintScaling(PrintScaling.None)\r\n   * ```\r\n   *\r\n   * @param printScaling The print scaling option.\r\n   */\r\n  setPrintScaling(printScaling: PrintScaling) {\r\n    assertIsOneOf(printScaling, 'printScaling', PrintScaling);\r\n    const scaling = PDFName.of(printScaling);\r\n    this.dict.set(PDFName.of('PrintScaling'), scaling);\r\n  }\r\n\r\n  /**\r\n   * Choose the paper handling option that should be selected by default in the\r\n   * print dialog.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument, Duplex } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\r\n   * ```\r\n   *\r\n   * @param duplex The double or single sided printing option.\r\n   */\r\n  setDuplex(duplex: Duplex) {\r\n    assertIsOneOf(duplex, 'duplex', Duplex);\r\n    const dup = PDFName.of(duplex);\r\n    this.dict.set(PDFName.of('Duplex'), dup);\r\n  }\r\n\r\n  /**\r\n   * Choose whether the PDF document's page size should be used to select the\r\n   * input paper tray when printing. This setting influences only the preset\r\n   * values used to populate the print dialog presented by a PDF reader.\r\n   *\r\n   * If PickTrayByPDFSize is true, the check box in the print dialog associated\r\n   * with input paper tray should be checked. This setting has no effect on\r\n   * operating systems that do not provide the ability to pick the input tray\r\n   * by size.\r\n   *\r\n   * @param pickTrayByPDFSize `true` if the document's page size should be used\r\n   *                          to select the input paper tray.\r\n   */\r\n  setPickTrayByPDFSize(pickTrayByPDFSize: boolean) {\r\n    const PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\r\n    this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\r\n  }\r\n\r\n  /**\r\n   * Choose the page numbers used to initialize the print dialog box when the\r\n   * file is printed. The first page of the PDF file is denoted by 0.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * import { PDFDocument } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\r\n   *\r\n   * // We can set the default print range to only the first page\r\n   * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\r\n   *\r\n   * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\r\n   * viewerPrefs.setPrintPageRange([\r\n   *   { start: 0, end: 0 },\r\n   *   { start: 2, end: 2 },\r\n   *   { start: 4, end: 6 },\r\n   * ])\r\n   * ```\r\n   *\r\n   * @param printPageRange An object or array of objects, each with the\r\n   *                       properties `start` and `end`, denoting a range of\r\n   *                       page indices.\r\n   */\r\n  setPrintPageRange(printPageRange: PageRange[] | PageRange) {\r\n    if (!Array.isArray(printPageRange)) printPageRange = [printPageRange];\r\n\r\n    const flatRange: number[] = [];\r\n    for (let idx = 0, len = printPageRange.length; idx < len; idx++) {\r\n      flatRange.push(printPageRange[idx].start);\r\n      flatRange.push(printPageRange[idx].end);\r\n    }\r\n\r\n    assertEachIs(flatRange, 'printPageRange', ['number']);\r\n\r\n    const pageRanges = this.dict.context.obj(flatRange);\r\n    this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\r\n  }\r\n\r\n  /**\r\n   * Choose the default number of copies to be printed when the print dialog is\r\n   * opened for this file.\r\n   * @param numCopies The default number of copies.\r\n   */\r\n  setNumCopies(numCopies: number) {\r\n    assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\r\n    assertInteger(numCopies, 'numCopies');\r\n    const NumCopies = this.dict.context.obj(numCopies);\r\n    this.dict.set(PDFName.of('NumCopies'), NumCopies);\r\n  }\r\n}\r\n\r\nexport default ViewerPreferences;\r\n"],"mappings":"AAAA,OAAOA,QAAQ;AACf,OAAOC,OAAO;AAEd,OAAOC,OAAO;AACd,OAAOC,SAAS;AAEhB,SACEC,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,WAAW,QACZ;AAED,IAAMC,MAAM,GAAG,SAAAA,CACbC,QAAuB,EACvBC,QAAW;EAEX,IAAID,QAAQ,KAAKE,SAAS,EAAE,OAAOA,SAAS;EAC5C,OAAOD,QAAQ,CAACD,QAAQ,CAAC;AAC3B,CAAC;AAED,WAAYG,qBAkBX;AAlBD,WAAYA,qBAAqB;EAC/B;;;;EAIAA,qBAAA,uBAAmB;EAEnB;EACAA,qBAAA,+BAA2B;EAE3B;EACAA,qBAAA,2BAAuB;EAEvB;;;;EAIAA,qBAAA,mBAAe;AACjB,CAAC,EAlBWA,qBAAqB,KAArBA,qBAAqB;AAoBjC,WAAYC,gBASX;AATD,WAAYA,gBAAgB;EAC1B;EACAA,gBAAA,eAAW;EAEX;;;;EAIAA,gBAAA,eAAW;AACb,CAAC,EATWA,gBAAgB,KAAhBA,gBAAgB;AAW5B,WAAYC,YAMX;AAND,WAAYA,YAAY;EACtB;EACAA,YAAA,iBAAa;EAEb;EACAA,YAAA,6BAAyB;AAC3B,CAAC,EANWA,YAAY,KAAZA,YAAY;AAQxB,WAAYC,MAeX;AAfD,WAAYA,MAAM;EAChB;EACAA,MAAA,uBAAmB;EAEnB;;;;EAIAA,MAAA,+CAA2C;EAE3C;;;;EAIAA,MAAA,6CAAyC;AAC3C,CAAC,EAfWA,MAAM,KAANA,MAAM;AAoClB,IAAAC,iBAAA;EAcE;EACA,SAAAA,kBAAsBC,IAAa;IACjC,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEUD,iBAAA,CAAAE,SAAA,CAAAC,UAAU,GAApB,UAAqBC,GAAsB;IACzC,IAAMC,SAAS,GAAG,IAAI,CAACJ,IAAI,CAACK,MAAM,CAACpB,OAAO,CAACqB,EAAE,CAACH,GAAG,CAAC,CAAC;IACnD,IAAIC,SAAS,YAAYpB,OAAO,EAAE,OAAOoB,SAAS;IAClD,OAAOV,SAAS;EAClB,CAAC;EAESK,iBAAA,CAAAE,SAAA,CAAAM,UAAU,GAApB,UAAqBJ,GAAsB;IACzC,IAAMC,SAAS,GAAG,IAAI,CAACJ,IAAI,CAACK,MAAM,CAACpB,OAAO,CAACqB,EAAE,CAACH,GAAG,CAAC,CAAC;IACnD,IAAIC,SAAS,YAAYnB,OAAO,EAAE,OAAOmB,SAAS;IAClD,OAAOV,SAAS;EAClB,CAAC;EAED;EACAK,iBAAA,CAAAE,SAAA,CAAAO,WAAW,GAAX;IACE,OAAO,IAAI,CAACN,UAAU,CAAC,aAAa,CAAC;EACvC,CAAC;EAED;EACAH,iBAAA,CAAAE,SAAA,CAAAQ,WAAW,GAAX;IACE,OAAO,IAAI,CAACP,UAAU,CAAC,aAAa,CAAC;EACvC,CAAC;EAED;EACAH,iBAAA,CAAAE,SAAA,CAAAS,YAAY,GAAZ;IACE,OAAO,IAAI,CAACR,UAAU,CAAC,cAAc,CAAC;EACxC,CAAC;EAED;EACAH,iBAAA,CAAAE,SAAA,CAAAU,SAAS,GAAT;IACE,OAAO,IAAI,CAACT,UAAU,CAAC,WAAW,CAAC;EACrC,CAAC;EAED;EACAH,iBAAA,CAAAE,SAAA,CAAAW,YAAY,GAAZ;IACE,OAAO,IAAI,CAACV,UAAU,CAAC,cAAc,CAAC;EACxC,CAAC;EAED;EACAH,iBAAA,CAAAE,SAAA,CAAAY,eAAe,GAAf;IACE,OAAO,IAAI,CAACX,UAAU,CAAC,iBAAiB,CAAC;EAC3C,CAAC;EAED;EACAH,iBAAA,CAAAE,SAAA,CAAAN,qBAAqB,GAArB;IACE,OAAO,IAAI,CAACY,UAAU,CAAC,uBAAuB,CAAC;EACjD,CAAC;EAED;EACAR,iBAAA,CAAAE,SAAA,CAAAa,SAAS,GAAT;IACE,OAAO,IAAI,CAACP,UAAU,CAAC,WAAW,CAAC;EACrC,CAAC;EAED;EACAR,iBAAA,CAAAE,SAAA,CAAAJ,YAAY,GAAZ;IACE,OAAO,IAAI,CAACU,UAAU,CAAC,cAAc,CAAC;EACxC,CAAC;EAED;EACAR,iBAAA,CAAAE,SAAA,CAAAH,MAAM,GAAN;IACE,OAAO,IAAI,CAACS,UAAU,CAAC,QAAQ,CAAC;EAClC,CAAC;EAED;EACAR,iBAAA,CAAAE,SAAA,CAAAc,iBAAiB,GAAjB;IACE,OAAO,IAAI,CAACb,UAAU,CAAC,mBAAmB,CAAC;EAC7C,CAAC;EAED;EACAH,iBAAA,CAAAE,SAAA,CAAAe,cAAc,GAAd;IACE,IAAMA,cAAc,GAAG,IAAI,CAAChB,IAAI,CAACK,MAAM,CAACpB,OAAO,CAACqB,EAAE,CAAC,gBAAgB,CAAC,CAAC;IACrE,IAAIU,cAAc,YAAYjC,QAAQ,EAAE,OAAOiC,cAAc;IAC7D,OAAOtB,SAAS;EAClB,CAAC;EAED;EACAK,iBAAA,CAAAE,SAAA,CAAAgB,SAAS,GAAT;IACE,IAAMA,SAAS,GAAG,IAAI,CAACjB,IAAI,CAACK,MAAM,CAACpB,OAAO,CAACqB,EAAE,CAAC,WAAW,CAAC,CAAC;IAC3D,IAAIW,SAAS,YAAY/B,SAAS,EAAE,OAAO+B,SAAS;IACpD,OAAOvB,SAAS;EAClB,CAAC;EAED;;;;;EAKAK,iBAAA,CAAAE,SAAA,CAAAiB,cAAc,GAAd;;IACE,QAAAC,EAAA,IAAAC,EAAA,GAAO,IAAI,CAACZ,WAAW,EAAE,cAAAY,EAAA,uBAAAA,EAAA,CAAEC,SAAS,gBAAAF,EAAA,cAAAA,EAAA,GAAM,KAAK;EACjD,CAAC;EAED;;;;;EAKApB,iBAAA,CAAAE,SAAA,CAAAqB,cAAc,GAAd;;IACE,QAAAH,EAAA,IAAAC,EAAA,GAAO,IAAI,CAACX,WAAW,EAAE,cAAAW,EAAA,uBAAAA,EAAA,CAAEC,SAAS,gBAAAF,EAAA,cAAAA,EAAA,GAAM,KAAK;EACjD,CAAC;EAED;;;;;;EAMApB,iBAAA,CAAAE,SAAA,CAAAsB,eAAe,GAAf;;IACE,QAAAJ,EAAA,IAAAC,EAAA,GAAO,IAAI,CAACV,YAAY,EAAE,cAAAU,EAAA,uBAAAA,EAAA,CAAEC,SAAS,gBAAAF,EAAA,cAAAA,EAAA,GAAM,KAAK;EAClD,CAAC;EAED;;;;;EAKApB,iBAAA,CAAAE,SAAA,CAAAuB,YAAY,GAAZ;;IACE,QAAAL,EAAA,IAAAC,EAAA,GAAO,IAAI,CAACT,SAAS,EAAE,cAAAS,EAAA,uBAAAA,EAAA,CAAEC,SAAS,gBAAAF,EAAA,cAAAA,EAAA,GAAM,KAAK;EAC/C,CAAC;EAED;;;;;EAKApB,iBAAA,CAAAE,SAAA,CAAAwB,eAAe,GAAf;;IACE,QAAAN,EAAA,IAAAC,EAAA,GAAO,IAAI,CAACR,YAAY,EAAE,cAAAQ,EAAA,uBAAAA,EAAA,CAAEC,SAAS,gBAAAF,EAAA,cAAAA,EAAA,GAAM,KAAK;EAClD,CAAC;EAED;;;;;;;EAOApB,iBAAA,CAAAE,SAAA,CAAAyB,kBAAkB,GAAlB;;IACE,QAAAP,EAAA,IAAAC,EAAA,GAAO,IAAI,CAACP,eAAe,EAAE,cAAAO,EAAA,uBAAAA,EAAA,CAAEC,SAAS,gBAAAF,EAAA,cAAAA,EAAA,GAAM,KAAK;EACrD,CAAC;EAED;;;;;EAKApB,iBAAA,CAAAE,SAAA,CAAA0B,wBAAwB,GAAxB;;IACE,IAAMC,IAAI,IAAAR,EAAA,GAAG,IAAI,CAACzB,qBAAqB,EAAE,cAAAyB,EAAA,uBAAAA,EAAA,CAAES,UAAU,EAAE;IACvD,QAAAV,EAAA,GAAO5B,MAAM,CAACqC,IAAI,EAAEjC,qBAAqB,CAAC,cAAAwB,EAAA,cAAAA,EAAA,GAAIxB,qBAAqB,CAACmC,OAAO;EAC7E,CAAC;EAED;;;;EAIA/B,iBAAA,CAAAE,SAAA,CAAA8B,mBAAmB,GAAnB;;IACE,IAAMC,SAAS,IAAAZ,EAAA,GAAG,IAAI,CAACN,SAAS,EAAE,cAAAM,EAAA,uBAAAA,EAAA,CAAES,UAAU,EAAE;IAChD,QAAAV,EAAA,GAAO5B,MAAM,CAACyC,SAAS,EAAEpC,gBAAgB,CAAC,cAAAuB,EAAA,cAAAA,EAAA,GAAIvB,gBAAgB,CAACqC,GAAG;EACpE,CAAC;EAED;;;;;EAKAlC,iBAAA,CAAAE,SAAA,CAAAiC,eAAe,GAAf;;IACE,IAAMC,OAAO,IAAAf,EAAA,GAAG,IAAI,CAACvB,YAAY,EAAE,cAAAuB,EAAA,uBAAAA,EAAA,CAAES,UAAU,EAAE;IACjD,QAAAV,EAAA,GAAO5B,MAAM,CAAC4C,OAAO,EAAEtC,YAAY,CAAC,cAAAsB,EAAA,cAAAA,EAAA,GAAItB,YAAY,CAACuC,UAAU;EACjE,CAAC;EAED;;;;;EAKArC,iBAAA,CAAAE,SAAA,CAAAoC,SAAS,GAAT;;IACE,IAAMC,MAAM,IAAAlB,EAAA,GAAG,IAAI,CAACtB,MAAM,EAAE,cAAAsB,EAAA,uBAAAA,EAAA,CAAES,UAAU,EAAE;IAC1C,OAAOtC,MAAM,CAAC+C,MAAM,EAAExC,MAAM,CAAC;EAC/B,CAAC;EAED;;;;;;EAMAC,iBAAA,CAAAE,SAAA,CAAAsC,oBAAoB,GAApB;;IACE,QAAAnB,EAAA,GAAO,IAAI,CAACL,iBAAiB,EAAE,cAAAK,EAAA,uBAAAA,EAAA,CAAEC,SAAS;EAC5C,CAAC;EAED;;;;;;;;;;;;;;;;;EAiBAtB,iBAAA,CAAAE,SAAA,CAAAuC,iBAAiB,GAAjB;IACE,IAAMC,GAAG,GAAG,IAAI,CAACzB,cAAc,EAAE;IACjC,IAAI,CAACyB,GAAG,EAAE,OAAO,EAAE;IAEnB,IAAMC,UAAU,GAAgB,EAAE;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,IAAI,EAAE,EAAED,CAAC,IAAI,CAAC,EAAE;MACtC;MACA;MACA;MACA;MACA,IAAME,KAAK,GAAGJ,GAAG,CAACpC,MAAM,CAACsC,CAAC,EAAEzD,SAAS,CAAC,CAAC4D,QAAQ,EAAE;MACjD,IAAMC,GAAG,GAAGN,GAAG,CAACpC,MAAM,CAACsC,CAAC,GAAG,CAAC,EAAEzD,SAAS,CAAC,CAAC4D,QAAQ,EAAE;MACnDJ,UAAU,CAACM,IAAI,CAAC;QAAEH,KAAK,EAAAA,KAAA;QAAEE,GAAG,EAAAA;MAAA,CAAE,CAAC;;IAGjC,OAAOL,UAAU;EACnB,CAAC;EAED;;;;;EAKA3C,iBAAA,CAAAE,SAAA,CAAAgD,YAAY,GAAZ;;IACE,QAAA9B,EAAA,IAAAC,EAAA,GAAO,IAAI,CAACH,SAAS,EAAE,cAAAG,EAAA,uBAAAA,EAAA,CAAE0B,QAAQ,gBAAA3B,EAAA,cAAAA,EAAA,GAAM,CAAC;EAC1C,CAAC;EAED;;;;;EAKApB,iBAAA,CAAAE,SAAA,CAAAiD,cAAc,GAAd,UAAeC,WAAoB;IACjC,IAAM3C,WAAW,GAAG,IAAI,CAACR,IAAI,CAACoD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACtD,IAAI,CAACnD,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,aAAa,CAAC,EAAEE,WAAW,CAAC;EACvD,CAAC;EAED;;;;;EAKAT,iBAAA,CAAAE,SAAA,CAAAsD,cAAc,GAAd,UAAeC,WAAoB;IACjC,IAAM/C,WAAW,GAAG,IAAI,CAACT,IAAI,CAACoD,OAAO,CAACC,GAAG,CAACG,WAAW,CAAC;IACtD,IAAI,CAACxD,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,aAAa,CAAC,EAAEG,WAAW,CAAC;EACvD,CAAC;EAED;;;;;;EAMAV,iBAAA,CAAAE,SAAA,CAAAwD,eAAe,GAAf,UAAgBC,YAAqB;IACnC,IAAMhD,YAAY,GAAG,IAAI,CAACV,IAAI,CAACoD,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;IACxD,IAAI,CAAC1D,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,cAAc,CAAC,EAAEI,YAAY,CAAC;EACzD,CAAC;EAED;;;;;EAKAX,iBAAA,CAAAE,SAAA,CAAA0D,YAAY,GAAZ,UAAaC,SAAkB;IAC7B,IAAMjD,SAAS,GAAG,IAAI,CAACX,IAAI,CAACoD,OAAO,CAACC,GAAG,CAACO,SAAS,CAAC;IAClD,IAAI,CAAC5D,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,WAAW,CAAC,EAAEK,SAAS,CAAC;EACnD,CAAC;EAED;;;;;EAKAZ,iBAAA,CAAAE,SAAA,CAAA4D,eAAe,GAAf,UAAgBC,YAAqB;IACnC,IAAMlD,YAAY,GAAG,IAAI,CAACZ,IAAI,CAACoD,OAAO,CAACC,GAAG,CAACS,YAAY,CAAC;IACxD,IAAI,CAAC9D,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,cAAc,CAAC,EAAEM,YAAY,CAAC;EACzD,CAAC;EAED;;;;;;EAMAb,iBAAA,CAAAE,SAAA,CAAA8D,kBAAkB,GAAlB,UAAmBC,YAAqB;IACtC,IAAMnD,eAAe,GAAG,IAAI,CAACb,IAAI,CAACoD,OAAO,CAACC,GAAG,CAACW,YAAY,CAAC;IAC3D,IAAI,CAAChE,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,iBAAiB,CAAC,EAAEO,eAAe,CAAC;EAC/D,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;EAsBAd,iBAAA,CAAAE,SAAA,CAAAgE,wBAAwB,GAAxB,UAAyBC,qBAA4C;IACnE7E,aAAa,CACX6E,qBAAqB,EACrB,uBAAuB,EACvBvE,qBAAqB,CACtB;IACD,IAAMiC,IAAI,GAAG3C,OAAO,CAACqB,EAAE,CAAC4D,qBAAqB,CAAC;IAC9C,IAAI,CAAClE,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,uBAAuB,CAAC,EAAEsB,IAAI,CAAC;EAC1D,CAAC;EAED;;;;;;;;;;;;;;;;;;EAkBA7B,iBAAA,CAAAE,SAAA,CAAAkE,mBAAmB,GAAnB,UAAoBC,gBAAkC;IACpD/E,aAAa,CAAC+E,gBAAgB,EAAE,kBAAkB,EAAExE,gBAAgB,CAAC;IACrE,IAAMoC,SAAS,GAAG/C,OAAO,CAACqB,EAAE,CAAC8D,gBAAgB,CAAC;IAC9C,IAAI,CAACpE,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,WAAW,CAAC,EAAE0B,SAAS,CAAC;EACnD,CAAC;EAED;;;;;;;;;;;;;;;EAeAjC,iBAAA,CAAAE,SAAA,CAAAoE,eAAe,GAAf,UAAgBC,YAA0B;IACxCjF,aAAa,CAACiF,YAAY,EAAE,cAAc,EAAEzE,YAAY,CAAC;IACzD,IAAMsC,OAAO,GAAGlD,OAAO,CAACqB,EAAE,CAACgE,YAAY,CAAC;IACxC,IAAI,CAACtE,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,cAAc,CAAC,EAAE6B,OAAO,CAAC;EACpD,CAAC;EAED;;;;;;;;;;;;;;;EAeApC,iBAAA,CAAAE,SAAA,CAAAsE,SAAS,GAAT,UAAUjC,MAAc;IACtBjD,aAAa,CAACiD,MAAM,EAAE,QAAQ,EAAExC,MAAM,CAAC;IACvC,IAAM0E,GAAG,GAAGvF,OAAO,CAACqB,EAAE,CAACgC,MAAM,CAAC;IAC9B,IAAI,CAACtC,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,QAAQ,CAAC,EAAEkE,GAAG,CAAC;EAC1C,CAAC;EAED;;;;;;;;;;;;;EAaAzE,iBAAA,CAAAE,SAAA,CAAAwE,oBAAoB,GAApB,UAAqBC,iBAA0B;IAC7C,IAAM3D,iBAAiB,GAAG,IAAI,CAACf,IAAI,CAACoD,OAAO,CAACC,GAAG,CAACqB,iBAAiB,CAAC;IAClE,IAAI,CAAC1E,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,mBAAmB,CAAC,EAAES,iBAAiB,CAAC;EACnE,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BAhB,iBAAA,CAAAE,SAAA,CAAA0E,iBAAiB,GAAjB,UAAkBC,cAAuC;IACvD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,cAAc,CAAC,EAAEA,cAAc,GAAG,CAACA,cAAc,CAAC;IAErE,IAAMG,SAAS,GAAa,EAAE;IAC9B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGL,cAAc,CAACM,MAAM,EAAEF,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MAC/DD,SAAS,CAAC/B,IAAI,CAAC4B,cAAc,CAACI,GAAG,CAAC,CAACnC,KAAK,CAAC;MACzCkC,SAAS,CAAC/B,IAAI,CAAC4B,cAAc,CAACI,GAAG,CAAC,CAACjC,GAAG,CAAC;;IAGzC5D,YAAY,CAAC4F,SAAS,EAAE,gBAAgB,EAAE,CAAC,QAAQ,CAAC,CAAC;IAErD,IAAMrC,UAAU,GAAG,IAAI,CAAC1C,IAAI,CAACoD,OAAO,CAACC,GAAG,CAAC0B,SAAS,CAAC;IACnD,IAAI,CAAC/E,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,gBAAgB,CAAC,EAAEoC,UAAU,CAAC;EACzD,CAAC;EAED;;;;;EAKA3C,iBAAA,CAAAE,SAAA,CAAAkF,YAAY,GAAZ,UAAaC,SAAiB;IAC5B9F,WAAW,CAAC8F,SAAS,EAAE,WAAW,EAAE,CAAC,EAAEC,MAAM,CAACC,SAAS,CAAC;IACxDlG,aAAa,CAACgG,SAAS,EAAE,WAAW,CAAC;IACrC,IAAMnE,SAAS,GAAG,IAAI,CAACjB,IAAI,CAACoD,OAAO,CAACC,GAAG,CAAC+B,SAAS,CAAC;IAClD,IAAI,CAACpF,IAAI,CAACsD,GAAG,CAACrE,OAAO,CAACqB,EAAE,CAAC,WAAW,CAAC,EAAEW,SAAS,CAAC;EACnD,CAAC;EA3dD;EACOlB,iBAAA,CAAAwF,QAAQ,GAAG,UAACvF,IAAa;IAC9B,WAAID,iBAAiB,CAACC,IAAI,CAAC;EAA3B,CAA2B;EAE7B;EACOD,iBAAA,CAAAyF,MAAM,GAAG,UAACpC,OAAmB;IAClC,IAAMpD,IAAI,GAAGoD,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;IAC5B,OAAO,IAAItD,iBAAiB,CAACC,IAAI,CAAC;EACpC,CAAC;EAodH,OAAAD,iBAAC;CAAA,CAheD;AAkeA,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}