{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport PDFDocument from \"../PDFDocument\";\nimport { colorToComponents, setFillingColor } from \"../colors\";\nimport { toDegrees, rotateRectangle, reduceRotation, adjustDimsForRotation, degrees } from \"../rotations\";\nimport { PDFRef, PDFWidgetAnnotation, PDFName, MethodNotImplementedError, AcroFieldFlags, PDFAcroTerminal, AnnotationFlags } from \"../../core\";\nimport { assertIs, assertMultiple, assertOrUndefined } from \"../../utils\";\nimport { ImageAlignment } from '../image';\nimport { drawImage, rotateInPlace } from '../operations';\nexport var assertFieldAppearanceOptions = function (options) {\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.x, 'options.x', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.y, 'options.y', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.width, 'options.width', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.height, 'options.height', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.textColor, 'options.textColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.backgroundColor, 'options.backgroundColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderWidth, 'options.borderWidth', ['number']);\n  assertOrUndefined(options === null || options === void 0 ? void 0 : options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n};\n/**\r\n * Represents a field of a [[PDFForm]].\r\n *\r\n * This class is effectively abstract. All fields in a [[PDFForm]] will\r\n * actually be an instance of a subclass of this class.\r\n *\r\n * Note that each field in a PDF is represented by a single field object.\r\n * However, a given field object may be rendered at multiple locations within\r\n * the document (across one or more pages). The rendering of a field is\r\n * controlled by its widgets. Each widget causes its field to be displayed at a\r\n * particular location in the document.\r\n *\r\n * Most of the time each field in a PDF has only a single widget, and thus is\r\n * only rendered once. However, if a field is rendered multiple times, it will\r\n * have multiple widgets - one for each location it is rendered.\r\n *\r\n * This abstraction of field objects and widgets is defined in the PDF\r\n * specification and dictates how PDF files store fields and where they are\r\n * to be rendered.\r\n */\nvar PDFField = /** @class */function () {\n  function PDFField(acroField, ref, doc) {\n    assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.acroField = acroField;\n    this.ref = ref;\n    this.doc = doc;\n  }\n  /**\r\n   * Get the fully qualified name of this field. For example:\r\n   * ```js\r\n   * const fields = form.getFields()\r\n   * fields.forEach(field => {\r\n   *   const name = field.getName()\r\n   *   console.log('Field name:', name)\r\n   * })\r\n   * ```\r\n   * Note that PDF fields are structured as a tree. Each field is the\r\n   * descendent of a series of ancestor nodes all the way up to the form node,\r\n   * which is always the root of the tree. Each node in the tree (except for\r\n   * the form node) has a partial name. Partial names can be composed of any\r\n   * unicode characters except a period (`.`). The fully qualified name of a\r\n   * field is composed of the partial names of all its ancestors joined\r\n   * with periods. This means that splitting the fully qualified name on\r\n   * periods and taking the last element of the resulting array will give you\r\n   * the partial name of a specific field.\r\n   * @returns The fully qualified name of this field.\r\n   */\n  PDFField.prototype.getName = function () {\n    var _a;\n    return (_a = this.acroField.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n  };\n  /**\r\n   * Returns `true` if this field is read only. This means that PDF readers\r\n   * will not allow users to interact with the field or change its value. See\r\n   * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * if (field.isReadOnly()) console.log('Read only is enabled')\r\n   * ```\r\n   * @returns Whether or not this is a read only field.\r\n   */\n  PDFField.prototype.isReadOnly = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.ReadOnly);\n  };\n  /**\r\n   * Prevent PDF readers from allowing users to interact with this field or\r\n   * change its value. The field will not respond to mouse or keyboard input.\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.enableReadOnly()\r\n   * ```\r\n   * Useful for fields whose values are computed, imported from a database, or\r\n   * prefilled by software before being displayed to the user.\r\n   */\n  PDFField.prototype.enableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, true);\n  };\n  /**\r\n   * Allow users to interact with this field and change its value in PDF\r\n   * readers via mouse and keyboard input. For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.disableReadOnly()\r\n   * ```\r\n   */\n  PDFField.prototype.disableReadOnly = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, false);\n  };\n  /**\r\n   * Returns `true` if this field must have a value when the form is submitted.\r\n   * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * if (field.isRequired()) console.log('Field is required')\r\n   * ```\r\n   * @returns Whether or not this field is required.\r\n   */\n  PDFField.prototype.isRequired = function () {\n    return this.acroField.hasFlag(AcroFieldFlags.Required);\n  };\n  /**\r\n   * Require this field to have a value when the form is submitted.\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.enableRequired()\r\n   * ```\r\n   */\n  PDFField.prototype.enableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, true);\n  };\n  /**\r\n   * Do not require this field to have a value when the form is submitted.\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.disableRequired()\r\n   * ```\r\n   */\n  PDFField.prototype.disableRequired = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.Required, false);\n  };\n  /**\r\n   * Returns `true` if this field's value should be exported when the form is\r\n   * submitted. See [[PDFField.enableExporting]] and\r\n   * [[PDFField.disableExporting]].\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * if (field.isExported()) console.log('Exporting is enabled')\r\n   * ```\r\n   * @returns Whether or not this field's value should be exported.\r\n   */\n  PDFField.prototype.isExported = function () {\n    return !this.acroField.hasFlag(AcroFieldFlags.NoExport);\n  };\n  /**\r\n   * Indicate that this field's value should be exported when the form is\r\n   * submitted in a PDF reader. For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.enableExporting()\r\n   * ```\r\n   */\n  PDFField.prototype.enableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, false);\n  };\n  /**\r\n   * Indicate that this field's value should **not** be exported when the form\r\n   * is submitted in a PDF reader. For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.disableExporting()\r\n   * ```\r\n   */\n  PDFField.prototype.disableExporting = function () {\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, true);\n  };\n  /** @ignore */\n  PDFField.prototype.needsAppearancesUpdate = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'needsAppearancesUpdate');\n  };\n  /** @ignore */\n  PDFField.prototype.defaultUpdateAppearances = function (_font) {\n    throw new MethodNotImplementedError(this.constructor.name, 'defaultUpdateAppearances');\n  };\n  PDFField.prototype.markAsDirty = function () {\n    this.doc.getForm().markFieldAsDirty(this.ref);\n  };\n  PDFField.prototype.markAsClean = function () {\n    this.doc.getForm().markFieldAsClean(this.ref);\n  };\n  PDFField.prototype.isDirty = function () {\n    return this.doc.getForm().fieldIsDirty(this.ref);\n  };\n  PDFField.prototype.createWidget = function (options) {\n    var _a;\n    var textColor = options.textColor;\n    var backgroundColor = options.backgroundColor;\n    var borderColor = options.borderColor;\n    var borderWidth = options.borderWidth;\n    var degreesAngle = toDegrees(options.rotate);\n    var caption = options.caption;\n    var x = options.x;\n    var y = options.y;\n    var width = options.width + borderWidth;\n    var height = options.height + borderWidth;\n    var hidden = Boolean(options.hidden);\n    var pageRef = options.page;\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\n    // Create a widget for this field\n    var widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\n    // Set widget properties\n    var rect = rotateRectangle({\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }, borderWidth, degreesAngle);\n    widget.setRectangle(rect);\n    if (pageRef) widget.setP(pageRef);\n    var ac = widget.getOrCreateAppearanceCharacteristics();\n    if (backgroundColor) {\n      ac.setBackgroundColor(colorToComponents(backgroundColor));\n    }\n    ac.setRotation(degreesAngle);\n    if (caption) ac.setCaptions({\n      normal: caption\n    });\n    if (borderColor) ac.setBorderColor(colorToComponents(borderColor));\n    var bs = widget.getOrCreateBorderStyle();\n    if (borderWidth !== undefined) bs.setWidth(borderWidth);\n    widget.setFlagTo(AnnotationFlags.Print, true);\n    widget.setFlagTo(AnnotationFlags.Hidden, hidden);\n    widget.setFlagTo(AnnotationFlags.Invisible, false);\n    // Set acrofield properties\n    if (textColor) {\n      var da = (_a = this.acroField.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n      var newDa = da + '\\n' + setFillingColor(textColor).toString();\n      this.acroField.setDefaultAppearance(newDa);\n    }\n    return widget;\n  };\n  PDFField.prototype.updateWidgetAppearanceWithFont = function (widget, font, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceStream(widget, normal, font),\n      rollover: rollover && this.createAppearanceStream(widget, rollover, font),\n      down: down && this.createAppearanceStream(widget, down, font)\n    });\n  };\n  PDFField.prototype.updateOnOffWidgetAppearance = function (widget, onValue, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    this.updateWidgetAppearances(widget, {\n      normal: this.createAppearanceDict(widget, normal, onValue),\n      rollover: rollover && this.createAppearanceDict(widget, rollover, onValue),\n      down: down && this.createAppearanceDict(widget, down, onValue)\n    });\n  };\n  PDFField.prototype.updateWidgetAppearances = function (widget, _a) {\n    var normal = _a.normal,\n      rollover = _a.rollover,\n      down = _a.down;\n    widget.setNormalAppearance(normal);\n    if (rollover) {\n      widget.setRolloverAppearance(rollover);\n    } else {\n      widget.removeRolloverAppearance();\n    }\n    if (down) {\n      widget.setDownAppearance(down);\n    } else {\n      widget.removeDownAppearance();\n    }\n  };\n  // // TODO: Do we need to do this...?\n  // private foo(font: PDFFont, dict: PDFDict) {\n  //   if (!dict.lookup(PDFName.of('DR'))) {\n  //     dict.set(PDFName.of('DR'), dict.context.obj({}));\n  //   }\n  //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\n  //   if (!DR.lookup(PDFName.of('Font'))) {\n  //     DR.set(PDFName.of('Font'), dict.context.obj({}));\n  //   }\n  //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\n  //   Font.set(PDFName.of(font.name), font.ref);\n  // }\n  PDFField.prototype.createAppearanceStream = function (widget, appearance, font) {\n    var _a;\n    var context = this.acroField.dict.context;\n    var _b = widget.getRectangle(),\n      width = _b.width,\n      height = _b.height;\n    // TODO: Do we need to do this...?\n    // if (font) {\n    //   this.foo(font, widget.dict);\n    //   this.foo(font, this.doc.getForm().acroForm.dict);\n    // }\n    // END TODO\n    var Resources = font && {\n      Font: (_a = {}, _a[font.name] = font.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, width, height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    var streamRef = context.register(stream);\n    return streamRef;\n  };\n  /**\r\n   * Create a FormXObject of the supplied image and add it to context.\r\n   * The FormXObject size is calculated based on the widget (including\r\n   * the alignment).\r\n   * @param widget The widget that should display the image.\r\n   * @param alignment The alignment of the image.\r\n   * @param image The image that should be displayed.\r\n   * @returns The ref for the FormXObject that was added to the context.\r\n   */\n  PDFField.prototype.createImageAppearanceStream = function (widget, image, alignment) {\n    // NOTE: This implementation doesn't handle image borders.\n    // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n    //       ratio) to fit perfectly within the widget's rectangle. This method\n    //       does not currently do that. Should there be an option for that?\n    var _a;\n    var _b;\n    var context = this.acroField.dict.context;\n    var rectangle = widget.getRectangle();\n    var ap = widget.getAppearanceCharacteristics();\n    var bs = widget.getBorderStyle();\n    var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n    var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n    var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n      rotation: rotation\n    }));\n    var adj = adjustDimsForRotation(rectangle, rotation);\n    var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n    // Support borders on images and maybe other properties\n    var options = {\n      x: borderWidth,\n      y: borderWidth,\n      width: imageDims.width,\n      height: imageDims.height,\n      //\n      rotate: degrees(0),\n      xSkew: degrees(0),\n      ySkew: degrees(0)\n    };\n    if (alignment === ImageAlignment.Center) {\n      options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\n      options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\n    } else if (alignment === ImageAlignment.Right) {\n      options.x = adj.width - borderWidth - imageDims.width;\n      options.y = adj.height - borderWidth - imageDims.height;\n    }\n    var imageName = this.doc.context.addRandomSuffix('Image', 10);\n    var appearance = __spreadArrays(rotate, drawImage(imageName, options));\n    ////////////\n    var Resources = {\n      XObject: (_a = {}, _a[imageName] = image.ref, _a)\n    };\n    var stream = context.formXObject(appearance, {\n      Resources: Resources,\n      BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n      Matrix: context.obj([1, 0, 0, 1, 0, 0])\n    });\n    return context.register(stream);\n  };\n  PDFField.prototype.createAppearanceDict = function (widget, appearance, onValue) {\n    var context = this.acroField.dict.context;\n    var onStreamRef = this.createAppearanceStream(widget, appearance.on);\n    var offStreamRef = this.createAppearanceStream(widget, appearance.off);\n    var appearanceDict = context.obj({});\n    appearanceDict.set(onValue, onStreamRef);\n    appearanceDict.set(PDFName.of('Off'), offStreamRef);\n    return appearanceDict;\n  };\n  return PDFField;\n}();\nexport default PDFField;","map":{"version":3,"names":["PDFDocument","colorToComponents","setFillingColor","toDegrees","rotateRectangle","reduceRotation","adjustDimsForRotation","degrees","PDFRef","PDFWidgetAnnotation","PDFName","MethodNotImplementedError","AcroFieldFlags","PDFAcroTerminal","AnnotationFlags","assertIs","assertMultiple","assertOrUndefined","ImageAlignment","drawImage","rotateInPlace","assertFieldAppearanceOptions","options","x","y","width","height","textColor","Object","backgroundColor","borderColor","borderWidth","rotate","PDFField","acroField","ref","doc","prototype","getName","_a","getFullyQualifiedName","isReadOnly","hasFlag","ReadOnly","enableReadOnly","setFlagTo","disableReadOnly","isRequired","Required","enableRequired","disableRequired","isExported","NoExport","enableExporting","disableExporting","needsAppearancesUpdate","constructor","name","defaultUpdateAppearances","_font","markAsDirty","getForm","markFieldAsDirty","markAsClean","markFieldAsClean","isDirty","fieldIsDirty","createWidget","degreesAngle","caption","hidden","Boolean","pageRef","page","widget","create","context","rect","setRectangle","setP","ac","getOrCreateAppearanceCharacteristics","setBackgroundColor","setRotation","setCaptions","normal","setBorderColor","bs","getOrCreateBorderStyle","undefined","setWidth","Print","Hidden","Invisible","da","getDefaultAppearance","newDa","toString","setDefaultAppearance","updateWidgetAppearanceWithFont","font","rollover","down","updateWidgetAppearances","createAppearanceStream","updateOnOffWidgetAppearance","onValue","createAppearanceDict","setNormalAppearance","setRolloverAppearance","removeRolloverAppearance","setDownAppearance","removeDownAppearance","appearance","dict","_b","getRectangle","Resources","Font","stream","formXObject","BBox","obj","Matrix","streamRef","register","createImageAppearanceStream","image","alignment","rectangle","ap","getAppearanceCharacteristics","getBorderStyle","getWidth","rotation","getRotation","__assign","adj","imageDims","scaleToFit","xSkew","ySkew","Center","Right","imageName","addRandomSuffix","__spreadArrays","XObject","onStreamRef","on","offStreamRef","off","appearanceDict","set","of"],"sources":["C:\\oleg\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\api\\form\\PDFField.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\r\nimport PDFFont from 'src/api/PDFFont';\r\nimport { AppearanceMapping } from 'src/api/form/appearances';\r\nimport { Color, colorToComponents, setFillingColor } from 'src/api/colors';\r\nimport {\r\n  Rotation,\r\n  toDegrees,\r\n  rotateRectangle,\r\n  reduceRotation,\r\n  adjustDimsForRotation,\r\n  degrees,\r\n} from 'src/api/rotations';\r\n\r\nimport {\r\n  PDFRef,\r\n  PDFWidgetAnnotation,\r\n  PDFOperator,\r\n  PDFName,\r\n  PDFDict,\r\n  MethodNotImplementedError,\r\n  AcroFieldFlags,\r\n  PDFAcroTerminal,\r\n  AnnotationFlags,\r\n} from 'src/core';\r\nimport { assertIs, assertMultiple, assertOrUndefined } from 'src/utils';\r\nimport { ImageAlignment } from '../image';\r\nimport PDFImage from '../PDFImage';\r\nimport { drawImage, rotateInPlace } from '../operations';\r\n\r\nexport interface FieldAppearanceOptions {\r\n  x?: number;\r\n  y?: number;\r\n  width?: number;\r\n  height?: number;\r\n  textColor?: Color;\r\n  backgroundColor?: Color;\r\n  borderColor?: Color;\r\n  borderWidth?: number;\r\n  rotate?: Rotation;\r\n  font?: PDFFont;\r\n  hidden?: boolean;\r\n}\r\n\r\nexport const assertFieldAppearanceOptions = (\r\n  options?: FieldAppearanceOptions,\r\n) => {\r\n  assertOrUndefined(options?.x, 'options.x', ['number']);\r\n  assertOrUndefined(options?.y, 'options.y', ['number']);\r\n  assertOrUndefined(options?.width, 'options.width', ['number']);\r\n  assertOrUndefined(options?.height, 'options.height', ['number']);\r\n  assertOrUndefined(options?.textColor, 'options.textColor', [\r\n    [Object, 'Color'],\r\n  ]);\r\n  assertOrUndefined(options?.backgroundColor, 'options.backgroundColor', [\r\n    [Object, 'Color'],\r\n  ]);\r\n  assertOrUndefined(options?.borderColor, 'options.borderColor', [\r\n    [Object, 'Color'],\r\n  ]);\r\n  assertOrUndefined(options?.borderWidth, 'options.borderWidth', ['number']);\r\n  assertOrUndefined(options?.rotate, 'options.rotate', [[Object, 'Rotation']]);\r\n};\r\n\r\n/**\r\n * Represents a field of a [[PDFForm]].\r\n *\r\n * This class is effectively abstract. All fields in a [[PDFForm]] will\r\n * actually be an instance of a subclass of this class.\r\n *\r\n * Note that each field in a PDF is represented by a single field object.\r\n * However, a given field object may be rendered at multiple locations within\r\n * the document (across one or more pages). The rendering of a field is\r\n * controlled by its widgets. Each widget causes its field to be displayed at a\r\n * particular location in the document.\r\n *\r\n * Most of the time each field in a PDF has only a single widget, and thus is\r\n * only rendered once. However, if a field is rendered multiple times, it will\r\n * have multiple widgets - one for each location it is rendered.\r\n *\r\n * This abstraction of field objects and widgets is defined in the PDF\r\n * specification and dictates how PDF files store fields and where they are\r\n * to be rendered.\r\n */\r\nexport default class PDFField {\r\n  /** The low-level PDFAcroTerminal wrapped by this field. */\r\n  readonly acroField: PDFAcroTerminal;\r\n\r\n  /** The unique reference assigned to this field within the document. */\r\n  readonly ref: PDFRef;\r\n\r\n  /** The document to which this field belongs. */\r\n  readonly doc: PDFDocument;\r\n\r\n  protected constructor(\r\n    acroField: PDFAcroTerminal,\r\n    ref: PDFRef,\r\n    doc: PDFDocument,\r\n  ) {\r\n    assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\r\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\r\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\r\n\r\n    this.acroField = acroField;\r\n    this.ref = ref;\r\n    this.doc = doc;\r\n  }\r\n\r\n  /**\r\n   * Get the fully qualified name of this field. For example:\r\n   * ```js\r\n   * const fields = form.getFields()\r\n   * fields.forEach(field => {\r\n   *   const name = field.getName()\r\n   *   console.log('Field name:', name)\r\n   * })\r\n   * ```\r\n   * Note that PDF fields are structured as a tree. Each field is the\r\n   * descendent of a series of ancestor nodes all the way up to the form node,\r\n   * which is always the root of the tree. Each node in the tree (except for\r\n   * the form node) has a partial name. Partial names can be composed of any\r\n   * unicode characters except a period (`.`). The fully qualified name of a\r\n   * field is composed of the partial names of all its ancestors joined\r\n   * with periods. This means that splitting the fully qualified name on\r\n   * periods and taking the last element of the resulting array will give you\r\n   * the partial name of a specific field.\r\n   * @returns The fully qualified name of this field.\r\n   */\r\n  getName(): string {\r\n    return this.acroField.getFullyQualifiedName() ?? '';\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if this field is read only. This means that PDF readers\r\n   * will not allow users to interact with the field or change its value. See\r\n   * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * if (field.isReadOnly()) console.log('Read only is enabled')\r\n   * ```\r\n   * @returns Whether or not this is a read only field.\r\n   */\r\n  isReadOnly(): boolean {\r\n    return this.acroField.hasFlag(AcroFieldFlags.ReadOnly);\r\n  }\r\n\r\n  /**\r\n   * Prevent PDF readers from allowing users to interact with this field or\r\n   * change its value. The field will not respond to mouse or keyboard input.\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.enableReadOnly()\r\n   * ```\r\n   * Useful for fields whose values are computed, imported from a database, or\r\n   * prefilled by software before being displayed to the user.\r\n   */\r\n  enableReadOnly() {\r\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, true);\r\n  }\r\n\r\n  /**\r\n   * Allow users to interact with this field and change its value in PDF\r\n   * readers via mouse and keyboard input. For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.disableReadOnly()\r\n   * ```\r\n   */\r\n  disableReadOnly() {\r\n    this.acroField.setFlagTo(AcroFieldFlags.ReadOnly, false);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if this field must have a value when the form is submitted.\r\n   * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * if (field.isRequired()) console.log('Field is required')\r\n   * ```\r\n   * @returns Whether or not this field is required.\r\n   */\r\n  isRequired(): boolean {\r\n    return this.acroField.hasFlag(AcroFieldFlags.Required);\r\n  }\r\n\r\n  /**\r\n   * Require this field to have a value when the form is submitted.\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.enableRequired()\r\n   * ```\r\n   */\r\n  enableRequired() {\r\n    this.acroField.setFlagTo(AcroFieldFlags.Required, true);\r\n  }\r\n\r\n  /**\r\n   * Do not require this field to have a value when the form is submitted.\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.disableRequired()\r\n   * ```\r\n   */\r\n  disableRequired() {\r\n    this.acroField.setFlagTo(AcroFieldFlags.Required, false);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if this field's value should be exported when the form is\r\n   * submitted. See [[PDFField.enableExporting]] and\r\n   * [[PDFField.disableExporting]].\r\n   * For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * if (field.isExported()) console.log('Exporting is enabled')\r\n   * ```\r\n   * @returns Whether or not this field's value should be exported.\r\n   */\r\n  isExported(): boolean {\r\n    return !this.acroField.hasFlag(AcroFieldFlags.NoExport);\r\n  }\r\n\r\n  /**\r\n   * Indicate that this field's value should be exported when the form is\r\n   * submitted in a PDF reader. For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.enableExporting()\r\n   * ```\r\n   */\r\n  enableExporting() {\r\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, false);\r\n  }\r\n\r\n  /**\r\n   * Indicate that this field's value should **not** be exported when the form\r\n   * is submitted in a PDF reader. For example:\r\n   * ```js\r\n   * const field = form.getField('some.field')\r\n   * field.disableExporting()\r\n   * ```\r\n   */\r\n  disableExporting() {\r\n    this.acroField.setFlagTo(AcroFieldFlags.NoExport, true);\r\n  }\r\n\r\n  /** @ignore */\r\n  needsAppearancesUpdate(): boolean {\r\n    throw new MethodNotImplementedError(\r\n      this.constructor.name,\r\n      'needsAppearancesUpdate',\r\n    );\r\n  }\r\n\r\n  /** @ignore */\r\n  defaultUpdateAppearances(_font: PDFFont) {\r\n    throw new MethodNotImplementedError(\r\n      this.constructor.name,\r\n      'defaultUpdateAppearances',\r\n    );\r\n  }\r\n\r\n  protected markAsDirty() {\r\n    this.doc.getForm().markFieldAsDirty(this.ref);\r\n  }\r\n\r\n  protected markAsClean() {\r\n    this.doc.getForm().markFieldAsClean(this.ref);\r\n  }\r\n\r\n  protected isDirty(): boolean {\r\n    return this.doc.getForm().fieldIsDirty(this.ref);\r\n  }\r\n\r\n  protected createWidget(options: {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    textColor?: Color;\r\n    backgroundColor?: Color;\r\n    borderColor?: Color;\r\n    borderWidth: number;\r\n    rotate: Rotation;\r\n    caption?: string;\r\n    hidden?: boolean;\r\n    page?: PDFRef;\r\n  }): PDFWidgetAnnotation {\r\n    const textColor = options.textColor;\r\n    const backgroundColor = options.backgroundColor;\r\n    const borderColor = options.borderColor;\r\n    const borderWidth = options.borderWidth;\r\n    const degreesAngle = toDegrees(options.rotate);\r\n    const caption = options.caption;\r\n    const x = options.x;\r\n    const y = options.y;\r\n    const width = options.width + borderWidth;\r\n    const height = options.height + borderWidth;\r\n    const hidden = Boolean(options.hidden);\r\n    const pageRef = options.page;\r\n\r\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\r\n\r\n    // Create a widget for this field\r\n    const widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\r\n\r\n    // Set widget properties\r\n    const rect = rotateRectangle(\r\n      { x, y, width, height },\r\n      borderWidth,\r\n      degreesAngle,\r\n    );\r\n    widget.setRectangle(rect);\r\n\r\n    if (pageRef) widget.setP(pageRef);\r\n\r\n    const ac = widget.getOrCreateAppearanceCharacteristics();\r\n    if (backgroundColor) {\r\n      ac.setBackgroundColor(colorToComponents(backgroundColor));\r\n    }\r\n    ac.setRotation(degreesAngle);\r\n    if (caption) ac.setCaptions({ normal: caption });\r\n    if (borderColor) ac.setBorderColor(colorToComponents(borderColor));\r\n\r\n    const bs = widget.getOrCreateBorderStyle();\r\n    if (borderWidth !== undefined) bs.setWidth(borderWidth);\r\n\r\n    widget.setFlagTo(AnnotationFlags.Print, true);\r\n    widget.setFlagTo(AnnotationFlags.Hidden, hidden);\r\n    widget.setFlagTo(AnnotationFlags.Invisible, false);\r\n\r\n    // Set acrofield properties\r\n    if (textColor) {\r\n      const da = this.acroField.getDefaultAppearance() ?? '';\r\n      const newDa = da + '\\n' + setFillingColor(textColor).toString();\r\n      this.acroField.setDefaultAppearance(newDa);\r\n    }\r\n\r\n    return widget;\r\n  }\r\n\r\n  protected updateWidgetAppearanceWithFont(\r\n    widget: PDFWidgetAnnotation,\r\n    font: PDFFont,\r\n    { normal, rollover, down }: AppearanceMapping<PDFOperator[]>,\r\n  ) {\r\n    this.updateWidgetAppearances(widget, {\r\n      normal: this.createAppearanceStream(widget, normal, font),\r\n      rollover: rollover && this.createAppearanceStream(widget, rollover, font),\r\n      down: down && this.createAppearanceStream(widget, down, font),\r\n    });\r\n  }\r\n\r\n  protected updateOnOffWidgetAppearance(\r\n    widget: PDFWidgetAnnotation,\r\n    onValue: PDFName,\r\n    {\r\n      normal,\r\n      rollover,\r\n      down,\r\n    }: AppearanceMapping<{ on: PDFOperator[]; off: PDFOperator[] }>,\r\n  ) {\r\n    this.updateWidgetAppearances(widget, {\r\n      normal: this.createAppearanceDict(widget, normal, onValue),\r\n      rollover:\r\n        rollover && this.createAppearanceDict(widget, rollover, onValue),\r\n      down: down && this.createAppearanceDict(widget, down, onValue),\r\n    });\r\n  }\r\n\r\n  protected updateWidgetAppearances(\r\n    widget: PDFWidgetAnnotation,\r\n    { normal, rollover, down }: AppearanceMapping<PDFRef | PDFDict>,\r\n  ) {\r\n    widget.setNormalAppearance(normal);\r\n\r\n    if (rollover) {\r\n      widget.setRolloverAppearance(rollover);\r\n    } else {\r\n      widget.removeRolloverAppearance();\r\n    }\r\n\r\n    if (down) {\r\n      widget.setDownAppearance(down);\r\n    } else {\r\n      widget.removeDownAppearance();\r\n    }\r\n  }\r\n\r\n  // // TODO: Do we need to do this...?\r\n  // private foo(font: PDFFont, dict: PDFDict) {\r\n  //   if (!dict.lookup(PDFName.of('DR'))) {\r\n  //     dict.set(PDFName.of('DR'), dict.context.obj({}));\r\n  //   }\r\n  //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\r\n\r\n  //   if (!DR.lookup(PDFName.of('Font'))) {\r\n  //     DR.set(PDFName.of('Font'), dict.context.obj({}));\r\n  //   }\r\n  //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\r\n\r\n  //   Font.set(PDFName.of(font.name), font.ref);\r\n  // }\r\n\r\n  private createAppearanceStream(\r\n    widget: PDFWidgetAnnotation,\r\n    appearance: PDFOperator[],\r\n    font?: PDFFont,\r\n  ): PDFRef {\r\n    const { context } = this.acroField.dict;\r\n    const { width, height } = widget.getRectangle();\r\n\r\n    // TODO: Do we need to do this...?\r\n    // if (font) {\r\n    //   this.foo(font, widget.dict);\r\n    //   this.foo(font, this.doc.getForm().acroForm.dict);\r\n    // }\r\n    // END TODO\r\n\r\n    const Resources = font && { Font: { [font.name]: font.ref } };\r\n    const stream = context.formXObject(appearance, {\r\n      Resources,\r\n      BBox: context.obj([0, 0, width, height]),\r\n      Matrix: context.obj([1, 0, 0, 1, 0, 0]),\r\n    });\r\n    const streamRef = context.register(stream);\r\n\r\n    return streamRef;\r\n  }\r\n\r\n  /**\r\n   * Create a FormXObject of the supplied image and add it to context.\r\n   * The FormXObject size is calculated based on the widget (including\r\n   * the alignment).\r\n   * @param widget The widget that should display the image.\r\n   * @param alignment The alignment of the image.\r\n   * @param image The image that should be displayed.\r\n   * @returns The ref for the FormXObject that was added to the context.\r\n   */\r\n  protected createImageAppearanceStream(\r\n    widget: PDFWidgetAnnotation,\r\n    image: PDFImage,\r\n    alignment: ImageAlignment,\r\n  ): PDFRef {\r\n    // NOTE: This implementation doesn't handle image borders.\r\n    // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\r\n    //       ratio) to fit perfectly within the widget's rectangle. This method\r\n    //       does not currently do that. Should there be an option for that?\r\n\r\n    const { context } = this.acroField.dict;\r\n\r\n    const rectangle = widget.getRectangle();\r\n    const ap = widget.getAppearanceCharacteristics();\r\n    const bs = widget.getBorderStyle();\r\n\r\n    const borderWidth = bs?.getWidth() ?? 0;\r\n    const rotation = reduceRotation(ap?.getRotation());\r\n\r\n    const rotate = rotateInPlace({ ...rectangle, rotation });\r\n\r\n    const adj = adjustDimsForRotation(rectangle, rotation);\r\n    const imageDims = image.scaleToFit(\r\n      adj.width - borderWidth * 2,\r\n      adj.height - borderWidth * 2,\r\n    );\r\n\r\n    // Support borders on images and maybe other properties\r\n    const options = {\r\n      x: borderWidth,\r\n      y: borderWidth,\r\n      width: imageDims.width,\r\n      height: imageDims.height,\r\n      //\r\n      rotate: degrees(0),\r\n      xSkew: degrees(0),\r\n      ySkew: degrees(0),\r\n    };\r\n\r\n    if (alignment === ImageAlignment.Center) {\r\n      options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\r\n      options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\r\n    } else if (alignment === ImageAlignment.Right) {\r\n      options.x = adj.width - borderWidth - imageDims.width;\r\n      options.y = adj.height - borderWidth - imageDims.height;\r\n    }\r\n\r\n    const imageName = this.doc.context.addRandomSuffix('Image', 10);\r\n    const appearance = [...rotate, ...drawImage(imageName, options)];\r\n    ////////////\r\n\r\n    const Resources = { XObject: { [imageName]: image.ref } };\r\n    const stream = context.formXObject(appearance, {\r\n      Resources,\r\n      BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\r\n      Matrix: context.obj([1, 0, 0, 1, 0, 0]),\r\n    });\r\n\r\n    return context.register(stream);\r\n  }\r\n\r\n  private createAppearanceDict(\r\n    widget: PDFWidgetAnnotation,\r\n    appearance: { on: PDFOperator[]; off: PDFOperator[] },\r\n    onValue: PDFName,\r\n  ): PDFDict {\r\n    const { context } = this.acroField.dict;\r\n\r\n    const onStreamRef = this.createAppearanceStream(widget, appearance.on);\r\n    const offStreamRef = this.createAppearanceStream(widget, appearance.off);\r\n\r\n    const appearanceDict = context.obj({});\r\n    appearanceDict.set(onValue, onStreamRef);\r\n    appearanceDict.set(PDFName.of('Off'), offStreamRef);\r\n\r\n    return appearanceDict;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}