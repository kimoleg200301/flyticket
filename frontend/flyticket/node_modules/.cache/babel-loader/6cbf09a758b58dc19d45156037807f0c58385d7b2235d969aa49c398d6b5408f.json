{"ast":null,"code":"import { ReparseError } from \"../errors\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport ByteStream from \"./ByteStream\";\nvar PDFXRefStreamParser = /** @class */function () {\n  function PDFXRefStreamParser(rawStream) {\n    this.alreadyParsed = false;\n    this.dict = rawStream.dict;\n    this.bytes = ByteStream.fromPDFRawStream(rawStream);\n    this.context = this.dict.context;\n    var Size = this.dict.lookup(PDFName.of('Size'), PDFNumber);\n    var Index = this.dict.lookup(PDFName.of('Index'));\n    if (Index instanceof PDFArray) {\n      this.subsections = [];\n      for (var idx = 0, len = Index.size(); idx < len; idx += 2) {\n        var firstObjectNumber = Index.lookup(idx + 0, PDFNumber).asNumber();\n        var length_1 = Index.lookup(idx + 1, PDFNumber).asNumber();\n        this.subsections.push({\n          firstObjectNumber: firstObjectNumber,\n          length: length_1\n        });\n      }\n    } else {\n      this.subsections = [{\n        firstObjectNumber: 0,\n        length: Size.asNumber()\n      }];\n    }\n    var W = this.dict.lookup(PDFName.of('W'), PDFArray);\n    this.byteWidths = [-1, -1, -1];\n    for (var idx = 0, len = W.size(); idx < len; idx++) {\n      this.byteWidths[idx] = W.lookup(idx, PDFNumber).asNumber();\n    }\n  }\n  PDFXRefStreamParser.prototype.parseIntoContext = function () {\n    if (this.alreadyParsed) {\n      throw new ReparseError('PDFXRefStreamParser', 'parseIntoContext');\n    }\n    this.alreadyParsed = true;\n    this.context.trailerInfo = {\n      Root: this.dict.get(PDFName.of('Root')),\n      Encrypt: this.dict.get(PDFName.of('Encrypt')),\n      Info: this.dict.get(PDFName.of('Info')),\n      ID: this.dict.get(PDFName.of('ID'))\n    };\n    var entries = this.parseEntries();\n    // for (let idx = 0, len = entries.length; idx < len; idx++) {\n    // const entry = entries[idx];\n    // if (entry.deleted) this.context.delete(entry.ref);\n    // }\n    return entries;\n  };\n  PDFXRefStreamParser.prototype.parseEntries = function () {\n    var entries = [];\n    var _a = this.byteWidths,\n      typeFieldWidth = _a[0],\n      offsetFieldWidth = _a[1],\n      genFieldWidth = _a[2];\n    for (var subsectionIdx = 0, subsectionLen = this.subsections.length; subsectionIdx < subsectionLen; subsectionIdx++) {\n      var _b = this.subsections[subsectionIdx],\n        firstObjectNumber = _b.firstObjectNumber,\n        length_2 = _b.length;\n      for (var objIdx = 0; objIdx < length_2; objIdx++) {\n        var type = 0;\n        for (var idx = 0, len = typeFieldWidth; idx < len; idx++) {\n          type = type << 8 | this.bytes.next();\n        }\n        var offset = 0;\n        for (var idx = 0, len = offsetFieldWidth; idx < len; idx++) {\n          offset = offset << 8 | this.bytes.next();\n        }\n        var generationNumber = 0;\n        for (var idx = 0, len = genFieldWidth; idx < len; idx++) {\n          generationNumber = generationNumber << 8 | this.bytes.next();\n        }\n        // When the `type` field is absent, it defaults to 1\n        if (typeFieldWidth === 0) type = 1;\n        var objectNumber = firstObjectNumber + objIdx;\n        var entry = {\n          ref: PDFRef.of(objectNumber, generationNumber),\n          offset: offset,\n          deleted: type === 0,\n          inObjectStream: type === 2\n        };\n        entries.push(entry);\n      }\n    }\n    return entries;\n  };\n  PDFXRefStreamParser.forStream = function (rawStream) {\n    return new PDFXRefStreamParser(rawStream);\n  };\n  return PDFXRefStreamParser;\n}();\nexport default PDFXRefStreamParser;","map":{"version":3,"names":["ReparseError","PDFArray","PDFName","PDFNumber","PDFRef","ByteStream","PDFXRefStreamParser","rawStream","alreadyParsed","dict","bytes","fromPDFRawStream","context","Size","lookup","of","Index","subsections","idx","len","size","firstObjectNumber","asNumber","length_1","push","length","W","byteWidths","prototype","parseIntoContext","trailerInfo","Root","get","Encrypt","Info","ID","entries","parseEntries","_a","typeFieldWidth","offsetFieldWidth","genFieldWidth","subsectionIdx","subsectionLen","_b","length_2","objIdx","type","next","offset","generationNumber","objectNumber","entry","ref","deleted","inObjectStream","forStream"],"sources":["C:\\oleg\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\core\\parser\\PDFXRefStreamParser.ts"],"sourcesContent":["import { ReparseError } from 'src/core/errors';\r\nimport PDFArray from 'src/core/objects/PDFArray';\r\nimport PDFDict from 'src/core/objects/PDFDict';\r\nimport PDFName from 'src/core/objects/PDFName';\r\nimport PDFNumber from 'src/core/objects/PDFNumber';\r\nimport PDFRawStream from 'src/core/objects/PDFRawStream';\r\nimport PDFRef from 'src/core/objects/PDFRef';\r\nimport ByteStream from 'src/core/parser/ByteStream';\r\nimport PDFContext from 'src/core/PDFContext';\r\n\r\nexport interface Entry {\r\n  ref: PDFRef;\r\n  offset: number;\r\n  deleted: boolean;\r\n  inObjectStream: boolean;\r\n}\r\n\r\nclass PDFXRefStreamParser {\r\n  static forStream = (rawStream: PDFRawStream) =>\r\n    new PDFXRefStreamParser(rawStream);\r\n\r\n  private alreadyParsed: boolean;\r\n\r\n  private readonly dict: PDFDict;\r\n  private readonly context: PDFContext;\r\n  private readonly bytes: ByteStream;\r\n  private readonly subsections: {\r\n    firstObjectNumber: number;\r\n    length: number;\r\n  }[];\r\n  private readonly byteWidths: [number, number, number];\r\n\r\n  constructor(rawStream: PDFRawStream) {\r\n    this.alreadyParsed = false;\r\n\r\n    this.dict = rawStream.dict;\r\n    this.bytes = ByteStream.fromPDFRawStream(rawStream);\r\n    this.context = this.dict.context;\r\n\r\n    const Size = this.dict.lookup(PDFName.of('Size'), PDFNumber);\r\n\r\n    const Index = this.dict.lookup(PDFName.of('Index'));\r\n    if (Index instanceof PDFArray) {\r\n      this.subsections = [];\r\n      for (let idx = 0, len = Index.size(); idx < len; idx += 2) {\r\n        const firstObjectNumber = Index.lookup(idx + 0, PDFNumber).asNumber();\r\n        const length = Index.lookup(idx + 1, PDFNumber).asNumber();\r\n        this.subsections.push({ firstObjectNumber, length });\r\n      }\r\n    } else {\r\n      this.subsections = [{ firstObjectNumber: 0, length: Size.asNumber() }];\r\n    }\r\n\r\n    const W = this.dict.lookup(PDFName.of('W'), PDFArray);\r\n    this.byteWidths = [-1, -1, -1];\r\n    for (let idx = 0, len = W.size(); idx < len; idx++) {\r\n      this.byteWidths[idx] = W.lookup(idx, PDFNumber).asNumber();\r\n    }\r\n  }\r\n\r\n  parseIntoContext(): Entry[] {\r\n    if (this.alreadyParsed) {\r\n      throw new ReparseError('PDFXRefStreamParser', 'parseIntoContext');\r\n    }\r\n    this.alreadyParsed = true;\r\n\r\n    this.context.trailerInfo = {\r\n      Root: this.dict.get(PDFName.of('Root')),\r\n      Encrypt: this.dict.get(PDFName.of('Encrypt')),\r\n      Info: this.dict.get(PDFName.of('Info')),\r\n      ID: this.dict.get(PDFName.of('ID')),\r\n    };\r\n\r\n    const entries = this.parseEntries();\r\n\r\n    // for (let idx = 0, len = entries.length; idx < len; idx++) {\r\n    // const entry = entries[idx];\r\n    // if (entry.deleted) this.context.delete(entry.ref);\r\n    // }\r\n\r\n    return entries;\r\n  }\r\n\r\n  private parseEntries(): Entry[] {\r\n    const entries = [];\r\n    const [typeFieldWidth, offsetFieldWidth, genFieldWidth] = this.byteWidths;\r\n\r\n    for (\r\n      let subsectionIdx = 0, subsectionLen = this.subsections.length;\r\n      subsectionIdx < subsectionLen;\r\n      subsectionIdx++\r\n    ) {\r\n      const { firstObjectNumber, length } = this.subsections[subsectionIdx];\r\n\r\n      for (let objIdx = 0; objIdx < length; objIdx++) {\r\n        let type = 0;\r\n        for (let idx = 0, len = typeFieldWidth; idx < len; idx++) {\r\n          type = (type << 8) | this.bytes.next();\r\n        }\r\n\r\n        let offset = 0;\r\n        for (let idx = 0, len = offsetFieldWidth; idx < len; idx++) {\r\n          offset = (offset << 8) | this.bytes.next();\r\n        }\r\n\r\n        let generationNumber = 0;\r\n        for (let idx = 0, len = genFieldWidth; idx < len; idx++) {\r\n          generationNumber = (generationNumber << 8) | this.bytes.next();\r\n        }\r\n\r\n        // When the `type` field is absent, it defaults to 1\r\n        if (typeFieldWidth === 0) type = 1;\r\n\r\n        const objectNumber = firstObjectNumber + objIdx;\r\n        const entry = {\r\n          ref: PDFRef.of(objectNumber, generationNumber),\r\n          offset,\r\n          deleted: type === 0,\r\n          inObjectStream: type === 2,\r\n        };\r\n\r\n        entries.push(entry);\r\n      }\r\n    }\r\n\r\n    return entries;\r\n  }\r\n}\r\n\r\nexport default PDFXRefStreamParser;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}