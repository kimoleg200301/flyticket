{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { rgb } from \"./colors\";\nimport { drawImage, drawLine, drawLinesOfText, drawPage, drawRectangle, drawSvgPath, drawEllipse } from \"./operations\";\nimport { popGraphicsState, pushGraphicsState, translate, LineCapStyle, scale } from \"./operators\";\nimport PDFDocument from \"./PDFDocument\";\nimport PDFEmbeddedPage from \"./PDFEmbeddedPage\";\nimport PDFFont from \"./PDFFont\";\nimport PDFImage from \"./PDFImage\";\nimport { BlendMode } from \"./PDFPageOptions\";\nimport { degrees, toDegrees } from \"./rotations\";\nimport { StandardFonts } from \"./StandardFonts\";\nimport { PDFContentStream, PDFName, PDFOperator, PDFPageLeaf, PDFRef, PDFDict, PDFArray } from \"../core\";\nimport { assertEachIs, assertIs, assertMultiple, assertOrUndefined, breakTextIntoLines, cleanText, rectanglesAreEqual, lineSplit, assertRangeOrUndefined, assertIsOneOfOrUndefined } from \"../utils\";\n/**\r\n * Represents a single page of a [[PDFDocument]].\r\n */\nvar PDFPage = /** @class */function () {\n  function PDFPage(leafNode, ref, doc) {\n    this.fontSize = 24;\n    this.fontColor = rgb(0, 0, 0);\n    this.lineHeight = 24;\n    this.x = 0;\n    this.y = 0;\n    assertIs(leafNode, 'leafNode', [[PDFPageLeaf, 'PDFPageLeaf']]);\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    this.node = leafNode;\n    this.ref = ref;\n    this.doc = doc;\n  }\n  /**\r\n   * Rotate this page by a multiple of 90 degrees. For example:\r\n   * ```js\r\n   * import { degrees } from 'pdf-lib'\r\n   *\r\n   * page.setRotation(degrees(-90))\r\n   * page.setRotation(degrees(0))\r\n   * page.setRotation(degrees(90))\r\n   * page.setRotation(degrees(180))\r\n   * page.setRotation(degrees(270))\r\n   * ```\r\n   * @param angle The angle to rotate this page.\r\n   */\n  PDFPage.prototype.setRotation = function (angle) {\n    var degreesAngle = toDegrees(angle);\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\n    this.node.set(PDFName.of('Rotate'), this.doc.context.obj(degreesAngle));\n  };\n  /**\r\n   * Get this page's rotation angle in degrees. For example:\r\n   * ```js\r\n   * const rotationAngle = page.getRotation().angle;\r\n   * ```\r\n   * @returns The rotation angle of the page in degrees (always a multiple of\r\n   *          90 degrees).\r\n   */\n  PDFPage.prototype.getRotation = function () {\n    var Rotate = this.node.Rotate();\n    return degrees(Rotate ? Rotate.asNumber() : 0);\n  };\n  /**\r\n   * Resize this page by increasing or decreasing its width and height. For\r\n   * example:\r\n   * ```js\r\n   * page.setSize(250, 500)\r\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 100)\r\n   * page.setSize(page.getWidth() - 50, page.getHeight() - 100)\r\n   * ```\r\n   *\r\n   * Note that the PDF specification does not allow for pages to have explicit\r\n   * widths and heights. Instead it defines the \"size\" of a page in terms of\r\n   * five rectangles: the MediaBox, CropBox, BleedBox, TrimBox, and ArtBox. As a\r\n   * result, this method cannot directly change the width and height of a page.\r\n   * Instead, it works by adjusting these five boxes.\r\n   *\r\n   * This method performs the following steps:\r\n   *   1. Set width & height of MediaBox.\r\n   *   2. Set width & height of CropBox, if it has same dimensions as MediaBox.\r\n   *   3. Set width & height of BleedBox, if it has same dimensions as MediaBox.\r\n   *   4. Set width & height of TrimBox, if it has same dimensions as MediaBox.\r\n   *   5. Set width & height of ArtBox, if it has same dimensions as MediaBox.\r\n   *\r\n   * This approach works well for most PDF documents as all PDF pages must\r\n   * have a MediaBox, but relatively few have a CropBox, BleedBox, TrimBox, or\r\n   * ArtBox. And when they do have these additional boxes, they often have the\r\n   * same dimensions as the MediaBox. However, if you find this method does not\r\n   * work for your document, consider setting the boxes directly:\r\n   *   * [[PDFPage.setMediaBox]]\r\n   *   * [[PDFPage.setCropBox]]\r\n   *   * [[PDFPage.setBleedBox]]\r\n   *   * [[PDFPage.setTrimBox]]\r\n   *   * [[PDFPage.setArtBox]]\r\n   *\r\n   * @param width The new width of the page.\r\n   * @param height The new height of the page.\r\n   */\n  PDFPage.prototype.setSize = function (width, height) {\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var mediaBox = this.getMediaBox();\n    this.setMediaBox(mediaBox.x, mediaBox.y, width, height);\n    var cropBox = this.getCropBox();\n    var bleedBox = this.getBleedBox();\n    var trimBox = this.getTrimBox();\n    var artBox = this.getArtBox();\n    var hasCropBox = this.node.CropBox();\n    var hasBleedBox = this.node.BleedBox();\n    var hasTrimBox = this.node.TrimBox();\n    var hasArtBox = this.node.ArtBox();\n    if (hasCropBox && rectanglesAreEqual(cropBox, mediaBox)) {\n      this.setCropBox(mediaBox.x, mediaBox.y, width, height);\n    }\n    if (hasBleedBox && rectanglesAreEqual(bleedBox, mediaBox)) {\n      this.setBleedBox(mediaBox.x, mediaBox.y, width, height);\n    }\n    if (hasTrimBox && rectanglesAreEqual(trimBox, mediaBox)) {\n      this.setTrimBox(mediaBox.x, mediaBox.y, width, height);\n    }\n    if (hasArtBox && rectanglesAreEqual(artBox, mediaBox)) {\n      this.setArtBox(mediaBox.x, mediaBox.y, width, height);\n    }\n  };\n  /**\r\n   * Resize this page by increasing or decreasing its width. For example:\r\n   * ```js\r\n   * page.setWidth(250)\r\n   * page.setWidth(page.getWidth() + 50)\r\n   * page.setWidth(page.getWidth() - 50)\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.setSize]] to set the page's width.\r\n   *\r\n   * @param width The new width of the page.\r\n   */\n  PDFPage.prototype.setWidth = function (width) {\n    assertIs(width, 'width', ['number']);\n    this.setSize(width, this.getSize().height);\n  };\n  /**\r\n   * Resize this page by increasing or decreasing its height. For example:\r\n   * ```js\r\n   * page.setHeight(500)\r\n   * page.setHeight(page.getWidth() + 100)\r\n   * page.setHeight(page.getWidth() - 100)\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.setSize]] to set the page's height.\r\n   *\r\n   * @param height The new height of the page.\r\n   */\n  PDFPage.prototype.setHeight = function (height) {\n    assertIs(height, 'height', ['number']);\n    this.setSize(this.getSize().width, height);\n  };\n  /**\r\n   * Set the MediaBox of this page. For example:\r\n   * ```js\r\n   * const mediaBox = page.getMediaBox()\r\n   *\r\n   * page.setMediaBox(0, 0, 250, 500)\r\n   * page.setMediaBox(mediaBox.x, mediaBox.y, 50, 100)\r\n   * page.setMediaBox(15, 5, mediaBox.width - 50, mediaBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getMediaBox]] for details about what the MediaBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new MediaBox.\r\n   * @param y The y coordinate of the lower left corner of the new MediaBox.\r\n   * @param width The width of the new MediaBox.\r\n   * @param height The height of the new MediaBox.\r\n   */\n  PDFPage.prototype.setMediaBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var mediaBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.MediaBox, mediaBox);\n  };\n  /**\r\n   * Set the CropBox of this page. For example:\r\n   * ```js\r\n   * const cropBox = page.getCropBox()\r\n   *\r\n   * page.setCropBox(0, 0, 250, 500)\r\n   * page.setCropBox(cropBox.x, cropBox.y, 50, 100)\r\n   * page.setCropBox(15, 5, cropBox.width - 50, cropBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getCropBox]] for details about what the CropBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new CropBox.\r\n   * @param y The y coordinate of the lower left corner of the new CropBox.\r\n   * @param width The width of the new CropBox.\r\n   * @param height The height of the new CropBox.\r\n   */\n  PDFPage.prototype.setCropBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var cropBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.CropBox, cropBox);\n  };\n  /**\r\n   * Set the BleedBox of this page. For example:\r\n   * ```js\r\n   * const bleedBox = page.getBleedBox()\r\n   *\r\n   * page.setBleedBox(0, 0, 250, 500)\r\n   * page.setBleedBox(bleedBox.x, bleedBox.y, 50, 100)\r\n   * page.setBleedBox(15, 5, bleedBox.width - 50, bleedBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getBleedBox]] for details about what the BleedBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new BleedBox.\r\n   * @param y The y coordinate of the lower left corner of the new BleedBox.\r\n   * @param width The width of the new BleedBox.\r\n   * @param height The height of the new BleedBox.\r\n   */\n  PDFPage.prototype.setBleedBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var bleedBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.BleedBox, bleedBox);\n  };\n  /**\r\n   * Set the TrimBox of this page. For example:\r\n   * ```js\r\n   * const trimBox = page.getTrimBox()\r\n   *\r\n   * page.setTrimBox(0, 0, 250, 500)\r\n   * page.setTrimBox(trimBox.x, trimBox.y, 50, 100)\r\n   * page.setTrimBox(15, 5, trimBox.width - 50, trimBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getTrimBox]] for details about what the TrimBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new TrimBox.\r\n   * @param y The y coordinate of the lower left corner of the new TrimBox.\r\n   * @param width The width of the new TrimBox.\r\n   * @param height The height of the new TrimBox.\r\n   */\n  PDFPage.prototype.setTrimBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var trimBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.TrimBox, trimBox);\n  };\n  /**\r\n   * Set the ArtBox of this page. For example:\r\n   * ```js\r\n   * const artBox = page.getArtBox()\r\n   *\r\n   * page.setArtBox(0, 0, 250, 500)\r\n   * page.setArtBox(artBox.x, artBox.y, 50, 100)\r\n   * page.setArtBox(15, 5, artBox.width - 50, artBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getArtBox]] for details about what the ArtBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new ArtBox.\r\n   * @param y The y coordinate of the lower left corner of the new ArtBox.\r\n   * @param width The width of the new ArtBox.\r\n   * @param height The height of the new ArtBox.\r\n   */\n  PDFPage.prototype.setArtBox = function (x, y, width, height) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var artBox = this.doc.context.obj([x, y, x + width, y + height]);\n    this.node.set(PDFName.ArtBox, artBox);\n  };\n  /**\r\n   * Get this page's width and height. For example:\r\n   * ```js\r\n   * const { width, height } = page.getSize()\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.getMediaBox]] to obtain the page's\r\n   * width and height.\r\n   *\r\n   * @returns The width and height of the page.\r\n   */\n  PDFPage.prototype.getSize = function () {\n    var _a = this.getMediaBox(),\n      width = _a.width,\n      height = _a.height;\n    return {\n      width: width,\n      height: height\n    };\n  };\n  /**\r\n   * Get this page's width. For example:\r\n   * ```js\r\n   * const width = page.getWidth()\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\r\n   *\r\n   * @returns The width of the page.\r\n   */\n  PDFPage.prototype.getWidth = function () {\n    return this.getSize().width;\n  };\n  /**\r\n   * Get this page's height. For example:\r\n   * ```js\r\n   * const height = page.getHeight()\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\r\n   *\r\n   * @returns The height of the page.\r\n   */\n  PDFPage.prototype.getHeight = function () {\n    return this.getSize().height;\n  };\n  /**\r\n   * Get the rectangle defining this page's MediaBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getMediaBox()\r\n   * ```\r\n   *\r\n   * The MediaBox of a page defines the boundaries of the physical medium on\r\n   * which the page is to be displayed/printed. It may include extended area\r\n   * surrounding the page content for bleed marks, printing marks, etc...\r\n   * It may also include areas close to the edges of the medium that cannot be\r\n   * marked because of physical limitations of the output device. Content\r\n   * falling outside this boundary may safely be discarded without affecting\r\n   * the meaning of the PDF file.\r\n   *\r\n   * @returns An object defining the lower left corner of the MediaBox and its\r\n   *          width & height.\r\n   */\n  PDFPage.prototype.getMediaBox = function () {\n    var mediaBox = this.node.MediaBox();\n    return mediaBox.asRectangle();\n  };\n  /**\r\n   * Get the rectangle defining this page's CropBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getCropBox()\r\n   * ```\r\n   *\r\n   * The CropBox of a page defines the region to which the contents of the page\r\n   * shall be clipped when displayed or printed. Unlike the other boxes, the\r\n   * CropBox does not necessarily represent the physical page geometry. It\r\n   * merely imposes clipping on the page contents.\r\n   *\r\n   * The CropBox's default value is the page's MediaBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the CropBox and its\r\n   *          width & height.\r\n   */\n  PDFPage.prototype.getCropBox = function () {\n    var _a;\n    var cropBox = this.node.CropBox();\n    return (_a = cropBox === null || cropBox === void 0 ? void 0 : cropBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getMediaBox();\n  };\n  /**\r\n   * Get the rectangle defining this page's BleedBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getBleedBox()\r\n   * ```\r\n   *\r\n   * The BleedBox of a page defines the region to which the contents of the\r\n   * page shall be clipped when output in a production environment. This may\r\n   * include any extra bleed area needed to accommodate the physical\r\n   * limitations of cutting, folding, and trimming equipment. The actual\r\n   * printed page may include printing marks that fall outside the BleedBox.\r\n   *\r\n   * The BleedBox's default value is the page's CropBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the BleedBox and its\r\n   *          width & height.\r\n   */\n  PDFPage.prototype.getBleedBox = function () {\n    var _a;\n    var bleedBox = this.node.BleedBox();\n    return (_a = bleedBox === null || bleedBox === void 0 ? void 0 : bleedBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\r\n   * Get the rectangle defining this page's TrimBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getTrimBox()\r\n   * ```\r\n   *\r\n   * The TrimBox of a page defines the intended dimensions of the finished\r\n   * page after trimming. It may be smaller than the MediaBox to allow for\r\n   * production-related content, such as printing instructions, cut marks, or\r\n   * color bars.\r\n   *\r\n   * The TrimBox's default value is the page's CropBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the TrimBox and its\r\n   *          width & height.\r\n   */\n  PDFPage.prototype.getTrimBox = function () {\n    var _a;\n    var trimBox = this.node.TrimBox();\n    return (_a = trimBox === null || trimBox === void 0 ? void 0 : trimBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\r\n   * Get the rectangle defining this page's ArtBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getArtBox()\r\n   * ```\r\n   *\r\n   * The ArtBox of a page defines the extent of the page's meaningful content\r\n   * (including potential white space).\r\n   *\r\n   * The ArtBox's default value is the page's CropBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the ArtBox and its\r\n   *          width & height.\r\n   */\n  PDFPage.prototype.getArtBox = function () {\n    var _a;\n    var artBox = this.node.ArtBox();\n    return (_a = artBox === null || artBox === void 0 ? void 0 : artBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n  };\n  /**\r\n   * Translate this page's content to a new location on the page. This operation\r\n   * is often useful after resizing the page with [[setSize]]. For example:\r\n   * ```js\r\n   * // Add 50 units of whitespace to the top and right of the page\r\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 50)\r\n   *\r\n   * // Move the page's content from the lower-left corner of the page\r\n   * // to the top-right corner.\r\n   * page.translateContent(50, 50)\r\n   *\r\n   * // Now there are 50 units of whitespace to the left and bottom of the page\r\n   * ```\r\n   * See also: [[resetPosition]]\r\n   * @param x The new position on the x-axis for this page's content.\r\n   * @param y The new position on the y-axis for this page's content.\r\n   */\n  PDFPage.prototype.translateContent = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.node.normalize();\n    this.getContentStream();\n    var start = this.createContentStream(pushGraphicsState(), translate(x, y));\n    var startRef = this.doc.context.register(start);\n    var end = this.createContentStream(popGraphicsState());\n    var endRef = this.doc.context.register(end);\n    this.node.wrapContentStreams(startRef, endRef);\n  };\n  /**\r\n   * Scale the size, content, and annotations of a page.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * page.scale(0.5, 0.5);\r\n   * ```\r\n   *\r\n   * @param x The factor by which the width for the page should be scaled\r\n   *          (e.g. `0.5` is 50%).\r\n   * @param y The factor by which the height for the page should be scaled\r\n   *          (e.g. `2.0` is 200%).\r\n   */\n  PDFPage.prototype.scale = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.setSize(this.getWidth() * x, this.getHeight() * y);\n    this.scaleContent(x, y);\n    this.scaleAnnotations(x, y);\n  };\n  /**\r\n   * Scale the content of a page. This is useful after resizing an existing\r\n   * page. This scales only the content, not the annotations.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * // Bisect the size of the page\r\n   * page.setSize(page.getWidth() / 2, page.getHeight() / 2);\r\n   *\r\n   * // Scale the content of the page down by 50% in x and y\r\n   * page.scaleContent(0.5, 0.5);\r\n   * ```\r\n   * See also: [[scaleAnnotations]]\r\n   * @param x The factor by which the x-axis for the content should be scaled\r\n   *          (e.g. `0.5` is 50%).\r\n   * @param y The factor by which the y-axis for the content should be scaled\r\n   *          (e.g. `2.0` is 200%).\r\n   */\n  PDFPage.prototype.scaleContent = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.node.normalize();\n    this.getContentStream();\n    var start = this.createContentStream(pushGraphicsState(), scale(x, y));\n    var startRef = this.doc.context.register(start);\n    var end = this.createContentStream(popGraphicsState());\n    var endRef = this.doc.context.register(end);\n    this.node.wrapContentStreams(startRef, endRef);\n  };\n  /**\r\n   * Scale the annotations of a page. This is useful if you want to scale a\r\n   * page with comments or other annotations.\r\n   * ```js\r\n   * // Scale the content of the page down by 50% in x and y\r\n   * page.scaleContent(0.5, 0.5);\r\n   *\r\n   * // Scale the content of the page down by 50% in x and y\r\n   * page.scaleAnnotations(0.5, 0.5);\r\n   * ```\r\n   * See also: [[scaleContent]]\r\n   * @param x The factor by which the x-axis for the annotations should be\r\n   *          scaled (e.g. `0.5` is 50%).\r\n   * @param y The factor by which the y-axis for the annotations should be\r\n   *          scaled (e.g. `2.0` is 200%).\r\n   */\n  PDFPage.prototype.scaleAnnotations = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    var annots = this.node.Annots();\n    if (!annots) return;\n    for (var idx = 0; idx < annots.size(); idx++) {\n      var annot = annots.lookup(idx);\n      if (annot instanceof PDFDict) this.scaleAnnot(annot, x, y);\n    }\n  };\n  /**\r\n   * Reset the x and y coordinates of this page to `(0, 0)`. This operation is\r\n   * often useful after calling [[translateContent]]. For example:\r\n   * ```js\r\n   * // Shift the page's contents up and to the right by 50 units\r\n   * page.translateContent(50, 50)\r\n   *\r\n   * // This text will shifted - it will be drawn at (50, 50)\r\n   * page.drawText('I am shifted')\r\n   *\r\n   * // Move back to (0, 0)\r\n   * page.resetPosition()\r\n   *\r\n   * // This text will not be shifted - it will be drawn at (0, 0)\r\n   * page.drawText('I am not shifted')\r\n   * ```\r\n   */\n  PDFPage.prototype.resetPosition = function () {\n    this.getContentStream(false);\n    this.x = 0;\n    this.y = 0;\n  };\n  /**\r\n   * Choose a default font for this page. The default font will be used whenever\r\n   * text is drawn on this page and no font is specified. For example:\r\n   * ```js\r\n   * import { StandardFonts } from 'pdf-lib'\r\n   *\r\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\r\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\r\n   *\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * page.setFont(helveticaFont)\r\n   * page.drawText('I will be drawn in Helvetica')\r\n   *\r\n   * page.setFont(timesRomanFont)\r\n   * page.drawText('I will be drawn in Courier', { font: courierFont })\r\n   * ```\r\n   * @param font The default font to be used when drawing text on this page.\r\n   */\n  PDFPage.prototype.setFont = function (font) {\n    // TODO: Reuse image Font name if we've already added this image to Resources.Fonts\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.font = font;\n    this.fontKey = this.node.newFontDictionary(this.font.name, this.font.ref);\n  };\n  /**\r\n   * Choose a default font size for this page. The default font size will be\r\n   * used whenever text is drawn on this page and no font size is specified.\r\n   * For example:\r\n   * ```js\r\n   * page.setFontSize(12)\r\n   * page.drawText('I will be drawn in size 12')\r\n   *\r\n   * page.setFontSize(36)\r\n   * page.drawText('I will be drawn in size 24', { fontSize: 24 })\r\n   * ```\r\n   * @param fontSize The default font size to be used when drawing text on this\r\n   *                 page.\r\n   */\n  PDFPage.prototype.setFontSize = function (fontSize) {\n    assertIs(fontSize, 'fontSize', ['number']);\n    this.fontSize = fontSize;\n  };\n  /**\r\n   * Choose a default font color for this page. The default font color will be\r\n   * used whenever text is drawn on this page and no font color is specified.\r\n   * For example:\r\n   * ```js\r\n   * import { rgb, cmyk, grayscale } from 'pdf-lib'\r\n   *\r\n   * page.setFontColor(rgb(0.97, 0.02, 0.97))\r\n   * page.drawText('I will be drawn in pink')\r\n   *\r\n   * page.setFontColor(cmyk(0.4, 0.7, 0.39, 0.15))\r\n   * page.drawText('I will be drawn in gray', { color: grayscale(0.5) })\r\n   * ```\r\n   * @param fontColor The default font color to be used when drawing text on\r\n   *                  this page.\r\n   */\n  PDFPage.prototype.setFontColor = function (fontColor) {\n    assertIs(fontColor, 'fontColor', [[Object, 'Color']]);\n    this.fontColor = fontColor;\n  };\n  /**\r\n   * Choose a default line height for this page. The default line height will be\r\n   * used whenever text is drawn on this page and no line height is specified.\r\n   * For example:\r\n   * ```js\r\n   * page.setLineHeight(12);\r\n   * page.drawText('These lines will be vertically \\n separated by 12 units')\r\n   *\r\n   * page.setLineHeight(36);\r\n   * page.drawText('These lines will be vertically \\n separated by 24 units', {\r\n   *   lineHeight: 24\r\n   * })\r\n   * ```\r\n   * @param lineHeight The default line height to be used when drawing text on\r\n   *                   this page.\r\n   */\n  PDFPage.prototype.setLineHeight = function (lineHeight) {\n    assertIs(lineHeight, 'lineHeight', ['number']);\n    this.lineHeight = lineHeight;\n  };\n  /**\r\n   * Get the default position of this page. For example:\r\n   * ```js\r\n   * const { x, y } = page.getPosition()\r\n   * ```\r\n   * @returns The default position of the page.\r\n   */\n  PDFPage.prototype.getPosition = function () {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  };\n  /**\r\n   * Get the default x coordinate of this page. For example:\r\n   * ```js\r\n   * const x = page.getX()\r\n   * ```\r\n   * @returns The default x coordinate of the page.\r\n   */\n  PDFPage.prototype.getX = function () {\n    return this.x;\n  };\n  /**\r\n   * Get the default y coordinate of this page. For example:\r\n   * ```js\r\n   * const y = page.getY()\r\n   * ```\r\n   * @returns The default y coordinate of the page.\r\n   */\n  PDFPage.prototype.getY = function () {\n    return this.y;\n  };\n  /**\r\n   * Change the default position of this page. For example:\r\n   * ```js\r\n   * page.moveTo(0, 0)\r\n   * page.drawText('I will be drawn at the origin')\r\n   *\r\n   * page.moveTo(0, 25)\r\n   * page.drawText('I will be drawn 25 units up')\r\n   *\r\n   * page.moveTo(25, 25)\r\n   * page.drawText('I will be drawn 25 units up and 25 units to the right')\r\n   * ```\r\n   * @param x The new default position on the x-axis for this page.\r\n   * @param y The new default position on the y-axis for this page.\r\n   */\n  PDFPage.prototype.moveTo = function (x, y) {\n    assertIs(x, 'x', ['number']);\n    assertIs(y, 'y', ['number']);\n    this.x = x;\n    this.y = y;\n  };\n  /**\r\n   * Change the default position of this page to be further down the y-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveDown(10)\r\n   * page.drawText('I will be drawn at (50, 40)')\r\n   * ```\r\n   * @param yDecrease The amount by which the page's default position along the\r\n   *                  y-axis should be decreased.\r\n   */\n  PDFPage.prototype.moveDown = function (yDecrease) {\n    assertIs(yDecrease, 'yDecrease', ['number']);\n    this.y -= yDecrease;\n  };\n  /**\r\n   * Change the default position of this page to be further up the y-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveUp(10)\r\n   * page.drawText('I will be drawn at (50, 60)')\r\n   * ```\r\n   * @param yIncrease The amount by which the page's default position along the\r\n   *                  y-axis should be increased.\r\n   */\n  PDFPage.prototype.moveUp = function (yIncrease) {\n    assertIs(yIncrease, 'yIncrease', ['number']);\n    this.y += yIncrease;\n  };\n  /**\r\n   * Change the default position of this page to be further left on the x-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveLeft(10)\r\n   * page.drawText('I will be drawn at (40, 50)')\r\n   * ```\r\n   * @param xDecrease The amount by which the page's default position along the\r\n   *                  x-axis should be decreased.\r\n   */\n  PDFPage.prototype.moveLeft = function (xDecrease) {\n    assertIs(xDecrease, 'xDecrease', ['number']);\n    this.x -= xDecrease;\n  };\n  /**\r\n   * Change the default position of this page to be further right on the y-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveRight(10)\r\n   * page.drawText('I will be drawn at (60, 50)')\r\n   * ```\r\n   * @param xIncrease The amount by which the page's default position along the\r\n   *                  x-axis should be increased.\r\n   */\n  PDFPage.prototype.moveRight = function (xIncrease) {\n    assertIs(xIncrease, 'xIncrease', ['number']);\n    this.x += xIncrease;\n  };\n  /**\r\n   * Push one or more operators to the end of this page's current content\r\n   * stream. For example:\r\n   * ```js\r\n   * import {\r\n   *   pushGraphicsState,\r\n   *   moveTo,\r\n   *   lineTo,\r\n   *   closePath,\r\n   *   setFillingColor,\r\n   *   rgb,\r\n   *   fill,\r\n   *   popGraphicsState,\r\n   * } from 'pdf-lib'\r\n   *\r\n   * // Draw a green triangle in the lower-left corner of the page\r\n   * page.pushOperators(\r\n   *   pushGraphicsState(),\r\n   *   moveTo(0, 0),\r\n   *   lineTo(100, 0),\r\n   *   lineTo(50, 100),\r\n   *   closePath(),\r\n   *   setFillingColor(rgb(0.0, 1.0, 0.0)),\r\n   *   fill(),\r\n   *   popGraphicsState(),\r\n   * )\r\n   * ```\r\n   * @param operator The operators to be pushed.\r\n   */\n  PDFPage.prototype.pushOperators = function () {\n    var operator = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operator[_i] = arguments[_i];\n    }\n    assertEachIs(operator, 'operator', [[PDFOperator, 'PDFOperator']]);\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, operator);\n  };\n  /**\r\n   * Draw one or more lines of text on this page. For example:\r\n   * ```js\r\n   * import { StandardFonts, rgb } from 'pdf-lib'\r\n   *\r\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\r\n   *\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * page.setFont(helveticaFont)\r\n   *\r\n   * page.moveTo(5, 200)\r\n   * page.drawText('The Life of an Egg', { size: 36 })\r\n   *\r\n   * page.moveDown(36)\r\n   * page.drawText('An Epic Tale of Woe', { size: 30 })\r\n   *\r\n   * page.drawText(\r\n   *   `Humpty Dumpty sat on a wall \\n` +\r\n   *   `Humpty Dumpty had a great fall; \\n` +\r\n   *   `All the king's horses and all the king's men \\n` +\r\n   *   `Couldn't put Humpty together again. \\n`,\r\n   *   {\r\n   *     x: 25,\r\n   *     y: 100,\r\n   *     font: timesRomanFont,\r\n   *     size: 24,\r\n   *     color: rgb(1, 0, 0),\r\n   *     lineHeight: 24,\r\n   *     opacity: 0.75,\r\n   *   },\r\n   * )\r\n   * ```\r\n   * @param text The text to be drawn.\r\n   * @param options The options to be used when drawing the text.\r\n   */\n  PDFPage.prototype.drawText = function (text, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (options === void 0) {\n      options = {};\n    }\n    assertIs(text, 'text', ['string']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.font, 'options.font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(options.size, 'options.size', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.lineHeight, 'options.lineHeight', ['number']);\n    assertOrUndefined(options.maxWidth, 'options.maxWidth', ['number']);\n    assertOrUndefined(options.wordBreaks, 'options.wordBreaks', [Array]);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var _h = this.setOrEmbedFont(options.font),\n      oldFont = _h.oldFont,\n      newFont = _h.newFont,\n      newFontKey = _h.newFontKey;\n    var fontSize = options.size || this.fontSize;\n    var wordBreaks = options.wordBreaks || this.doc.defaultWordBreaks;\n    var textWidth = function (t) {\n      return newFont.widthOfTextAtSize(t, fontSize);\n    };\n    var lines = options.maxWidth === undefined ? lineSplit(cleanText(text)) : breakTextIntoLines(text, wordBreaks, options.maxWidth, textWidth);\n    var encodedLines = new Array(lines.length);\n    for (var idx = 0, len = lines.length; idx < len; idx++) {\n      encodedLines[idx] = newFont.encodeText(lines[idx]);\n    }\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawLinesOfText(encodedLines, {\n      color: (_a = options.color) !== null && _a !== void 0 ? _a : this.fontColor,\n      font: newFontKey,\n      size: fontSize,\n      rotate: (_b = options.rotate) !== null && _b !== void 0 ? _b : degrees(0),\n      xSkew: (_c = options.xSkew) !== null && _c !== void 0 ? _c : degrees(0),\n      ySkew: (_d = options.ySkew) !== null && _d !== void 0 ? _d : degrees(0),\n      x: (_e = options.x) !== null && _e !== void 0 ? _e : this.x,\n      y: (_f = options.y) !== null && _f !== void 0 ? _f : this.y,\n      lineHeight: (_g = options.lineHeight) !== null && _g !== void 0 ? _g : this.lineHeight,\n      graphicsState: graphicsStateKey\n    }));\n    if (options.font) {\n      if (oldFont) this.setFont(oldFont);else this.resetFont();\n    }\n  };\n  /**\r\n   * Draw an image on this page. For example:\r\n   * ```js\r\n   * import { degrees } from 'pdf-lib'\r\n   *\r\n   * const jpgUrl = 'https://pdf-lib.js.org/assets/cat_riding_unicorn.jpg'\r\n   * const jpgImageBytes = await fetch(jpgUrl).then((res) => res.arrayBuffer())\r\n   *\r\n   * const jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\r\n   * const jpgDims = jpgImage.scale(0.5)\r\n   *\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * page.drawImage(jpgImage, {\r\n   *   x: 25,\r\n   *   y: 25,\r\n   *   width: jpgDims.width,\r\n   *   height: jpgDims.height,\r\n   *   rotate: degrees(30),\r\n   *   opacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param image The image to be drawn.\r\n   * @param options The options to be used when drawing the image.\r\n   */\n  PDFPage.prototype.drawImage = function (image, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (options === void 0) {\n      options = {};\n    }\n    // TODO: Reuse image XObject name if we've already added this image to Resources.XObjects\n    assertIs(image, 'image', [[PDFImage, 'PDFImage']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var xObjectKey = this.node.newXObject('Image', image.ref);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawImage(xObjectKey, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : image.size().width,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : image.size().height,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n      xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n      ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\r\n   * Draw an embedded PDF page on this page. For example:\r\n   * ```js\r\n   * import { degrees } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const sourcePdfUrl = 'https://pdf-lib.js.org/assets/with_large_page_count.pdf'\r\n   * const sourcePdf = await fetch(sourcePdfUrl).then((res) => res.arrayBuffer())\r\n   *\r\n   * // Embed page 74 from the PDF\r\n   * const [embeddedPage] = await pdfDoc.embedPdf(sourcePdf, 73)\r\n   *\r\n   * page.drawPage(embeddedPage, {\r\n   *   x: 250,\r\n   *   y: 200,\r\n   *   xScale: 0.5,\r\n   *   yScale: 0.5,\r\n   *   rotate: degrees(30),\r\n   *   opacity: 0.75,\r\n   * })\r\n   * ```\r\n   *\r\n   * The `options` argument accepts both `width`/`height` and `xScale`/`yScale`\r\n   * as options. Since each of these options defines the size of the drawn page,\r\n   * if both options are given, `width` and `height` take precedence and the\r\n   * corresponding scale variants are ignored.\r\n   *\r\n   * @param embeddedPage The embedded page to be drawn.\r\n   * @param options The options to be used when drawing the embedded page.\r\n   */\n  PDFPage.prototype.drawPage = function (embeddedPage, options) {\n    var _a, _b, _c, _d, _e;\n    if (options === void 0) {\n      options = {};\n    }\n    // TODO: Reuse embeddedPage XObject name if we've already added this embeddedPage to Resources.XObjects\n    assertIs(embeddedPage, 'embeddedPage', [[PDFEmbeddedPage, 'PDFEmbeddedPage']]);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var xObjectKey = this.node.newXObject('EmbeddedPdfPage', embeddedPage.ref);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    // prettier-ignore\n    var xScale = options.width !== undefined ? options.width / embeddedPage.width : options.xScale !== undefined ? options.xScale : 1;\n    // prettier-ignore\n    var yScale = options.height !== undefined ? options.height / embeddedPage.height : options.yScale !== undefined ? options.yScale : 1;\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawPage(xObjectKey, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      xScale: xScale,\n      yScale: yScale,\n      rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n      xSkew: (_d = options.xSkew) !== null && _d !== void 0 ? _d : degrees(0),\n      ySkew: (_e = options.ySkew) !== null && _e !== void 0 ? _e : degrees(0),\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\r\n   * Draw an SVG path on this page. For example:\r\n   * ```js\r\n   * import { rgb } from 'pdf-lib'\r\n   *\r\n   * const svgPath = 'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\r\n   *\r\n   * // Draw path as black line\r\n   * page.drawSvgPath(svgPath, { x: 25, y: 75 })\r\n   *\r\n   * // Change border style and opacity\r\n   * page.drawSvgPath(svgPath, {\r\n   *   x: 25,\r\n   *   y: 275,\r\n   *   borderColor: rgb(0.5, 0.5, 0.5),\r\n   *   borderWidth: 2,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   *\r\n   * // Set fill color and opacity\r\n   * page.drawSvgPath(svgPath, {\r\n   *   x: 25,\r\n   *   y: 475,\r\n   *   color: rgb(1.0, 0, 0),\r\n   *   opacity: 0.75,\r\n   * })\r\n   *\r\n   * // Draw 50% of original size\r\n   * page.drawSvgPath(svgPath, {\r\n   *   x: 25,\r\n   *   y: 675,\r\n   *   scale: 0.5,\r\n   * })\r\n   * ```\r\n   * @param path The SVG path to be drawn.\r\n   * @param options The options to be used when drawing the SVG path.\r\n   */\n  PDFPage.prototype.drawSvgPath = function (path, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    if (options === void 0) {\n      options = {};\n    }\n    assertIs(path, 'path', ['string']);\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.scale, 'options.scale', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.borderColor = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawSvgPath(path, {\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      scale: options.scale,\n      rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n      color: (_d = options.color) !== null && _d !== void 0 ? _d : undefined,\n      borderColor: (_e = options.borderColor) !== null && _e !== void 0 ? _e : undefined,\n      borderWidth: (_f = options.borderWidth) !== null && _f !== void 0 ? _f : 0,\n      borderDashArray: (_g = options.borderDashArray) !== null && _g !== void 0 ? _g : undefined,\n      borderDashPhase: (_h = options.borderDashPhase) !== null && _h !== void 0 ? _h : undefined,\n      borderLineCap: (_j = options.borderLineCap) !== null && _j !== void 0 ? _j : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\r\n   * Draw a line on this page. For example:\r\n   * ```js\r\n   * import { rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawLine({\r\n   *   start: { x: 25, y: 75 },\r\n   *   end: { x: 125, y: 175 },\r\n   *   thickness: 2,\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the line.\r\n   */\n  PDFPage.prototype.drawLine = function (options) {\n    var _a, _b, _c, _d, _e;\n    assertIs(options.start, 'options.start', [[Object, '{ x: number, y: number }']]);\n    assertIs(options.end, 'options.end', [[Object, '{ x: number, y: number }']]);\n    assertIs(options.start.x, 'options.start.x', ['number']);\n    assertIs(options.start.y, 'options.start.y', ['number']);\n    assertIs(options.end.x, 'options.end.x', ['number']);\n    assertIs(options.end.y, 'options.end.y', ['number']);\n    assertOrUndefined(options.thickness, 'options.thickness', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertOrUndefined(options.dashArray, 'options.dashArray', [Array]);\n    assertOrUndefined(options.dashPhase, 'options.dashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.lineCap, 'options.lineCap', LineCapStyle);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      borderOpacity: options.opacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawLine({\n      start: options.start,\n      end: options.end,\n      thickness: (_a = options.thickness) !== null && _a !== void 0 ? _a : 1,\n      color: (_b = options.color) !== null && _b !== void 0 ? _b : undefined,\n      dashArray: (_c = options.dashArray) !== null && _c !== void 0 ? _c : undefined,\n      dashPhase: (_d = options.dashPhase) !== null && _d !== void 0 ? _d : undefined,\n      lineCap: (_e = options.lineCap) !== null && _e !== void 0 ? _e : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\r\n   * Draw a rectangle on this page. For example:\r\n   * ```js\r\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawRectangle({\r\n   *   x: 25,\r\n   *   y: 75,\r\n   *   width: 250,\r\n   *   height: 75,\r\n   *   rotate: degrees(-15),\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the rectangle.\r\n   */\n  PDFPage.prototype.drawRectangle = function (options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    if (options === void 0) {\n      options = {};\n    }\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.width, 'options.width', ['number']);\n    assertOrUndefined(options.height, 'options.height', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawRectangle({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 150,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n      xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n      ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n      borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n      color: (_j = options.color) !== null && _j !== void 0 ? _j : undefined,\n      borderColor: (_k = options.borderColor) !== null && _k !== void 0 ? _k : undefined,\n      borderDashArray: (_l = options.borderDashArray) !== null && _l !== void 0 ? _l : undefined,\n      borderDashPhase: (_m = options.borderDashPhase) !== null && _m !== void 0 ? _m : undefined,\n      graphicsState: graphicsStateKey,\n      borderLineCap: (_o = options.borderLineCap) !== null && _o !== void 0 ? _o : undefined\n    }));\n  };\n  /**\r\n   * Draw a square on this page. For example:\r\n   * ```js\r\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawSquare({\r\n   *   x: 25,\r\n   *   y: 75,\r\n   *   size: 100,\r\n   *   rotate: degrees(-15),\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the square.\r\n   */\n  PDFPage.prototype.drawSquare = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var size = options.size;\n    assertOrUndefined(size, 'size', ['number']);\n    this.drawRectangle(__assign(__assign({}, options), {\n      width: size,\n      height: size\n    }));\n  };\n  /**\r\n   * Draw an ellipse on this page. For example:\r\n   * ```js\r\n   * import { grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawEllipse({\r\n   *   x: 200,\r\n   *   y: 75,\r\n   *   xScale: 100,\r\n   *   yScale: 50,\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the ellipse.\r\n   */\n  PDFPage.prototype.drawEllipse = function (options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    if (options === void 0) {\n      options = {};\n    }\n    assertOrUndefined(options.x, 'options.x', ['number']);\n    assertOrUndefined(options.y, 'options.y', ['number']);\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n    assertOrUndefined(options.borderColor, 'options.borderColor', [[Object, 'Color']]);\n    assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [Array]);\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', ['number']);\n    assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', LineCapStyle);\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\n    var graphicsStateKey = this.maybeEmbedGraphicsState({\n      opacity: options.opacity,\n      borderOpacity: options.borderOpacity,\n      blendMode: options.blendMode\n    });\n    if (!('color' in options) && !('borderColor' in options)) {\n      options.color = rgb(0, 0, 0);\n    }\n    var contentStream = this.getContentStream();\n    contentStream.push.apply(contentStream, drawEllipse({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n      xScale: (_c = options.xScale) !== null && _c !== void 0 ? _c : 100,\n      yScale: (_d = options.yScale) !== null && _d !== void 0 ? _d : 100,\n      rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : undefined,\n      color: (_f = options.color) !== null && _f !== void 0 ? _f : undefined,\n      borderColor: (_g = options.borderColor) !== null && _g !== void 0 ? _g : undefined,\n      borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n      borderDashArray: (_j = options.borderDashArray) !== null && _j !== void 0 ? _j : undefined,\n      borderDashPhase: (_k = options.borderDashPhase) !== null && _k !== void 0 ? _k : undefined,\n      borderLineCap: (_l = options.borderLineCap) !== null && _l !== void 0 ? _l : undefined,\n      graphicsState: graphicsStateKey\n    }));\n  };\n  /**\r\n   * Draw a circle on this page. For example:\r\n   * ```js\r\n   * import { grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawCircle({\r\n   *   x: 200,\r\n   *   y: 150,\r\n   *   size: 100,\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the ellipse.\r\n   */\n  PDFPage.prototype.drawCircle = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.size,\n      size = _a === void 0 ? 100 : _a;\n    assertOrUndefined(size, 'size', ['number']);\n    this.drawEllipse(__assign(__assign({}, options), {\n      xScale: size,\n      yScale: size\n    }));\n  };\n  PDFPage.prototype.setOrEmbedFont = function (font) {\n    var oldFont = this.font;\n    var oldFontKey = this.fontKey;\n    if (font) this.setFont(font);else this.getFont();\n    var newFont = this.font;\n    var newFontKey = this.fontKey;\n    return {\n      oldFont: oldFont,\n      oldFontKey: oldFontKey,\n      newFont: newFont,\n      newFontKey: newFontKey\n    };\n  };\n  PDFPage.prototype.getFont = function () {\n    if (!this.font || !this.fontKey) {\n      var font = this.doc.embedStandardFont(StandardFonts.Helvetica);\n      this.setFont(font);\n    }\n    return [this.font, this.fontKey];\n  };\n  PDFPage.prototype.resetFont = function () {\n    this.font = undefined;\n    this.fontKey = undefined;\n  };\n  PDFPage.prototype.getContentStream = function (useExisting) {\n    if (useExisting === void 0) {\n      useExisting = true;\n    }\n    if (useExisting && this.contentStream) return this.contentStream;\n    this.contentStream = this.createContentStream();\n    this.contentStreamRef = this.doc.context.register(this.contentStream);\n    this.node.addContentStream(this.contentStreamRef);\n    return this.contentStream;\n  };\n  PDFPage.prototype.createContentStream = function () {\n    var operators = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operators[_i] = arguments[_i];\n    }\n    var dict = this.doc.context.obj({});\n    var contentStream = PDFContentStream.of(dict, operators);\n    return contentStream;\n  };\n  PDFPage.prototype.maybeEmbedGraphicsState = function (options) {\n    var opacity = options.opacity,\n      borderOpacity = options.borderOpacity,\n      blendMode = options.blendMode;\n    if (opacity === undefined && borderOpacity === undefined && blendMode === undefined) {\n      return undefined;\n    }\n    var graphicsState = this.doc.context.obj({\n      Type: 'ExtGState',\n      ca: opacity,\n      CA: borderOpacity,\n      BM: blendMode\n    });\n    var key = this.node.newExtGState('GS', graphicsState);\n    return key;\n  };\n  PDFPage.prototype.scaleAnnot = function (annot, x, y) {\n    var selectors = ['RD', 'CL', 'Vertices', 'QuadPoints', 'L', 'Rect'];\n    for (var idx = 0, len = selectors.length; idx < len; idx++) {\n      var list = annot.lookup(PDFName.of(selectors[idx]));\n      if (list instanceof PDFArray) list.scalePDFNumbers(x, y);\n    }\n    var inkLists = annot.lookup(PDFName.of('InkList'));\n    if (inkLists instanceof PDFArray) {\n      for (var idx = 0, len = inkLists.size(); idx < len; idx++) {\n        var arr = inkLists.lookup(idx);\n        if (arr instanceof PDFArray) arr.scalePDFNumbers(x, y);\n      }\n    }\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\r\n   * > methods, which can create instances of [[PDFPage]] for you.\r\n   *\r\n   * Create an instance of [[PDFPage]] from an existing leaf node.\r\n   *\r\n   * @param leafNode The leaf node to be wrapped.\r\n   * @param ref The unique reference for the page.\r\n   * @param doc The document to which the page will belong.\r\n   */\n  PDFPage.of = function (leafNode, ref, doc) {\n    return new PDFPage(leafNode, ref, doc);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\r\n   * > methods, which can create instances of [[PDFPage]] for you.\r\n   *\r\n   * Create an instance of [[PDFPage]].\r\n   *\r\n   * @param doc The document to which the page will belong.\r\n   */\n  PDFPage.create = function (doc) {\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    var dummyRef = PDFRef.of(-1);\n    var pageLeaf = PDFPageLeaf.withContextAndParent(doc.context, dummyRef);\n    var pageRef = doc.context.register(pageLeaf);\n    return new PDFPage(pageLeaf, pageRef, doc);\n  };\n  return PDFPage;\n}();\nexport default PDFPage;","map":{"version":3,"names":["rgb","drawImage","drawLine","drawLinesOfText","drawPage","drawRectangle","drawSvgPath","drawEllipse","popGraphicsState","pushGraphicsState","translate","LineCapStyle","scale","PDFDocument","PDFEmbeddedPage","PDFFont","PDFImage","BlendMode","degrees","toDegrees","StandardFonts","PDFContentStream","PDFName","PDFOperator","PDFPageLeaf","PDFRef","PDFDict","PDFArray","assertEachIs","assertIs","assertMultiple","assertOrUndefined","breakTextIntoLines","cleanText","rectanglesAreEqual","lineSplit","assertRangeOrUndefined","assertIsOneOfOrUndefined","PDFPage","leafNode","ref","doc","fontSize","fontColor","lineHeight","x","y","node","prototype","setRotation","angle","degreesAngle","set","of","context","obj","getRotation","Rotate","asNumber","setSize","width","height","mediaBox","getMediaBox","setMediaBox","cropBox","getCropBox","bleedBox","getBleedBox","trimBox","getTrimBox","artBox","getArtBox","hasCropBox","CropBox","hasBleedBox","BleedBox","hasTrimBox","TrimBox","hasArtBox","ArtBox","setCropBox","setBleedBox","setTrimBox","setArtBox","setWidth","getSize","setHeight","MediaBox","_a","getWidth","getHeight","asRectangle","translateContent","normalize","getContentStream","start","createContentStream","startRef","register","end","endRef","wrapContentStreams","scaleContent","scaleAnnotations","annots","Annots","idx","size","annot","lookup","scaleAnnot","resetPosition","setFont","font","fontKey","newFontDictionary","name","setFontSize","setFontColor","Object","setLineHeight","getPosition","getX","getY","moveTo","moveDown","yDecrease","moveUp","yIncrease","moveLeft","xDecrease","moveRight","xIncrease","pushOperators","operator","_i","arguments","length","contentStream","push","apply","drawText","text","options","color","opacity","rotate","xSkew","ySkew","maxWidth","wordBreaks","Array","blendMode","_h","setOrEmbedFont","oldFont","newFont","newFontKey","defaultWordBreaks","textWidth","t","widthOfTextAtSize","lines","undefined","encodedLines","len","encodeText","graphicsStateKey","maybeEmbedGraphicsState","_b","_c","_d","_e","_f","_g","graphicsState","resetFont","image","xObjectKey","newXObject","embeddedPage","xScale","yScale","path","borderWidth","borderColor","borderDashArray","borderDashPhase","borderLineCap","borderOpacity","_j","thickness","dashArray","dashPhase","lineCap","_k","_l","_m","_o","drawSquare","__assign","drawCircle","oldFontKey","getFont","embedStandardFont","Helvetica","useExisting","contentStreamRef","addContentStream","operators","dict","Type","ca","CA","BM","key","newExtGState","selectors","list","scalePDFNumbers","inkLists","arr","create","dummyRef","pageLeaf","withContextAndParent","pageRef"],"sources":["C:\\Users\\Uzer\\Desktop\\works\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\api\\PDFPage.ts"],"sourcesContent":["import { Color, rgb } from 'src/api/colors';\r\nimport {\r\n  drawImage,\r\n  drawLine,\r\n  drawLinesOfText,\r\n  drawPage,\r\n  drawRectangle,\r\n  drawSvgPath,\r\n  drawEllipse,\r\n} from 'src/api/operations';\r\nimport {\r\n  popGraphicsState,\r\n  pushGraphicsState,\r\n  translate,\r\n  LineCapStyle,\r\n  scale,\r\n} from 'src/api/operators';\r\nimport PDFDocument from 'src/api/PDFDocument';\r\nimport PDFEmbeddedPage from 'src/api/PDFEmbeddedPage';\r\nimport PDFFont from 'src/api/PDFFont';\r\nimport PDFImage from 'src/api/PDFImage';\r\nimport {\r\n  PDFPageDrawCircleOptions,\r\n  PDFPageDrawEllipseOptions,\r\n  PDFPageDrawImageOptions,\r\n  PDFPageDrawLineOptions,\r\n  PDFPageDrawPageOptions,\r\n  PDFPageDrawRectangleOptions,\r\n  PDFPageDrawSquareOptions,\r\n  PDFPageDrawSVGOptions,\r\n  PDFPageDrawTextOptions,\r\n  BlendMode,\r\n} from 'src/api/PDFPageOptions';\r\nimport { degrees, Rotation, toDegrees } from 'src/api/rotations';\r\nimport { StandardFonts } from 'src/api/StandardFonts';\r\nimport {\r\n  PDFContentStream,\r\n  PDFHexString,\r\n  PDFName,\r\n  PDFOperator,\r\n  PDFPageLeaf,\r\n  PDFRef,\r\n  PDFDict,\r\n  PDFArray,\r\n} from 'src/core';\r\nimport {\r\n  assertEachIs,\r\n  assertIs,\r\n  assertMultiple,\r\n  assertOrUndefined,\r\n  breakTextIntoLines,\r\n  cleanText,\r\n  rectanglesAreEqual,\r\n  lineSplit,\r\n  assertRangeOrUndefined,\r\n  assertIsOneOfOrUndefined,\r\n} from 'src/utils';\r\n\r\n/**\r\n * Represents a single page of a [[PDFDocument]].\r\n */\r\nexport default class PDFPage {\r\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\r\n   * > methods, which can create instances of [[PDFPage]] for you.\r\n   *\r\n   * Create an instance of [[PDFPage]] from an existing leaf node.\r\n   *\r\n   * @param leafNode The leaf node to be wrapped.\r\n   * @param ref The unique reference for the page.\r\n   * @param doc The document to which the page will belong.\r\n   */\r\n  static of = (leafNode: PDFPageLeaf, ref: PDFRef, doc: PDFDocument) =>\r\n    new PDFPage(leafNode, ref, doc);\r\n\r\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\r\n   * > methods, which can create instances of [[PDFPage]] for you.\r\n   *\r\n   * Create an instance of [[PDFPage]].\r\n   *\r\n   * @param doc The document to which the page will belong.\r\n   */\r\n  static create = (doc: PDFDocument) => {\r\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\r\n    const dummyRef = PDFRef.of(-1);\r\n    const pageLeaf = PDFPageLeaf.withContextAndParent(doc.context, dummyRef);\r\n    const pageRef = doc.context.register(pageLeaf);\r\n    return new PDFPage(pageLeaf, pageRef, doc);\r\n  };\r\n\r\n  /** The low-level PDFDictionary wrapped by this page. */\r\n  readonly node: PDFPageLeaf;\r\n\r\n  /** The unique reference assigned to this page within the document. */\r\n  readonly ref: PDFRef;\r\n\r\n  /** The document to which this page belongs. */\r\n  readonly doc: PDFDocument;\r\n\r\n  private fontKey?: PDFName;\r\n  private font?: PDFFont;\r\n  private fontSize = 24;\r\n  private fontColor = rgb(0, 0, 0) as Color;\r\n  private lineHeight = 24;\r\n  private x = 0;\r\n  private y = 0;\r\n  private contentStream?: PDFContentStream;\r\n  private contentStreamRef?: PDFRef;\r\n\r\n  private constructor(leafNode: PDFPageLeaf, ref: PDFRef, doc: PDFDocument) {\r\n    assertIs(leafNode, 'leafNode', [[PDFPageLeaf, 'PDFPageLeaf']]);\r\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\r\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\r\n\r\n    this.node = leafNode;\r\n    this.ref = ref;\r\n    this.doc = doc;\r\n  }\r\n\r\n  /**\r\n   * Rotate this page by a multiple of 90 degrees. For example:\r\n   * ```js\r\n   * import { degrees } from 'pdf-lib'\r\n   *\r\n   * page.setRotation(degrees(-90))\r\n   * page.setRotation(degrees(0))\r\n   * page.setRotation(degrees(90))\r\n   * page.setRotation(degrees(180))\r\n   * page.setRotation(degrees(270))\r\n   * ```\r\n   * @param angle The angle to rotate this page.\r\n   */\r\n  setRotation(angle: Rotation): void {\r\n    const degreesAngle = toDegrees(angle);\r\n    assertMultiple(degreesAngle, 'degreesAngle', 90);\r\n    this.node.set(PDFName.of('Rotate'), this.doc.context.obj(degreesAngle));\r\n  }\r\n\r\n  /**\r\n   * Get this page's rotation angle in degrees. For example:\r\n   * ```js\r\n   * const rotationAngle = page.getRotation().angle;\r\n   * ```\r\n   * @returns The rotation angle of the page in degrees (always a multiple of\r\n   *          90 degrees).\r\n   */\r\n  getRotation(): Rotation {\r\n    const Rotate = this.node.Rotate();\r\n    return degrees(Rotate ? Rotate.asNumber() : 0);\r\n  }\r\n\r\n  /**\r\n   * Resize this page by increasing or decreasing its width and height. For\r\n   * example:\r\n   * ```js\r\n   * page.setSize(250, 500)\r\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 100)\r\n   * page.setSize(page.getWidth() - 50, page.getHeight() - 100)\r\n   * ```\r\n   *\r\n   * Note that the PDF specification does not allow for pages to have explicit\r\n   * widths and heights. Instead it defines the \"size\" of a page in terms of\r\n   * five rectangles: the MediaBox, CropBox, BleedBox, TrimBox, and ArtBox. As a\r\n   * result, this method cannot directly change the width and height of a page.\r\n   * Instead, it works by adjusting these five boxes.\r\n   *\r\n   * This method performs the following steps:\r\n   *   1. Set width & height of MediaBox.\r\n   *   2. Set width & height of CropBox, if it has same dimensions as MediaBox.\r\n   *   3. Set width & height of BleedBox, if it has same dimensions as MediaBox.\r\n   *   4. Set width & height of TrimBox, if it has same dimensions as MediaBox.\r\n   *   5. Set width & height of ArtBox, if it has same dimensions as MediaBox.\r\n   *\r\n   * This approach works well for most PDF documents as all PDF pages must\r\n   * have a MediaBox, but relatively few have a CropBox, BleedBox, TrimBox, or\r\n   * ArtBox. And when they do have these additional boxes, they often have the\r\n   * same dimensions as the MediaBox. However, if you find this method does not\r\n   * work for your document, consider setting the boxes directly:\r\n   *   * [[PDFPage.setMediaBox]]\r\n   *   * [[PDFPage.setCropBox]]\r\n   *   * [[PDFPage.setBleedBox]]\r\n   *   * [[PDFPage.setTrimBox]]\r\n   *   * [[PDFPage.setArtBox]]\r\n   *\r\n   * @param width The new width of the page.\r\n   * @param height The new height of the page.\r\n   */\r\n  setSize(width: number, height: number): void {\r\n    assertIs(width, 'width', ['number']);\r\n    assertIs(height, 'height', ['number']);\r\n\r\n    const mediaBox = this.getMediaBox();\r\n    this.setMediaBox(mediaBox.x, mediaBox.y, width, height);\r\n\r\n    const cropBox = this.getCropBox();\r\n    const bleedBox = this.getBleedBox();\r\n    const trimBox = this.getTrimBox();\r\n    const artBox = this.getArtBox();\r\n\r\n    const hasCropBox = this.node.CropBox()!!;\r\n    const hasBleedBox = this.node.BleedBox()!!;\r\n    const hasTrimBox = this.node.TrimBox()!!;\r\n    const hasArtBox = this.node.ArtBox()!!;\r\n\r\n    if (hasCropBox && rectanglesAreEqual(cropBox, mediaBox)) {\r\n      this.setCropBox(mediaBox.x, mediaBox.y, width, height);\r\n    }\r\n    if (hasBleedBox && rectanglesAreEqual(bleedBox, mediaBox)) {\r\n      this.setBleedBox(mediaBox.x, mediaBox.y, width, height);\r\n    }\r\n    if (hasTrimBox && rectanglesAreEqual(trimBox, mediaBox)) {\r\n      this.setTrimBox(mediaBox.x, mediaBox.y, width, height);\r\n    }\r\n    if (hasArtBox && rectanglesAreEqual(artBox, mediaBox)) {\r\n      this.setArtBox(mediaBox.x, mediaBox.y, width, height);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize this page by increasing or decreasing its width. For example:\r\n   * ```js\r\n   * page.setWidth(250)\r\n   * page.setWidth(page.getWidth() + 50)\r\n   * page.setWidth(page.getWidth() - 50)\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.setSize]] to set the page's width.\r\n   *\r\n   * @param width The new width of the page.\r\n   */\r\n  setWidth(width: number): void {\r\n    assertIs(width, 'width', ['number']);\r\n    this.setSize(width, this.getSize().height);\r\n  }\r\n\r\n  /**\r\n   * Resize this page by increasing or decreasing its height. For example:\r\n   * ```js\r\n   * page.setHeight(500)\r\n   * page.setHeight(page.getWidth() + 100)\r\n   * page.setHeight(page.getWidth() - 100)\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.setSize]] to set the page's height.\r\n   *\r\n   * @param height The new height of the page.\r\n   */\r\n  setHeight(height: number): void {\r\n    assertIs(height, 'height', ['number']);\r\n    this.setSize(this.getSize().width, height);\r\n  }\r\n\r\n  /**\r\n   * Set the MediaBox of this page. For example:\r\n   * ```js\r\n   * const mediaBox = page.getMediaBox()\r\n   *\r\n   * page.setMediaBox(0, 0, 250, 500)\r\n   * page.setMediaBox(mediaBox.x, mediaBox.y, 50, 100)\r\n   * page.setMediaBox(15, 5, mediaBox.width - 50, mediaBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getMediaBox]] for details about what the MediaBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new MediaBox.\r\n   * @param y The y coordinate of the lower left corner of the new MediaBox.\r\n   * @param width The width of the new MediaBox.\r\n   * @param height The height of the new MediaBox.\r\n   */\r\n  setMediaBox(x: number, y: number, width: number, height: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n    assertIs(width, 'width', ['number']);\r\n    assertIs(height, 'height', ['number']);\r\n    const mediaBox = this.doc.context.obj([x, y, x + width, y + height]);\r\n    this.node.set(PDFName.MediaBox, mediaBox);\r\n  }\r\n\r\n  /**\r\n   * Set the CropBox of this page. For example:\r\n   * ```js\r\n   * const cropBox = page.getCropBox()\r\n   *\r\n   * page.setCropBox(0, 0, 250, 500)\r\n   * page.setCropBox(cropBox.x, cropBox.y, 50, 100)\r\n   * page.setCropBox(15, 5, cropBox.width - 50, cropBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getCropBox]] for details about what the CropBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new CropBox.\r\n   * @param y The y coordinate of the lower left corner of the new CropBox.\r\n   * @param width The width of the new CropBox.\r\n   * @param height The height of the new CropBox.\r\n   */\r\n  setCropBox(x: number, y: number, width: number, height: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n    assertIs(width, 'width', ['number']);\r\n    assertIs(height, 'height', ['number']);\r\n    const cropBox = this.doc.context.obj([x, y, x + width, y + height]);\r\n    this.node.set(PDFName.CropBox, cropBox);\r\n  }\r\n\r\n  /**\r\n   * Set the BleedBox of this page. For example:\r\n   * ```js\r\n   * const bleedBox = page.getBleedBox()\r\n   *\r\n   * page.setBleedBox(0, 0, 250, 500)\r\n   * page.setBleedBox(bleedBox.x, bleedBox.y, 50, 100)\r\n   * page.setBleedBox(15, 5, bleedBox.width - 50, bleedBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getBleedBox]] for details about what the BleedBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new BleedBox.\r\n   * @param y The y coordinate of the lower left corner of the new BleedBox.\r\n   * @param width The width of the new BleedBox.\r\n   * @param height The height of the new BleedBox.\r\n   */\r\n  setBleedBox(x: number, y: number, width: number, height: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n    assertIs(width, 'width', ['number']);\r\n    assertIs(height, 'height', ['number']);\r\n    const bleedBox = this.doc.context.obj([x, y, x + width, y + height]);\r\n    this.node.set(PDFName.BleedBox, bleedBox);\r\n  }\r\n\r\n  /**\r\n   * Set the TrimBox of this page. For example:\r\n   * ```js\r\n   * const trimBox = page.getTrimBox()\r\n   *\r\n   * page.setTrimBox(0, 0, 250, 500)\r\n   * page.setTrimBox(trimBox.x, trimBox.y, 50, 100)\r\n   * page.setTrimBox(15, 5, trimBox.width - 50, trimBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getTrimBox]] for details about what the TrimBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new TrimBox.\r\n   * @param y The y coordinate of the lower left corner of the new TrimBox.\r\n   * @param width The width of the new TrimBox.\r\n   * @param height The height of the new TrimBox.\r\n   */\r\n  setTrimBox(x: number, y: number, width: number, height: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n    assertIs(width, 'width', ['number']);\r\n    assertIs(height, 'height', ['number']);\r\n    const trimBox = this.doc.context.obj([x, y, x + width, y + height]);\r\n    this.node.set(PDFName.TrimBox, trimBox);\r\n  }\r\n\r\n  /**\r\n   * Set the ArtBox of this page. For example:\r\n   * ```js\r\n   * const artBox = page.getArtBox()\r\n   *\r\n   * page.setArtBox(0, 0, 250, 500)\r\n   * page.setArtBox(artBox.x, artBox.y, 50, 100)\r\n   * page.setArtBox(15, 5, artBox.width - 50, artBox.height - 100)\r\n   * ```\r\n   *\r\n   * See [[PDFPage.getArtBox]] for details about what the ArtBox represents.\r\n   *\r\n   * @param x The x coordinate of the lower left corner of the new ArtBox.\r\n   * @param y The y coordinate of the lower left corner of the new ArtBox.\r\n   * @param width The width of the new ArtBox.\r\n   * @param height The height of the new ArtBox.\r\n   */\r\n  setArtBox(x: number, y: number, width: number, height: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n    assertIs(width, 'width', ['number']);\r\n    assertIs(height, 'height', ['number']);\r\n    const artBox = this.doc.context.obj([x, y, x + width, y + height]);\r\n    this.node.set(PDFName.ArtBox, artBox);\r\n  }\r\n\r\n  /**\r\n   * Get this page's width and height. For example:\r\n   * ```js\r\n   * const { width, height } = page.getSize()\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.getMediaBox]] to obtain the page's\r\n   * width and height.\r\n   *\r\n   * @returns The width and height of the page.\r\n   */\r\n  getSize(): { width: number; height: number } {\r\n    const { width, height } = this.getMediaBox();\r\n    return { width, height };\r\n  }\r\n\r\n  /**\r\n   * Get this page's width. For example:\r\n   * ```js\r\n   * const width = page.getWidth()\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\r\n   *\r\n   * @returns The width of the page.\r\n   */\r\n  getWidth(): number {\r\n    return this.getSize().width;\r\n  }\r\n\r\n  /**\r\n   * Get this page's height. For example:\r\n   * ```js\r\n   * const height = page.getHeight()\r\n   * ```\r\n   *\r\n   * This method uses [[PDFPage.getSize]] to obtain the page's size.\r\n   *\r\n   * @returns The height of the page.\r\n   */\r\n  getHeight(): number {\r\n    return this.getSize().height;\r\n  }\r\n\r\n  /**\r\n   * Get the rectangle defining this page's MediaBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getMediaBox()\r\n   * ```\r\n   *\r\n   * The MediaBox of a page defines the boundaries of the physical medium on\r\n   * which the page is to be displayed/printed. It may include extended area\r\n   * surrounding the page content for bleed marks, printing marks, etc...\r\n   * It may also include areas close to the edges of the medium that cannot be\r\n   * marked because of physical limitations of the output device. Content\r\n   * falling outside this boundary may safely be discarded without affecting\r\n   * the meaning of the PDF file.\r\n   *\r\n   * @returns An object defining the lower left corner of the MediaBox and its\r\n   *          width & height.\r\n   */\r\n  getMediaBox(): { x: number; y: number; width: number; height: number } {\r\n    const mediaBox = this.node.MediaBox();\r\n    return mediaBox.asRectangle();\r\n  }\r\n\r\n  /**\r\n   * Get the rectangle defining this page's CropBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getCropBox()\r\n   * ```\r\n   *\r\n   * The CropBox of a page defines the region to which the contents of the page\r\n   * shall be clipped when displayed or printed. Unlike the other boxes, the\r\n   * CropBox does not necessarily represent the physical page geometry. It\r\n   * merely imposes clipping on the page contents.\r\n   *\r\n   * The CropBox's default value is the page's MediaBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the CropBox and its\r\n   *          width & height.\r\n   */\r\n  getCropBox(): { x: number; y: number; width: number; height: number } {\r\n    const cropBox = this.node.CropBox();\r\n    return cropBox?.asRectangle() ?? this.getMediaBox();\r\n  }\r\n\r\n  /**\r\n   * Get the rectangle defining this page's BleedBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getBleedBox()\r\n   * ```\r\n   *\r\n   * The BleedBox of a page defines the region to which the contents of the\r\n   * page shall be clipped when output in a production environment. This may\r\n   * include any extra bleed area needed to accommodate the physical\r\n   * limitations of cutting, folding, and trimming equipment. The actual\r\n   * printed page may include printing marks that fall outside the BleedBox.\r\n   *\r\n   * The BleedBox's default value is the page's CropBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the BleedBox and its\r\n   *          width & height.\r\n   */\r\n  getBleedBox(): { x: number; y: number; width: number; height: number } {\r\n    const bleedBox = this.node.BleedBox();\r\n    return bleedBox?.asRectangle() ?? this.getCropBox();\r\n  }\r\n\r\n  /**\r\n   * Get the rectangle defining this page's TrimBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getTrimBox()\r\n   * ```\r\n   *\r\n   * The TrimBox of a page defines the intended dimensions of the finished\r\n   * page after trimming. It may be smaller than the MediaBox to allow for\r\n   * production-related content, such as printing instructions, cut marks, or\r\n   * color bars.\r\n   *\r\n   * The TrimBox's default value is the page's CropBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the TrimBox and its\r\n   *          width & height.\r\n   */\r\n  getTrimBox(): { x: number; y: number; width: number; height: number } {\r\n    const trimBox = this.node.TrimBox();\r\n    return trimBox?.asRectangle() ?? this.getCropBox();\r\n  }\r\n\r\n  /**\r\n   * Get the rectangle defining this page's ArtBox. For example:\r\n   * ```js\r\n   * const { x, y, width, height } = page.getArtBox()\r\n   * ```\r\n   *\r\n   * The ArtBox of a page defines the extent of the page's meaningful content\r\n   * (including potential white space).\r\n   *\r\n   * The ArtBox's default value is the page's CropBox.\r\n   *\r\n   * @returns An object defining the lower left corner of the ArtBox and its\r\n   *          width & height.\r\n   */\r\n  getArtBox(): { x: number; y: number; width: number; height: number } {\r\n    const artBox = this.node.ArtBox();\r\n    return artBox?.asRectangle() ?? this.getCropBox();\r\n  }\r\n\r\n  /**\r\n   * Translate this page's content to a new location on the page. This operation\r\n   * is often useful after resizing the page with [[setSize]]. For example:\r\n   * ```js\r\n   * // Add 50 units of whitespace to the top and right of the page\r\n   * page.setSize(page.getWidth() + 50, page.getHeight() + 50)\r\n   *\r\n   * // Move the page's content from the lower-left corner of the page\r\n   * // to the top-right corner.\r\n   * page.translateContent(50, 50)\r\n   *\r\n   * // Now there are 50 units of whitespace to the left and bottom of the page\r\n   * ```\r\n   * See also: [[resetPosition]]\r\n   * @param x The new position on the x-axis for this page's content.\r\n   * @param y The new position on the y-axis for this page's content.\r\n   */\r\n  translateContent(x: number, y: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n\r\n    this.node.normalize();\r\n    this.getContentStream();\r\n\r\n    const start = this.createContentStream(\r\n      pushGraphicsState(),\r\n      translate(x, y),\r\n    );\r\n    const startRef = this.doc.context.register(start);\r\n\r\n    const end = this.createContentStream(popGraphicsState());\r\n    const endRef = this.doc.context.register(end);\r\n\r\n    this.node.wrapContentStreams(startRef, endRef);\r\n  }\r\n\r\n  /**\r\n   * Scale the size, content, and annotations of a page.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * page.scale(0.5, 0.5);\r\n   * ```\r\n   *\r\n   * @param x The factor by which the width for the page should be scaled\r\n   *          (e.g. `0.5` is 50%).\r\n   * @param y The factor by which the height for the page should be scaled\r\n   *          (e.g. `2.0` is 200%).\r\n   */\r\n  scale(x: number, y: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n    this.setSize(this.getWidth() * x, this.getHeight() * y);\r\n    this.scaleContent(x, y);\r\n    this.scaleAnnotations(x, y);\r\n  }\r\n\r\n  /**\r\n   * Scale the content of a page. This is useful after resizing an existing\r\n   * page. This scales only the content, not the annotations.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * // Bisect the size of the page\r\n   * page.setSize(page.getWidth() / 2, page.getHeight() / 2);\r\n   *\r\n   * // Scale the content of the page down by 50% in x and y\r\n   * page.scaleContent(0.5, 0.5);\r\n   * ```\r\n   * See also: [[scaleAnnotations]]\r\n   * @param x The factor by which the x-axis for the content should be scaled\r\n   *          (e.g. `0.5` is 50%).\r\n   * @param y The factor by which the y-axis for the content should be scaled\r\n   *          (e.g. `2.0` is 200%).\r\n   */\r\n  scaleContent(x: number, y: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n\r\n    this.node.normalize();\r\n    this.getContentStream();\r\n\r\n    const start = this.createContentStream(pushGraphicsState(), scale(x, y));\r\n    const startRef = this.doc.context.register(start);\r\n\r\n    const end = this.createContentStream(popGraphicsState());\r\n    const endRef = this.doc.context.register(end);\r\n\r\n    this.node.wrapContentStreams(startRef, endRef);\r\n  }\r\n\r\n  /**\r\n   * Scale the annotations of a page. This is useful if you want to scale a\r\n   * page with comments or other annotations.\r\n   * ```js\r\n   * // Scale the content of the page down by 50% in x and y\r\n   * page.scaleContent(0.5, 0.5);\r\n   *\r\n   * // Scale the content of the page down by 50% in x and y\r\n   * page.scaleAnnotations(0.5, 0.5);\r\n   * ```\r\n   * See also: [[scaleContent]]\r\n   * @param x The factor by which the x-axis for the annotations should be\r\n   *          scaled (e.g. `0.5` is 50%).\r\n   * @param y The factor by which the y-axis for the annotations should be\r\n   *          scaled (e.g. `2.0` is 200%).\r\n   */\r\n  scaleAnnotations(x: number, y: number) {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n\r\n    const annots = this.node.Annots();\r\n    if (!annots) return;\r\n\r\n    for (let idx = 0; idx < annots.size(); idx++) {\r\n      const annot = annots.lookup(idx);\r\n      if (annot instanceof PDFDict) this.scaleAnnot(annot, x, y);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the x and y coordinates of this page to `(0, 0)`. This operation is\r\n   * often useful after calling [[translateContent]]. For example:\r\n   * ```js\r\n   * // Shift the page's contents up and to the right by 50 units\r\n   * page.translateContent(50, 50)\r\n   *\r\n   * // This text will shifted - it will be drawn at (50, 50)\r\n   * page.drawText('I am shifted')\r\n   *\r\n   * // Move back to (0, 0)\r\n   * page.resetPosition()\r\n   *\r\n   * // This text will not be shifted - it will be drawn at (0, 0)\r\n   * page.drawText('I am not shifted')\r\n   * ```\r\n   */\r\n  resetPosition(): void {\r\n    this.getContentStream(false);\r\n    this.x = 0;\r\n    this.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Choose a default font for this page. The default font will be used whenever\r\n   * text is drawn on this page and no font is specified. For example:\r\n   * ```js\r\n   * import { StandardFonts } from 'pdf-lib'\r\n   *\r\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\r\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\r\n   *\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * page.setFont(helveticaFont)\r\n   * page.drawText('I will be drawn in Helvetica')\r\n   *\r\n   * page.setFont(timesRomanFont)\r\n   * page.drawText('I will be drawn in Courier', { font: courierFont })\r\n   * ```\r\n   * @param font The default font to be used when drawing text on this page.\r\n   */\r\n  setFont(font: PDFFont): void {\r\n    // TODO: Reuse image Font name if we've already added this image to Resources.Fonts\r\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\r\n    this.font = font;\r\n    this.fontKey = this.node.newFontDictionary(this.font.name, this.font.ref);\r\n  }\r\n\r\n  /**\r\n   * Choose a default font size for this page. The default font size will be\r\n   * used whenever text is drawn on this page and no font size is specified.\r\n   * For example:\r\n   * ```js\r\n   * page.setFontSize(12)\r\n   * page.drawText('I will be drawn in size 12')\r\n   *\r\n   * page.setFontSize(36)\r\n   * page.drawText('I will be drawn in size 24', { fontSize: 24 })\r\n   * ```\r\n   * @param fontSize The default font size to be used when drawing text on this\r\n   *                 page.\r\n   */\r\n  setFontSize(fontSize: number): void {\r\n    assertIs(fontSize, 'fontSize', ['number']);\r\n    this.fontSize = fontSize;\r\n  }\r\n\r\n  /**\r\n   * Choose a default font color for this page. The default font color will be\r\n   * used whenever text is drawn on this page and no font color is specified.\r\n   * For example:\r\n   * ```js\r\n   * import { rgb, cmyk, grayscale } from 'pdf-lib'\r\n   *\r\n   * page.setFontColor(rgb(0.97, 0.02, 0.97))\r\n   * page.drawText('I will be drawn in pink')\r\n   *\r\n   * page.setFontColor(cmyk(0.4, 0.7, 0.39, 0.15))\r\n   * page.drawText('I will be drawn in gray', { color: grayscale(0.5) })\r\n   * ```\r\n   * @param fontColor The default font color to be used when drawing text on\r\n   *                  this page.\r\n   */\r\n  setFontColor(fontColor: Color): void {\r\n    assertIs(fontColor, 'fontColor', [[Object, 'Color']]);\r\n    this.fontColor = fontColor;\r\n  }\r\n\r\n  /**\r\n   * Choose a default line height for this page. The default line height will be\r\n   * used whenever text is drawn on this page and no line height is specified.\r\n   * For example:\r\n   * ```js\r\n   * page.setLineHeight(12);\r\n   * page.drawText('These lines will be vertically \\n separated by 12 units')\r\n   *\r\n   * page.setLineHeight(36);\r\n   * page.drawText('These lines will be vertically \\n separated by 24 units', {\r\n   *   lineHeight: 24\r\n   * })\r\n   * ```\r\n   * @param lineHeight The default line height to be used when drawing text on\r\n   *                   this page.\r\n   */\r\n  setLineHeight(lineHeight: number): void {\r\n    assertIs(lineHeight, 'lineHeight', ['number']);\r\n    this.lineHeight = lineHeight;\r\n  }\r\n\r\n  /**\r\n   * Get the default position of this page. For example:\r\n   * ```js\r\n   * const { x, y } = page.getPosition()\r\n   * ```\r\n   * @returns The default position of the page.\r\n   */\r\n  getPosition(): { x: number; y: number } {\r\n    return { x: this.x, y: this.y };\r\n  }\r\n\r\n  /**\r\n   * Get the default x coordinate of this page. For example:\r\n   * ```js\r\n   * const x = page.getX()\r\n   * ```\r\n   * @returns The default x coordinate of the page.\r\n   */\r\n  getX(): number {\r\n    return this.x;\r\n  }\r\n\r\n  /**\r\n   * Get the default y coordinate of this page. For example:\r\n   * ```js\r\n   * const y = page.getY()\r\n   * ```\r\n   * @returns The default y coordinate of the page.\r\n   */\r\n  getY(): number {\r\n    return this.y;\r\n  }\r\n\r\n  /**\r\n   * Change the default position of this page. For example:\r\n   * ```js\r\n   * page.moveTo(0, 0)\r\n   * page.drawText('I will be drawn at the origin')\r\n   *\r\n   * page.moveTo(0, 25)\r\n   * page.drawText('I will be drawn 25 units up')\r\n   *\r\n   * page.moveTo(25, 25)\r\n   * page.drawText('I will be drawn 25 units up and 25 units to the right')\r\n   * ```\r\n   * @param x The new default position on the x-axis for this page.\r\n   * @param y The new default position on the y-axis for this page.\r\n   */\r\n  moveTo(x: number, y: number): void {\r\n    assertIs(x, 'x', ['number']);\r\n    assertIs(y, 'y', ['number']);\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /**\r\n   * Change the default position of this page to be further down the y-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveDown(10)\r\n   * page.drawText('I will be drawn at (50, 40)')\r\n   * ```\r\n   * @param yDecrease The amount by which the page's default position along the\r\n   *                  y-axis should be decreased.\r\n   */\r\n  moveDown(yDecrease: number): void {\r\n    assertIs(yDecrease, 'yDecrease', ['number']);\r\n    this.y -= yDecrease;\r\n  }\r\n\r\n  /**\r\n   * Change the default position of this page to be further up the y-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveUp(10)\r\n   * page.drawText('I will be drawn at (50, 60)')\r\n   * ```\r\n   * @param yIncrease The amount by which the page's default position along the\r\n   *                  y-axis should be increased.\r\n   */\r\n  moveUp(yIncrease: number): void {\r\n    assertIs(yIncrease, 'yIncrease', ['number']);\r\n    this.y += yIncrease;\r\n  }\r\n\r\n  /**\r\n   * Change the default position of this page to be further left on the x-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveLeft(10)\r\n   * page.drawText('I will be drawn at (40, 50)')\r\n   * ```\r\n   * @param xDecrease The amount by which the page's default position along the\r\n   *                  x-axis should be decreased.\r\n   */\r\n  moveLeft(xDecrease: number): void {\r\n    assertIs(xDecrease, 'xDecrease', ['number']);\r\n    this.x -= xDecrease;\r\n  }\r\n\r\n  /**\r\n   * Change the default position of this page to be further right on the y-axis.\r\n   * For example:\r\n   * ```js\r\n   * page.moveTo(50, 50)\r\n   * page.drawText('I will be drawn at (50, 50)')\r\n   *\r\n   * page.moveRight(10)\r\n   * page.drawText('I will be drawn at (60, 50)')\r\n   * ```\r\n   * @param xIncrease The amount by which the page's default position along the\r\n   *                  x-axis should be increased.\r\n   */\r\n  moveRight(xIncrease: number): void {\r\n    assertIs(xIncrease, 'xIncrease', ['number']);\r\n    this.x += xIncrease;\r\n  }\r\n\r\n  /**\r\n   * Push one or more operators to the end of this page's current content\r\n   * stream. For example:\r\n   * ```js\r\n   * import {\r\n   *   pushGraphicsState,\r\n   *   moveTo,\r\n   *   lineTo,\r\n   *   closePath,\r\n   *   setFillingColor,\r\n   *   rgb,\r\n   *   fill,\r\n   *   popGraphicsState,\r\n   * } from 'pdf-lib'\r\n   *\r\n   * // Draw a green triangle in the lower-left corner of the page\r\n   * page.pushOperators(\r\n   *   pushGraphicsState(),\r\n   *   moveTo(0, 0),\r\n   *   lineTo(100, 0),\r\n   *   lineTo(50, 100),\r\n   *   closePath(),\r\n   *   setFillingColor(rgb(0.0, 1.0, 0.0)),\r\n   *   fill(),\r\n   *   popGraphicsState(),\r\n   * )\r\n   * ```\r\n   * @param operator The operators to be pushed.\r\n   */\r\n  pushOperators(...operator: PDFOperator[]): void {\r\n    assertEachIs(operator, 'operator', [[PDFOperator, 'PDFOperator']]);\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(...operator);\r\n  }\r\n\r\n  /**\r\n   * Draw one or more lines of text on this page. For example:\r\n   * ```js\r\n   * import { StandardFonts, rgb } from 'pdf-lib'\r\n   *\r\n   * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\r\n   *\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * page.setFont(helveticaFont)\r\n   *\r\n   * page.moveTo(5, 200)\r\n   * page.drawText('The Life of an Egg', { size: 36 })\r\n   *\r\n   * page.moveDown(36)\r\n   * page.drawText('An Epic Tale of Woe', { size: 30 })\r\n   *\r\n   * page.drawText(\r\n   *   `Humpty Dumpty sat on a wall \\n` +\r\n   *   `Humpty Dumpty had a great fall; \\n` +\r\n   *   `All the king's horses and all the king's men \\n` +\r\n   *   `Couldn't put Humpty together again. \\n`,\r\n   *   {\r\n   *     x: 25,\r\n   *     y: 100,\r\n   *     font: timesRomanFont,\r\n   *     size: 24,\r\n   *     color: rgb(1, 0, 0),\r\n   *     lineHeight: 24,\r\n   *     opacity: 0.75,\r\n   *   },\r\n   * )\r\n   * ```\r\n   * @param text The text to be drawn.\r\n   * @param options The options to be used when drawing the text.\r\n   */\r\n  drawText(text: string, options: PDFPageDrawTextOptions = {}): void {\r\n    assertIs(text, 'text', ['string']);\r\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\r\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\r\n    assertOrUndefined(options.font, 'options.font', [[PDFFont, 'PDFFont']]);\r\n    assertOrUndefined(options.size, 'options.size', ['number']);\r\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.x, 'options.x', ['number']);\r\n    assertOrUndefined(options.y, 'options.y', ['number']);\r\n    assertOrUndefined(options.lineHeight, 'options.lineHeight', ['number']);\r\n    assertOrUndefined(options.maxWidth, 'options.maxWidth', ['number']);\r\n    assertOrUndefined(options.wordBreaks, 'options.wordBreaks', [Array]);\r\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\r\n\r\n    const { oldFont, newFont, newFontKey } = this.setOrEmbedFont(options.font);\r\n    const fontSize = options.size || this.fontSize;\r\n\r\n    const wordBreaks = options.wordBreaks || this.doc.defaultWordBreaks;\r\n    const textWidth = (t: string) => newFont.widthOfTextAtSize(t, fontSize);\r\n    const lines =\r\n      options.maxWidth === undefined\r\n        ? lineSplit(cleanText(text))\r\n        : breakTextIntoLines(text, wordBreaks, options.maxWidth, textWidth);\r\n\r\n    const encodedLines = new Array(lines.length) as PDFHexString[];\r\n    for (let idx = 0, len = lines.length; idx < len; idx++) {\r\n      encodedLines[idx] = newFont.encodeText(lines[idx]);\r\n    }\r\n\r\n    const graphicsStateKey = this.maybeEmbedGraphicsState({\r\n      opacity: options.opacity,\r\n      blendMode: options.blendMode,\r\n    });\r\n\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(\r\n      ...drawLinesOfText(encodedLines, {\r\n        color: options.color ?? this.fontColor,\r\n        font: newFontKey,\r\n        size: fontSize,\r\n        rotate: options.rotate ?? degrees(0),\r\n        xSkew: options.xSkew ?? degrees(0),\r\n        ySkew: options.ySkew ?? degrees(0),\r\n        x: options.x ?? this.x,\r\n        y: options.y ?? this.y,\r\n        lineHeight: options.lineHeight ?? this.lineHeight,\r\n        graphicsState: graphicsStateKey,\r\n      }),\r\n    );\r\n\r\n    if (options.font) {\r\n      if (oldFont) this.setFont(oldFont);\r\n      else this.resetFont();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw an image on this page. For example:\r\n   * ```js\r\n   * import { degrees } from 'pdf-lib'\r\n   *\r\n   * const jpgUrl = 'https://pdf-lib.js.org/assets/cat_riding_unicorn.jpg'\r\n   * const jpgImageBytes = await fetch(jpgUrl).then((res) => res.arrayBuffer())\r\n   *\r\n   * const jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\r\n   * const jpgDims = jpgImage.scale(0.5)\r\n   *\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * page.drawImage(jpgImage, {\r\n   *   x: 25,\r\n   *   y: 25,\r\n   *   width: jpgDims.width,\r\n   *   height: jpgDims.height,\r\n   *   rotate: degrees(30),\r\n   *   opacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param image The image to be drawn.\r\n   * @param options The options to be used when drawing the image.\r\n   */\r\n  drawImage(image: PDFImage, options: PDFPageDrawImageOptions = {}): void {\r\n    // TODO: Reuse image XObject name if we've already added this image to Resources.XObjects\r\n    assertIs(image, 'image', [[PDFImage, 'PDFImage']]);\r\n    assertOrUndefined(options.x, 'options.x', ['number']);\r\n    assertOrUndefined(options.y, 'options.y', ['number']);\r\n    assertOrUndefined(options.width, 'options.width', ['number']);\r\n    assertOrUndefined(options.height, 'options.height', ['number']);\r\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\r\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\r\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\r\n\r\n    const xObjectKey = this.node.newXObject('Image', image.ref);\r\n\r\n    const graphicsStateKey = this.maybeEmbedGraphicsState({\r\n      opacity: options.opacity,\r\n      blendMode: options.blendMode,\r\n    });\r\n\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(\r\n      ...drawImage(xObjectKey, {\r\n        x: options.x ?? this.x,\r\n        y: options.y ?? this.y,\r\n        width: options.width ?? image.size().width,\r\n        height: options.height ?? image.size().height,\r\n        rotate: options.rotate ?? degrees(0),\r\n        xSkew: options.xSkew ?? degrees(0),\r\n        ySkew: options.ySkew ?? degrees(0),\r\n        graphicsState: graphicsStateKey,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Draw an embedded PDF page on this page. For example:\r\n   * ```js\r\n   * import { degrees } from 'pdf-lib'\r\n   *\r\n   * const pdfDoc = await PDFDocument.create()\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const sourcePdfUrl = 'https://pdf-lib.js.org/assets/with_large_page_count.pdf'\r\n   * const sourcePdf = await fetch(sourcePdfUrl).then((res) => res.arrayBuffer())\r\n   *\r\n   * // Embed page 74 from the PDF\r\n   * const [embeddedPage] = await pdfDoc.embedPdf(sourcePdf, 73)\r\n   *\r\n   * page.drawPage(embeddedPage, {\r\n   *   x: 250,\r\n   *   y: 200,\r\n   *   xScale: 0.5,\r\n   *   yScale: 0.5,\r\n   *   rotate: degrees(30),\r\n   *   opacity: 0.75,\r\n   * })\r\n   * ```\r\n   *\r\n   * The `options` argument accepts both `width`/`height` and `xScale`/`yScale`\r\n   * as options. Since each of these options defines the size of the drawn page,\r\n   * if both options are given, `width` and `height` take precedence and the\r\n   * corresponding scale variants are ignored.\r\n   *\r\n   * @param embeddedPage The embedded page to be drawn.\r\n   * @param options The options to be used when drawing the embedded page.\r\n   */\r\n  drawPage(\r\n    embeddedPage: PDFEmbeddedPage,\r\n    options: PDFPageDrawPageOptions = {},\r\n  ): void {\r\n    // TODO: Reuse embeddedPage XObject name if we've already added this embeddedPage to Resources.XObjects\r\n    assertIs(embeddedPage, 'embeddedPage', [\r\n      [PDFEmbeddedPage, 'PDFEmbeddedPage'],\r\n    ]);\r\n    assertOrUndefined(options.x, 'options.x', ['number']);\r\n    assertOrUndefined(options.y, 'options.y', ['number']);\r\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\r\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\r\n    assertOrUndefined(options.width, 'options.width', ['number']);\r\n    assertOrUndefined(options.height, 'options.height', ['number']);\r\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\r\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\r\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\r\n\r\n    const xObjectKey = this.node.newXObject(\r\n      'EmbeddedPdfPage',\r\n      embeddedPage.ref,\r\n    );\r\n\r\n    const graphicsStateKey = this.maybeEmbedGraphicsState({\r\n      opacity: options.opacity,\r\n      blendMode: options.blendMode,\r\n    });\r\n\r\n    // prettier-ignore\r\n    const xScale = (\r\n        options.width  !== undefined ? options.width / embeddedPage.width\r\n      : options.xScale !== undefined ? options.xScale\r\n      : 1\r\n    );\r\n\r\n    // prettier-ignore\r\n    const yScale = (\r\n        options.height !== undefined ? options.height / embeddedPage.height\r\n      : options.yScale !== undefined ? options.yScale\r\n      : 1\r\n    );\r\n\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(\r\n      ...drawPage(xObjectKey, {\r\n        x: options.x ?? this.x,\r\n        y: options.y ?? this.y,\r\n        xScale,\r\n        yScale,\r\n        rotate: options.rotate ?? degrees(0),\r\n        xSkew: options.xSkew ?? degrees(0),\r\n        ySkew: options.ySkew ?? degrees(0),\r\n        graphicsState: graphicsStateKey,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Draw an SVG path on this page. For example:\r\n   * ```js\r\n   * import { rgb } from 'pdf-lib'\r\n   *\r\n   * const svgPath = 'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\r\n   *\r\n   * // Draw path as black line\r\n   * page.drawSvgPath(svgPath, { x: 25, y: 75 })\r\n   *\r\n   * // Change border style and opacity\r\n   * page.drawSvgPath(svgPath, {\r\n   *   x: 25,\r\n   *   y: 275,\r\n   *   borderColor: rgb(0.5, 0.5, 0.5),\r\n   *   borderWidth: 2,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   *\r\n   * // Set fill color and opacity\r\n   * page.drawSvgPath(svgPath, {\r\n   *   x: 25,\r\n   *   y: 475,\r\n   *   color: rgb(1.0, 0, 0),\r\n   *   opacity: 0.75,\r\n   * })\r\n   *\r\n   * // Draw 50% of original size\r\n   * page.drawSvgPath(svgPath, {\r\n   *   x: 25,\r\n   *   y: 675,\r\n   *   scale: 0.5,\r\n   * })\r\n   * ```\r\n   * @param path The SVG path to be drawn.\r\n   * @param options The options to be used when drawing the SVG path.\r\n   */\r\n  drawSvgPath(path: string, options: PDFPageDrawSVGOptions = {}): void {\r\n    assertIs(path, 'path', ['string']);\r\n    assertOrUndefined(options.x, 'options.x', ['number']);\r\n    assertOrUndefined(options.y, 'options.y', ['number']);\r\n    assertOrUndefined(options.scale, 'options.scale', ['number']);\r\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\r\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\r\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\r\n    assertOrUndefined(options.borderColor, 'options.borderColor', [\r\n      [Object, 'Color'],\r\n    ]);\r\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\r\n      Array,\r\n    ]);\r\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\r\n      'number',\r\n    ]);\r\n    assertIsOneOfOrUndefined(\r\n      options.borderLineCap,\r\n      'options.borderLineCap',\r\n      LineCapStyle,\r\n    );\r\n    assertRangeOrUndefined(\r\n      options.borderOpacity,\r\n      'options.borderOpacity',\r\n      0,\r\n      1,\r\n    );\r\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\r\n\r\n    const graphicsStateKey = this.maybeEmbedGraphicsState({\r\n      opacity: options.opacity,\r\n      borderOpacity: options.borderOpacity,\r\n      blendMode: options.blendMode,\r\n    });\r\n\r\n    if (!('color' in options) && !('borderColor' in options)) {\r\n      options.borderColor = rgb(0, 0, 0);\r\n    }\r\n\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(\r\n      ...drawSvgPath(path, {\r\n        x: options.x ?? this.x,\r\n        y: options.y ?? this.y,\r\n        scale: options.scale,\r\n        rotate: options.rotate ?? degrees(0),\r\n        color: options.color ?? undefined,\r\n        borderColor: options.borderColor ?? undefined,\r\n        borderWidth: options.borderWidth ?? 0,\r\n        borderDashArray: options.borderDashArray ?? undefined,\r\n        borderDashPhase: options.borderDashPhase ?? undefined,\r\n        borderLineCap: options.borderLineCap ?? undefined,\r\n        graphicsState: graphicsStateKey,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Draw a line on this page. For example:\r\n   * ```js\r\n   * import { rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawLine({\r\n   *   start: { x: 25, y: 75 },\r\n   *   end: { x: 125, y: 175 },\r\n   *   thickness: 2,\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the line.\r\n   */\r\n  drawLine(options: PDFPageDrawLineOptions): void {\r\n    assertIs(options.start, 'options.start', [\r\n      [Object, '{ x: number, y: number }'],\r\n    ]);\r\n    assertIs(options.end, 'options.end', [\r\n      [Object, '{ x: number, y: number }'],\r\n    ]);\r\n    assertIs(options.start.x, 'options.start.x', ['number']);\r\n    assertIs(options.start.y, 'options.start.y', ['number']);\r\n    assertIs(options.end.x, 'options.end.x', ['number']);\r\n    assertIs(options.end.y, 'options.end.y', ['number']);\r\n    assertOrUndefined(options.thickness, 'options.thickness', ['number']);\r\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\r\n    assertOrUndefined(options.dashArray, 'options.dashArray', [Array]);\r\n    assertOrUndefined(options.dashPhase, 'options.dashPhase', ['number']);\r\n    assertIsOneOfOrUndefined(options.lineCap, 'options.lineCap', LineCapStyle);\r\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\r\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\r\n\r\n    const graphicsStateKey = this.maybeEmbedGraphicsState({\r\n      borderOpacity: options.opacity,\r\n      blendMode: options.blendMode,\r\n    });\r\n\r\n    if (!('color' in options)) {\r\n      options.color = rgb(0, 0, 0);\r\n    }\r\n\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(\r\n      ...drawLine({\r\n        start: options.start,\r\n        end: options.end,\r\n        thickness: options.thickness ?? 1,\r\n        color: options.color ?? undefined,\r\n        dashArray: options.dashArray ?? undefined,\r\n        dashPhase: options.dashPhase ?? undefined,\r\n        lineCap: options.lineCap ?? undefined,\r\n        graphicsState: graphicsStateKey,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Draw a rectangle on this page. For example:\r\n   * ```js\r\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawRectangle({\r\n   *   x: 25,\r\n   *   y: 75,\r\n   *   width: 250,\r\n   *   height: 75,\r\n   *   rotate: degrees(-15),\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the rectangle.\r\n   */\r\n  drawRectangle(options: PDFPageDrawRectangleOptions = {}): void {\r\n    assertOrUndefined(options.x, 'options.x', ['number']);\r\n    assertOrUndefined(options.y, 'options.y', ['number']);\r\n    assertOrUndefined(options.width, 'options.width', ['number']);\r\n    assertOrUndefined(options.height, 'options.height', ['number']);\r\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\r\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\r\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\r\n    assertOrUndefined(options.borderColor, 'options.borderColor', [\r\n      [Object, 'Color'],\r\n    ]);\r\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\r\n      Array,\r\n    ]);\r\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\r\n      'number',\r\n    ]);\r\n    assertIsOneOfOrUndefined(\r\n      options.borderLineCap,\r\n      'options.borderLineCap',\r\n      LineCapStyle,\r\n    );\r\n    assertRangeOrUndefined(\r\n      options.borderOpacity,\r\n      'options.borderOpacity',\r\n      0,\r\n      1,\r\n    );\r\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\r\n\r\n    const graphicsStateKey = this.maybeEmbedGraphicsState({\r\n      opacity: options.opacity,\r\n      borderOpacity: options.borderOpacity,\r\n      blendMode: options.blendMode,\r\n    });\r\n\r\n    if (!('color' in options) && !('borderColor' in options)) {\r\n      options.color = rgb(0, 0, 0);\r\n    }\r\n\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(\r\n      ...drawRectangle({\r\n        x: options.x ?? this.x,\r\n        y: options.y ?? this.y,\r\n        width: options.width ?? 150,\r\n        height: options.height ?? 100,\r\n        rotate: options.rotate ?? degrees(0),\r\n        xSkew: options.xSkew ?? degrees(0),\r\n        ySkew: options.ySkew ?? degrees(0),\r\n        borderWidth: options.borderWidth ?? 0,\r\n        color: options.color ?? undefined,\r\n        borderColor: options.borderColor ?? undefined,\r\n        borderDashArray: options.borderDashArray ?? undefined,\r\n        borderDashPhase: options.borderDashPhase ?? undefined,\r\n        graphicsState: graphicsStateKey,\r\n        borderLineCap: options.borderLineCap ?? undefined,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Draw a square on this page. For example:\r\n   * ```js\r\n   * import { degrees, grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawSquare({\r\n   *   x: 25,\r\n   *   y: 75,\r\n   *   size: 100,\r\n   *   rotate: degrees(-15),\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the square.\r\n   */\r\n  drawSquare(options: PDFPageDrawSquareOptions = {}): void {\r\n    const { size } = options;\r\n    assertOrUndefined(size, 'size', ['number']);\r\n    this.drawRectangle({ ...options, width: size, height: size });\r\n  }\r\n\r\n  /**\r\n   * Draw an ellipse on this page. For example:\r\n   * ```js\r\n   * import { grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawEllipse({\r\n   *   x: 200,\r\n   *   y: 75,\r\n   *   xScale: 100,\r\n   *   yScale: 50,\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the ellipse.\r\n   */\r\n  drawEllipse(options: PDFPageDrawEllipseOptions = {}): void {\r\n    assertOrUndefined(options.x, 'options.x', ['number']);\r\n    assertOrUndefined(options.y, 'options.y', ['number']);\r\n    assertOrUndefined(options.xScale, 'options.xScale', ['number']);\r\n    assertOrUndefined(options.yScale, 'options.yScale', ['number']);\r\n    assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\r\n    assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\r\n    assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\r\n    assertOrUndefined(options.borderColor, 'options.borderColor', [\r\n      [Object, 'Color'],\r\n    ]);\r\n    assertRangeOrUndefined(\r\n      options.borderOpacity,\r\n      'options.borderOpacity',\r\n      0,\r\n      1,\r\n    );\r\n    assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\r\n    assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\r\n      Array,\r\n    ]);\r\n    assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\r\n      'number',\r\n    ]);\r\n    assertIsOneOfOrUndefined(\r\n      options.borderLineCap,\r\n      'options.borderLineCap',\r\n      LineCapStyle,\r\n    );\r\n    assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', BlendMode);\r\n    const graphicsStateKey = this.maybeEmbedGraphicsState({\r\n      opacity: options.opacity,\r\n      borderOpacity: options.borderOpacity,\r\n      blendMode: options.blendMode,\r\n    });\r\n\r\n    if (!('color' in options) && !('borderColor' in options)) {\r\n      options.color = rgb(0, 0, 0);\r\n    }\r\n\r\n    const contentStream = this.getContentStream();\r\n    contentStream.push(\r\n      ...drawEllipse({\r\n        x: options.x ?? this.x,\r\n        y: options.y ?? this.y,\r\n        xScale: options.xScale ?? 100,\r\n        yScale: options.yScale ?? 100,\r\n        rotate: options.rotate ?? undefined,\r\n        color: options.color ?? undefined,\r\n        borderColor: options.borderColor ?? undefined,\r\n        borderWidth: options.borderWidth ?? 0,\r\n        borderDashArray: options.borderDashArray ?? undefined,\r\n        borderDashPhase: options.borderDashPhase ?? undefined,\r\n        borderLineCap: options.borderLineCap ?? undefined,\r\n        graphicsState: graphicsStateKey,\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Draw a circle on this page. For example:\r\n   * ```js\r\n   * import { grayscale, rgb } from 'pdf-lib'\r\n   *\r\n   * page.drawCircle({\r\n   *   x: 200,\r\n   *   y: 150,\r\n   *   size: 100,\r\n   *   borderWidth: 5,\r\n   *   borderColor: grayscale(0.5),\r\n   *   color: rgb(0.75, 0.2, 0.2),\r\n   *   opacity: 0.5,\r\n   *   borderOpacity: 0.75,\r\n   * })\r\n   * ```\r\n   * @param options The options to be used when drawing the ellipse.\r\n   */\r\n  drawCircle(options: PDFPageDrawCircleOptions = {}): void {\r\n    const { size = 100 } = options;\r\n    assertOrUndefined(size, 'size', ['number']);\r\n    this.drawEllipse({ ...options, xScale: size, yScale: size });\r\n  }\r\n\r\n  private setOrEmbedFont(font?: PDFFont) {\r\n    const oldFont = this.font;\r\n    const oldFontKey = this.fontKey;\r\n\r\n    if (font) this.setFont(font);\r\n    else this.getFont();\r\n\r\n    const newFont = this.font!;\r\n    const newFontKey = this.fontKey!;\r\n\r\n    return { oldFont, oldFontKey, newFont, newFontKey };\r\n  }\r\n\r\n  private getFont(): [PDFFont, PDFName] {\r\n    if (!this.font || !this.fontKey) {\r\n      const font = this.doc.embedStandardFont(StandardFonts.Helvetica);\r\n      this.setFont(font);\r\n    }\r\n    return [this.font!, this.fontKey!];\r\n  }\r\n\r\n  private resetFont(): void {\r\n    this.font = undefined;\r\n    this.fontKey = undefined;\r\n  }\r\n\r\n  private getContentStream(useExisting = true): PDFContentStream {\r\n    if (useExisting && this.contentStream) return this.contentStream;\r\n    this.contentStream = this.createContentStream();\r\n    this.contentStreamRef = this.doc.context.register(this.contentStream);\r\n    this.node.addContentStream(this.contentStreamRef);\r\n    return this.contentStream;\r\n  }\r\n\r\n  private createContentStream(...operators: PDFOperator[]): PDFContentStream {\r\n    const dict = this.doc.context.obj({});\r\n    const contentStream = PDFContentStream.of(dict, operators);\r\n    return contentStream;\r\n  }\r\n\r\n  private maybeEmbedGraphicsState(options: {\r\n    opacity?: number;\r\n    borderOpacity?: number;\r\n    blendMode?: BlendMode;\r\n  }): PDFName | undefined {\r\n    const { opacity, borderOpacity, blendMode } = options;\r\n\r\n    if (\r\n      opacity === undefined &&\r\n      borderOpacity === undefined &&\r\n      blendMode === undefined\r\n    ) {\r\n      return undefined;\r\n    }\r\n\r\n    const graphicsState = this.doc.context.obj({\r\n      Type: 'ExtGState',\r\n      ca: opacity,\r\n      CA: borderOpacity,\r\n      BM: blendMode,\r\n    });\r\n\r\n    const key = this.node.newExtGState('GS', graphicsState);\r\n\r\n    return key;\r\n  }\r\n\r\n  private scaleAnnot(annot: PDFDict, x: number, y: number) {\r\n    const selectors = ['RD', 'CL', 'Vertices', 'QuadPoints', 'L', 'Rect'];\r\n    for (let idx = 0, len = selectors.length; idx < len; idx++) {\r\n      const list = annot.lookup(PDFName.of(selectors[idx]));\r\n      if (list instanceof PDFArray) list.scalePDFNumbers(x, y);\r\n    }\r\n\r\n    const inkLists = annot.lookup(PDFName.of('InkList'));\r\n    if (inkLists instanceof PDFArray) {\r\n      for (let idx = 0, len = inkLists.size(); idx < len; idx++) {\r\n        const arr = inkLists.lookup(idx);\r\n        if (arr instanceof PDFArray) arr.scalePDFNumbers(x, y);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}