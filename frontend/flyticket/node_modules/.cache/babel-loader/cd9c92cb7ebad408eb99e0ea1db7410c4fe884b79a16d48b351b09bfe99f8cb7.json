{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { PDFPageEmbedder, PDFRef } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\r\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\r\n */\nvar PDFEmbeddedPage = /** @class */function () {\n  function PDFEmbeddedPage(ref, doc, embedder) {\n    this.alreadyEmbedded = false;\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\r\n   * Compute the width and height of this page after being scaled by the\r\n   * given `factor`. For example:\r\n   * ```js\r\n   * embeddedPage.width  // => 500\r\n   * embeddedPage.height // => 250\r\n   *\r\n   * const scaled = embeddedPage.scale(0.5)\r\n   * scaled.width  // => 250\r\n   * scaled.height // => 125\r\n   * ```\r\n   * This operation is often useful before drawing a page with\r\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\r\n   * @param factor The factor by which this page should be scaled.\r\n   * @returns The width and height of the page after being scaled.\r\n   */\n  PDFEmbeddedPage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\r\n   * Get the width and height of this page. For example:\r\n   * ```js\r\n   * const { width, height } = embeddedPage.size()\r\n   * ```\r\n   * @returns The width and height of the page.\r\n   */\n  PDFEmbeddedPage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\r\n   * > **NOTE:** You probably don't need to call this method directly. The\r\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\r\n   * > automatically ensure all embeddable pages get embedded.\r\n   *\r\n   * Embed this embeddable page in its document.\r\n   *\r\n   * @returns Resolves when the embedding is complete.\r\n   */\n  PDFEmbeddedPage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n          case 1:\n            _a.sent();\n            this.alreadyEmbedded = true;\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.embedPdf]] and\r\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\r\n   * > [[PDFEmbeddedPage]] for you.\r\n   *\r\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\r\n   *\r\n   * @param ref The unique reference for this embedded page.\r\n   * @param doc The document to which the embedded page will belong.\r\n   * @param embedder The embedder that will be used to embed the page.\r\n   */\n  PDFEmbeddedPage.of = function (ref, doc, embedder) {\n    return new PDFEmbeddedPage(ref, doc, embedder);\n  };\n  return PDFEmbeddedPage;\n}();\nexport default PDFEmbeddedPage;","map":{"version":3,"names":["PDFDocument","PDFPageEmbedder","PDFRef","assertIs","PDFEmbeddedPage","ref","doc","embedder","alreadyEmbedded","width","height","prototype","scale","factor","size","embed","embedIntoContext","context","_a","sent","of"],"sources":["C:\\Users\\Uzer\\Desktop\\works\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\api\\PDFEmbeddedPage.ts"],"sourcesContent":["import Embeddable from 'src/api/Embeddable';\r\nimport PDFDocument from 'src/api/PDFDocument';\r\nimport { PDFPageEmbedder, PDFRef } from 'src/core';\r\nimport { assertIs } from 'src/utils';\r\n\r\n/**\r\n * Represents a PDF page that has been embedded in a [[PDFDocument]].\r\n */\r\nexport default class PDFEmbeddedPage implements Embeddable {\r\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.embedPdf]] and\r\n   * > [[PDFDocument.embedPage]] methods, which will create instances of\r\n   * > [[PDFEmbeddedPage]] for you.\r\n   *\r\n   * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\r\n   *\r\n   * @param ref The unique reference for this embedded page.\r\n   * @param doc The document to which the embedded page will belong.\r\n   * @param embedder The embedder that will be used to embed the page.\r\n   */\r\n  static of = (ref: PDFRef, doc: PDFDocument, embedder: PDFPageEmbedder) =>\r\n    new PDFEmbeddedPage(ref, doc, embedder);\r\n\r\n  /** The unique reference assigned to this embedded page within the document. */\r\n  readonly ref: PDFRef;\r\n\r\n  /** The document to which this embedded page belongs. */\r\n  readonly doc: PDFDocument;\r\n\r\n  /** The width of this page in pixels. */\r\n  readonly width: number;\r\n\r\n  /** The height of this page in pixels. */\r\n  readonly height: number;\r\n\r\n  private alreadyEmbedded = false;\r\n  private readonly embedder: PDFPageEmbedder;\r\n\r\n  private constructor(\r\n    ref: PDFRef,\r\n    doc: PDFDocument,\r\n    embedder: PDFPageEmbedder,\r\n  ) {\r\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\r\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\r\n    assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\r\n\r\n    this.ref = ref;\r\n    this.doc = doc;\r\n    this.width = embedder.width;\r\n    this.height = embedder.height;\r\n\r\n    this.embedder = embedder;\r\n  }\r\n\r\n  /**\r\n   * Compute the width and height of this page after being scaled by the\r\n   * given `factor`. For example:\r\n   * ```js\r\n   * embeddedPage.width  // => 500\r\n   * embeddedPage.height // => 250\r\n   *\r\n   * const scaled = embeddedPage.scale(0.5)\r\n   * scaled.width  // => 250\r\n   * scaled.height // => 125\r\n   * ```\r\n   * This operation is often useful before drawing a page with\r\n   * [[PDFPage.drawPage]] to compute the `width` and `height` options.\r\n   * @param factor The factor by which this page should be scaled.\r\n   * @returns The width and height of the page after being scaled.\r\n   */\r\n  scale(factor: number) {\r\n    assertIs(factor, 'factor', ['number']);\r\n    return { width: this.width * factor, height: this.height * factor };\r\n  }\r\n\r\n  /**\r\n   * Get the width and height of this page. For example:\r\n   * ```js\r\n   * const { width, height } = embeddedPage.size()\r\n   * ```\r\n   * @returns The width and height of the page.\r\n   */\r\n  size() {\r\n    return this.scale(1);\r\n  }\r\n\r\n  /**\r\n   * > **NOTE:** You probably don't need to call this method directly. The\r\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\r\n   * > automatically ensure all embeddable pages get embedded.\r\n   *\r\n   * Embed this embeddable page in its document.\r\n   *\r\n   * @returns Resolves when the embedding is complete.\r\n   */\r\n  async embed(): Promise<void> {\r\n    if (!this.alreadyEmbedded) {\r\n      await this.embedder.embedIntoContext(this.doc.context, this.ref);\r\n      this.alreadyEmbedded = true;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AACA,OAAOA,WAAW;AAClB,SAASC,eAAe,EAAEC,MAAM,QAAE;AAClC,SAASC,QAAQ,QAAE;AAEnB;;;AAGA,IAAAC,eAAA;EA+BE,SAAAA,gBACEC,GAAW,EACXC,GAAgB,EAChBC,QAAyB;IANnB,KAAAC,eAAe,GAAG,KAAK;IAQ7BL,QAAQ,CAACE,GAAG,EAAE,KAAK,EAAE,CAAC,CAACH,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC1CC,QAAQ,CAACG,GAAG,EAAE,KAAK,EAAE,CAAC,CAACN,WAAW,EAAE,aAAa,CAAC,CAAC,CAAC;IACpDG,QAAQ,CAACI,QAAQ,EAAE,UAAU,EAAE,CAAC,CAACN,eAAe,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAEtE,IAAI,CAACI,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACG,KAAK,GAAGF,QAAQ,CAACE,KAAK;IAC3B,IAAI,CAACC,MAAM,GAAGH,QAAQ,CAACG,MAAM;IAE7B,IAAI,CAACH,QAAQ,GAAGA,QAAQ;EAC1B;EAEA;;;;;;;;;;;;;;;;EAgBAH,eAAA,CAAAO,SAAA,CAAAC,KAAK,GAAL,UAAMC,MAAc;IAClBV,QAAQ,CAACU,MAAM,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC;IACtC,OAAO;MAAEJ,KAAK,EAAE,IAAI,CAACA,KAAK,GAAGI,MAAM;MAAEH,MAAM,EAAE,IAAI,CAACA,MAAM,GAAGG;IAAM,CAAE;EACrE,CAAC;EAED;;;;;;;EAOAT,eAAA,CAAAO,SAAA,CAAAG,IAAI,GAAJ;IACE,OAAO,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC;EACtB,CAAC;EAED;;;;;;;;;EASMR,eAAA,CAAAO,SAAA,CAAAI,KAAK,GAAX;;;;;iBACM,CAAC,IAAI,CAACP,eAAe,EAArB;YACF,qBAAM,IAAI,CAACD,QAAQ,CAACS,gBAAgB,CAAC,IAAI,CAACV,GAAG,CAACW,OAAO,EAAE,IAAI,CAACZ,GAAG,CAAC;;YAAhEa,EAAA,CAAAC,IAAA,EAAgE;YAChE,IAAI,CAACX,eAAe,GAAG,IAAI;;;;;;;GAE9B;EA7FD;;;;;;;;;;;;EAYOJ,eAAA,CAAAgB,EAAE,GAAG,UAACf,GAAW,EAAEC,GAAgB,EAAEC,QAAyB;IACnE,WAAIH,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,CAAC;EAAvC,CAAuC;EAiF3C,OAAAH,eAAC;CAAA,CA/FD;eAAqBA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}