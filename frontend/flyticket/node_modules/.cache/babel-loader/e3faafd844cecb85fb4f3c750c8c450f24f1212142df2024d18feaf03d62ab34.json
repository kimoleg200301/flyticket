{"ast":null,"code":"/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\nvar Stream = /** @class */function () {\n  function Stream(buffer, start, length) {\n    this.bytes = buffer;\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = !!start && !!length ? start + length : this.bytes.length;\n  }\n  Object.defineProperty(Stream.prototype, \"length\", {\n    get: function () {\n      return this.end - this.start;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Stream.prototype, \"isEmpty\", {\n    get: function () {\n      return this.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Stream.prototype.getByte = function () {\n    if (this.pos >= this.end) {\n      return -1;\n    }\n    return this.bytes[this.pos++];\n  };\n  Stream.prototype.getUint16 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n    return (b0 << 8) + b1;\n  };\n  Stream.prototype.getInt32 = function () {\n    var b0 = this.getByte();\n    var b1 = this.getByte();\n    var b2 = this.getByte();\n    var b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  };\n  // Returns subarray of original buffer, should only be read.\n  Stream.prototype.getBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.bytes;\n    var pos = this.pos;\n    var strEnd = this.end;\n    if (!length) {\n      var subarray = bytes.subarray(pos, strEnd);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    } else {\n      var end = pos + length;\n      if (end > strEnd) {\n        end = strEnd;\n      }\n      this.pos = end;\n      var subarray = bytes.subarray(pos, end);\n      // `this.bytes` is always a `Uint8Array` here.\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n  };\n  Stream.prototype.peekByte = function () {\n    var peekedByte = this.getByte();\n    this.pos--;\n    return peekedByte;\n  };\n  Stream.prototype.peekBytes = function (length, forceClamped) {\n    if (forceClamped === void 0) {\n      forceClamped = false;\n    }\n    var bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  };\n  Stream.prototype.skip = function (n) {\n    if (!n) {\n      n = 1;\n    }\n    this.pos += n;\n  };\n  Stream.prototype.reset = function () {\n    this.pos = this.start;\n  };\n  Stream.prototype.moveStart = function () {\n    this.start = this.pos;\n  };\n  Stream.prototype.makeSubStream = function (start, length) {\n    return new Stream(this.bytes, start, length);\n  };\n  Stream.prototype.decode = function () {\n    return this.bytes;\n  };\n  return Stream;\n}();\nexport default Stream;","map":{"version":3,"names":["Stream","buffer","start","length","bytes","pos","end","Object","defineProperty","prototype","get","getByte","getUint16","b0","b1","getInt32","b2","b3","getBytes","forceClamped","strEnd","subarray","Uint8ClampedArray","peekByte","peekedByte","peekBytes","skip","n","reset","moveStart","makeSubStream","decode"],"sources":["C:\\Users\\Uzer\\Desktop\\works\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\core\\streams\\Stream.ts"],"sourcesContent":["/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\r\n\r\nexport interface StreamType {\r\n  isEmpty: boolean;\r\n  getByte(): number;\r\n  getUint16(): number;\r\n  getInt32(): number;\r\n  getBytes(\r\n    length: number,\r\n    forceClamped?: boolean,\r\n  ): Uint8Array | Uint8ClampedArray;\r\n  peekByte(): number;\r\n  peekBytes(\r\n    length: number,\r\n    forceClamped?: boolean,\r\n  ): Uint8Array | Uint8ClampedArray;\r\n  skip(n: number): void;\r\n  reset(): void;\r\n  makeSubStream(start: number, length: number): StreamType;\r\n  decode(): Uint8Array;\r\n}\r\n\r\nclass Stream implements StreamType {\r\n  private bytes: Uint8Array;\r\n  private start: number;\r\n  private pos: number;\r\n  private end: number;\r\n\r\n  constructor(buffer: Uint8Array, start?: number, length?: number) {\r\n    this.bytes = buffer;\r\n    this.start = start || 0;\r\n    this.pos = this.start;\r\n    this.end = !!start && !!length ? start + length : this.bytes.length;\r\n  }\r\n\r\n  get length() {\r\n    return this.end - this.start;\r\n  }\r\n\r\n  get isEmpty() {\r\n    return this.length === 0;\r\n  }\r\n\r\n  getByte() {\r\n    if (this.pos >= this.end) {\r\n      return -1;\r\n    }\r\n    return this.bytes[this.pos++];\r\n  }\r\n\r\n  getUint16() {\r\n    const b0 = this.getByte();\r\n    const b1 = this.getByte();\r\n    if (b0 === -1 || b1 === -1) {\r\n      return -1;\r\n    }\r\n    return (b0 << 8) + b1;\r\n  }\r\n\r\n  getInt32() {\r\n    const b0 = this.getByte();\r\n    const b1 = this.getByte();\r\n    const b2 = this.getByte();\r\n    const b3 = this.getByte();\r\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n  }\r\n\r\n  // Returns subarray of original buffer, should only be read.\r\n  getBytes(length: number, forceClamped = false) {\r\n    const bytes = this.bytes;\r\n    const pos = this.pos;\r\n    const strEnd = this.end;\r\n\r\n    if (!length) {\r\n      const subarray = bytes.subarray(pos, strEnd);\r\n      // `this.bytes` is always a `Uint8Array` here.\r\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n    } else {\r\n      let end = pos + length;\r\n      if (end > strEnd) {\r\n        end = strEnd;\r\n      }\r\n      this.pos = end;\r\n      const subarray = bytes.subarray(pos, end);\r\n      // `this.bytes` is always a `Uint8Array` here.\r\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n    }\r\n  }\r\n\r\n  peekByte() {\r\n    const peekedByte = this.getByte();\r\n    this.pos--;\r\n    return peekedByte;\r\n  }\r\n\r\n  peekBytes(length: number, forceClamped = false) {\r\n    const bytes = this.getBytes(length, forceClamped);\r\n    this.pos -= bytes.length;\r\n    return bytes;\r\n  }\r\n\r\n  skip(n: number) {\r\n    if (!n) {\r\n      n = 1;\r\n    }\r\n    this.pos += n;\r\n  }\r\n\r\n  reset() {\r\n    this.pos = this.start;\r\n  }\r\n\r\n  moveStart() {\r\n    this.start = this.pos;\r\n  }\r\n\r\n  makeSubStream(start: number, length: number) {\r\n    return new Stream(this.bytes, start, length);\r\n  }\r\n\r\n  decode(): Uint8Array {\r\n    return this.bytes;\r\n  }\r\n}\r\n\r\nexport default Stream;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}