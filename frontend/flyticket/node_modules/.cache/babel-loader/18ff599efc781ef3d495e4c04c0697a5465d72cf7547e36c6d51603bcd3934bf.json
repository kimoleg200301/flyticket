{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultOptionListAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFHexString, PDFStream, PDFAcroListBox, AcroChoiceFlags } from \"../../core\";\nimport { assertIs, assertIsSubset, assertOrUndefined, assertPositive } from \"../../utils\";\n/**\r\n * Represents an option list field of a [[PDFForm]].\r\n *\r\n * [[PDFOptionList]] fields are interactive lists of options. The purpose of an\r\n * option list is to enable users to select one or more options from a set of\r\n * possible options. Users are able to see the full set of options without\r\n * first having to click on the field (though scrolling may be necessary).\r\n * Clicking an option in the list will cause it to be selected and displayed\r\n * with a highlighted background. Some option lists allow users to select\r\n * more than one option (see [[PDFOptionList.isMultiselect]]).\r\n */\nvar PDFOptionList = /** @class */function (_super) {\n  __extends(PDFOptionList, _super);\n  function PDFOptionList(acroListBox, ref, doc) {\n    var _this = _super.call(this, acroListBox, ref, doc) || this;\n    assertIs(acroListBox, 'acroListBox', [[PDFAcroListBox, 'PDFAcroListBox']]);\n    _this.acroField = acroListBox;\n    return _this;\n  }\n  /**\r\n   * Get the list of available options for this option list. These options will\r\n   * be displayed to users who view this option list in a PDF reader.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * const options = optionList.getOptions()\r\n   * console.log('Option List options:', options)\r\n   * ```\r\n   * @returns The options for this option list.\r\n   */\n  PDFOptionList.prototype.getOptions = function () {\n    var rawOptions = this.acroField.getOptions();\n    var options = new Array(rawOptions.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      var _a = rawOptions[idx],\n        display = _a.display,\n        value = _a.value;\n      options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n    }\n    return options;\n  };\n  /**\r\n   * Get the selected options for this option list. These are the values that\r\n   * were selected by a human user via a PDF reader, or programatically via\r\n   * software.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * const selections = optionList.getSelected()\r\n   * console.log('Option List selections:', selections)\r\n   * ```\r\n   * @returns The selected options for this option list.\r\n   */\n  PDFOptionList.prototype.getSelected = function () {\n    var values = this.acroField.getValues();\n    var selected = new Array(values.length);\n    for (var idx = 0, len = values.length; idx < len; idx++) {\n      selected[idx] = values[idx].decodeText();\n    }\n    return selected;\n  };\n  /**\r\n   * Set the list of options that are available for this option list. These are\r\n   * the values that will be available for users to select when they view this\r\n   * option list in a PDF reader. Note that preexisting options for this\r\n   * option list will be removed. Only the values passed as `options` will be\r\n   * available to select.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('planets.optionList')\r\n   * optionList.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\r\n   * ```\r\n   *\r\n   * This method will mark this option list as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\r\n   * display the options this field contains inside the widgets of this text\r\n   * field (with selected options highlighted).\r\n   *\r\n   * **IMPORTANT:** The default font used to update appearance streams is\r\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\r\n   * that encoding errors will be thrown if this field contains any options\r\n   * with characters outside the WinAnsi character set (the latin alphabet).\r\n   *\r\n   * Embedding a custom font and passing it to\r\n   * [[PDFForm.updateFieldAppearances]] or [[PDFOptionList.updateAppearances]]\r\n   * allows you to generate appearance streams with characters outside the\r\n   * latin alphabet (assuming the custom font supports them).\r\n   *\r\n   * @param options The options that should be available in this option list.\r\n   */\n  PDFOptionList.prototype.setOptions = function (options) {\n    assertIs(options, 'options', [Array]);\n    this.markAsDirty();\n    var optionObjects = new Array(options.length);\n    for (var idx = 0, len = options.length; idx < len; idx++) {\n      optionObjects[idx] = {\n        value: PDFHexString.fromText(options[idx])\n      };\n    }\n    this.acroField.setOptions(optionObjects);\n  };\n  /**\r\n   * Add to the list of options that are available for this option list. Users\r\n   * will be able to select these values in a PDF reader. In addition to the\r\n   * values passed as `options`, any preexisting options for this option list\r\n   * will still be available for users to select.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('rockets.optionList')\r\n   * optionList.addOptions(['Saturn IV', 'Falcon Heavy'])\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   * @param options New options that should be available in this option list.\r\n   */\n  PDFOptionList.prototype.addOptions = function (options) {\n    assertIs(options, 'options', ['string', Array]);\n    this.markAsDirty();\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var existingOptions = this.acroField.getOptions();\n    var newOptions = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      newOptions[idx] = {\n        value: PDFHexString.fromText(optionsArr[idx])\n      };\n    }\n    this.acroField.setOptions(existingOptions.concat(newOptions));\n  };\n  /**\r\n   * Select one or more values for this option list. This operation is analogous\r\n   * to a human user opening the option list in a PDF reader and clicking on one\r\n   * or more values to select them. This method will update the underlying state\r\n   * of the option list to indicate which values have been selected. PDF\r\n   * libraries and readers will be able to extract these values from the saved\r\n   * document and determine which values were selected.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('best.superheroes.optionList')\r\n   * optionList.select(['One Punch Man', 'Iron Man'])\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   * @param options The options to be selected.\r\n   * @param merge Whether or not existing selections should be preserved.\r\n   */\n  PDFOptionList.prototype.select = function (options, merge) {\n    if (merge === void 0) {\n      merge = false;\n    }\n    assertIs(options, 'options', ['string', Array]);\n    assertIs(merge, 'merge', ['boolean']);\n    var optionsArr = Array.isArray(options) ? options : [options];\n    var validOptions = this.getOptions();\n    assertIsSubset(optionsArr, 'option', validOptions);\n    this.markAsDirty();\n    if (optionsArr.length > 1 || optionsArr.length === 1 && merge) {\n      this.enableMultiselect();\n    }\n    var values = new Array(optionsArr.length);\n    for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\n    }\n    if (merge) {\n      var existingValues = this.acroField.getValues();\n      this.acroField.setValues(existingValues.concat(values));\n    } else {\n      this.acroField.setValues(values);\n    }\n  };\n  /**\r\n   * Clear all selected values for this option list. This operation is\r\n   * equivalent to selecting an empty list. This method will update the\r\n   * underlying state of the option list to indicate that no values have been\r\n   * selected.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.clear()\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   */\n  PDFOptionList.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValues([]);\n  };\n  /**\r\n   * Set the font size for the text in this field. There needs to be a\r\n   * default appearance string (DA) set with a font value specified\r\n   * for this to work. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.setFontSize(4);\r\n   * ```\r\n   * @param fontSize The font size to set the font to.\r\n   */\n  /**\r\n   * Set the font size for this field. Larger font sizes will result in larger\r\n   * text being displayed when PDF readers render this option list. Font sizes\r\n   * may be integer or floating point numbers. Supplying a negative font size\r\n   * will cause this method to throw an error.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.setFontSize(4)\r\n   * optionList.setFontSize(15.7)\r\n   * ```\r\n   *\r\n   * > This method depends upon the existence of a default appearance\r\n   * > (`/DA`) string. If this field does not have a default appearance string,\r\n   * > or that string does not contain a font size (via the `Tf` operator),\r\n   * > then this method will throw an error.\r\n   *\r\n   * @param fontSize The font size to be used when rendering text in this field.\r\n   */\n  PDFOptionList.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\r\n   * Returns `true` if the options of this option list are always displayed\r\n   * in alphabetical order, irrespective of the order in which the options\r\n   * were added to the option list. See [[PDFOptionList.enableSorting]] and\r\n   * [[PDFOptionList.disableSorting]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isSorted()) console.log('Sorting is enabled')\r\n   * ```\r\n   * @returns Whether or not this option list is sorted.\r\n   */\n  PDFOptionList.prototype.isSorted = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\n  };\n  /**\r\n   * Always display the options of this option list in alphabetical order,\r\n   * irrespective of the order in which the options were added to this option\r\n   * list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableSorting()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.enableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\n  };\n  /**\r\n   * Do not always display the options of this option list in alphabetical\r\n   * order. Instead, display the options in whichever order they were added\r\n   * to this option list. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableSorting()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.disableSorting = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\n  };\n  /**\r\n   * Returns `true` if multiple options can be selected from this option list.\r\n   * See [[PDFOptionList.enableMultiselect]] and\r\n   * [[PDFOptionList.disableMultiselect]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isMultiselect()) console.log('Multiselect is enabled')\r\n   * ```\r\n   * @returns Whether or not multiple options can be selected.\r\n   */\n  PDFOptionList.prototype.isMultiselect = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\n  };\n  /**\r\n   * Allow users to select more than one option from this option list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableMultiselect()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.enableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\n  };\n  /**\r\n   * Do not allow users to select more than one option from this option list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableMultiselect()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.disableMultiselect = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\n  };\n  /**\r\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\r\n   * when the user clicks the option. The alternative is that the user's\r\n   * selection is stored when the user leaves this option list field (by\r\n   * clicking outside of it - on another field, for example). See\r\n   * [[PDFOptionList.enableSelectOnClick]] and\r\n   * [[PDFOptionList.disableSelectOnClick]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isSelectOnClick()) console.log('Select on click is enabled')\r\n   * ```\r\n   * @returns Whether or not options are selected immediately after they are\r\n   *          clicked.\r\n   */\n  PDFOptionList.prototype.isSelectOnClick = function () {\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\n  };\n  /**\r\n   * Store the option selected by a user immediately after the user clicks the\r\n   * option. Do not wait for the user to leave this option list field (by\r\n   * clicking outside of it - on another field, for example). For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableSelectOnClick()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.enableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\n  };\n  /**\r\n   * Wait to store the option selected by a user until they leave this option\r\n   * list field (by clicking outside of it - on another field, for example).\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableSelectOnClick()\r\n   * ```\r\n   */\n  PDFOptionList.prototype.disableSelectOnClick = function () {\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\n  };\n  /**\r\n   * Show this option list on the specified page. For example:\r\n   * ```js\r\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const optionList = form.createOptionList('best.gundams')\r\n   * optionList.setOptions(['Exia', 'Dynames', 'Kyrios', 'Virtue'])\r\n   * optionList.select(['Exia', 'Virtue'])\r\n   *\r\n   * optionList.addToPage(page, {\r\n   *   x: 50,\r\n   *   y: 75,\r\n   *   width: 200,\r\n   *   height: 100,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   *   font: ubuntuFont,\r\n   * })\r\n   * ```\r\n   * This will create a new widget for this option list field.\r\n   * @param page The page to which this option list widget should be added.\r\n   * @param options The options to be used when adding this option list widget.\r\n   */\n  PDFOptionList.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this option list\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if this option list has been marked as dirty, or if any of\r\n   * this option list's widgets do not have an appearance stream. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this option list needs an appearance update.\r\n   */\n  PDFOptionList.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this option list's widgets using\r\n   * the default appearance provider for option lists. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.defaultUpdateAppearances(helvetica)\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   */\n  PDFOptionList.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\r\n   * Update the appearance streams for each of this option list's widgets using\r\n   * the given appearance provider. If no `provider` is passed, the default\r\n   * appearance provider for option lists will be used. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.updateAppearances(helvetica, (field, widget, font) => {\r\n   *   ...\r\n   *   return drawOptionList(...)\r\n   * })\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n  PDFOptionList.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  // getOption(index: number): string {}\n  // getSelectedIndices(): number[] {}\n  // removeOptions(option: string | string[]) {}\n  // removeIndices(option: number[]) {}\n  // deselect(options: string | string[]) {}\n  // deselectIndices(optionIndices: number[]) {}\n  PDFOptionList.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultOptionListAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getOptionList]] method, which will create\r\n   * > an instance of [[PDFOptionList]] for you.\r\n   *\r\n   * Create an instance of [[PDFOptionList]] from an existing acroListBox and\r\n   * ref\r\n   *\r\n   * @param acroComboBox The underlying `PDFAcroListBox` for this option list.\r\n   * @param ref The unique reference for this option list.\r\n   * @param doc The document to which this option list will belong.\r\n   */\n  PDFOptionList.of = function (acroListBox, ref, doc) {\n    return new PDFOptionList(acroListBox, ref, doc);\n  };\n  return PDFOptionList;\n}(PDFField);\nexport default PDFOptionList;","map":{"version":3,"names":["PDFPage","PDFFont","PDFField","assertFieldAppearanceOptions","normalizeAppearance","defaultOptionListAppearanceProvider","rgb","degrees","PDFHexString","PDFStream","PDFAcroListBox","AcroChoiceFlags","assertIs","assertIsSubset","assertOrUndefined","assertPositive","PDFOptionList","_super","__extends","acroListBox","ref","doc","_this","call","acroField","prototype","getOptions","rawOptions","options","Array","length","idx","len","_a","display","value","decodeText","getSelected","values","getValues","selected","setOptions","markAsDirty","optionObjects","fromText","addOptions","optionsArr","isArray","existingOptions","newOptions","concat","select","merge","validOptions","enableMultiselect","existingValues","setValues","clear","setFontSize","fontSize","isSorted","hasFlag","Sort","enableSorting","setFlagTo","disableSorting","isMultiselect","MultiSelect","disableMultiselect","isSelectOnClick","CommitOnSelChange","enableSelectOnClick","disableSelectOnClick","addToPage","page","textColor","backgroundColor","borderColor","borderWidth","widget","createWidget","x","y","_b","width","_c","height","_d","_e","rotate","_f","hidden","widgetRef","context","register","dict","addWidget","font","_g","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","isDirty","widgets","getWidgets","hasAppearances","getAppearances","normal","defaultUpdateAppearances","updateAppearances","provider","Function","markAsClean","apProvider","appearances","updateWidgetAppearanceWithFont","of"],"sources":["C:\\oleg\\flyticket\\frontend\\flyticket\\node_modules\\pdf-lib\\src\\api\\form\\PDFOptionList.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\r\nimport PDFPage from 'src/api/PDFPage';\r\nimport PDFFont from 'src/api/PDFFont';\r\nimport PDFField, {\r\n  FieldAppearanceOptions,\r\n  assertFieldAppearanceOptions,\r\n} from 'src/api/form/PDFField';\r\nimport {\r\n  AppearanceProviderFor,\r\n  normalizeAppearance,\r\n  defaultOptionListAppearanceProvider,\r\n} from 'src/api/form/appearances';\r\nimport { rgb } from 'src/api/colors';\r\nimport { degrees } from 'src/api/rotations';\r\n\r\nimport {\r\n  PDFRef,\r\n  PDFHexString,\r\n  PDFString,\r\n  PDFStream,\r\n  PDFAcroListBox,\r\n  AcroChoiceFlags,\r\n  PDFWidgetAnnotation,\r\n} from 'src/core';\r\nimport {\r\n  assertIs,\r\n  assertIsSubset,\r\n  assertOrUndefined,\r\n  assertPositive,\r\n} from 'src/utils';\r\n\r\n/**\r\n * Represents an option list field of a [[PDFForm]].\r\n *\r\n * [[PDFOptionList]] fields are interactive lists of options. The purpose of an\r\n * option list is to enable users to select one or more options from a set of\r\n * possible options. Users are able to see the full set of options without\r\n * first having to click on the field (though scrolling may be necessary).\r\n * Clicking an option in the list will cause it to be selected and displayed\r\n * with a highlighted background. Some option lists allow users to select\r\n * more than one option (see [[PDFOptionList.isMultiselect]]).\r\n */\r\nexport default class PDFOptionList extends PDFField {\r\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getOptionList]] method, which will create\r\n   * > an instance of [[PDFOptionList]] for you.\r\n   *\r\n   * Create an instance of [[PDFOptionList]] from an existing acroListBox and\r\n   * ref\r\n   *\r\n   * @param acroComboBox The underlying `PDFAcroListBox` for this option list.\r\n   * @param ref The unique reference for this option list.\r\n   * @param doc The document to which this option list will belong.\r\n   */\r\n  static of = (acroListBox: PDFAcroListBox, ref: PDFRef, doc: PDFDocument) =>\r\n    new PDFOptionList(acroListBox, ref, doc);\r\n\r\n  /** The low-level PDFAcroListBox wrapped by this option list. */\r\n  readonly acroField: PDFAcroListBox;\r\n\r\n  private constructor(\r\n    acroListBox: PDFAcroListBox,\r\n    ref: PDFRef,\r\n    doc: PDFDocument,\r\n  ) {\r\n    super(acroListBox, ref, doc);\r\n\r\n    assertIs(acroListBox, 'acroListBox', [[PDFAcroListBox, 'PDFAcroListBox']]);\r\n\r\n    this.acroField = acroListBox;\r\n  }\r\n\r\n  /**\r\n   * Get the list of available options for this option list. These options will\r\n   * be displayed to users who view this option list in a PDF reader.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * const options = optionList.getOptions()\r\n   * console.log('Option List options:', options)\r\n   * ```\r\n   * @returns The options for this option list.\r\n   */\r\n  getOptions(): string[] {\r\n    const rawOptions = this.acroField.getOptions();\r\n\r\n    const options = new Array<string>(rawOptions.length);\r\n    for (let idx = 0, len = options.length; idx < len; idx++) {\r\n      const { display, value } = rawOptions[idx];\r\n      options[idx] = (display ?? value).decodeText();\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Get the selected options for this option list. These are the values that\r\n   * were selected by a human user via a PDF reader, or programatically via\r\n   * software.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * const selections = optionList.getSelected()\r\n   * console.log('Option List selections:', selections)\r\n   * ```\r\n   * @returns The selected options for this option list.\r\n   */\r\n  getSelected(): string[] {\r\n    const values = this.acroField.getValues();\r\n\r\n    const selected = new Array<string>(values.length);\r\n    for (let idx = 0, len = values.length; idx < len; idx++) {\r\n      selected[idx] = values[idx].decodeText();\r\n    }\r\n\r\n    return selected;\r\n  }\r\n\r\n  /**\r\n   * Set the list of options that are available for this option list. These are\r\n   * the values that will be available for users to select when they view this\r\n   * option list in a PDF reader. Note that preexisting options for this\r\n   * option list will be removed. Only the values passed as `options` will be\r\n   * available to select.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('planets.optionList')\r\n   * optionList.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\r\n   * ```\r\n   *\r\n   * This method will mark this option list as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\r\n   * display the options this field contains inside the widgets of this text\r\n   * field (with selected options highlighted).\r\n   *\r\n   * **IMPORTANT:** The default font used to update appearance streams is\r\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\r\n   * that encoding errors will be thrown if this field contains any options\r\n   * with characters outside the WinAnsi character set (the latin alphabet).\r\n   *\r\n   * Embedding a custom font and passing it to\r\n   * [[PDFForm.updateFieldAppearances]] or [[PDFOptionList.updateAppearances]]\r\n   * allows you to generate appearance streams with characters outside the\r\n   * latin alphabet (assuming the custom font supports them).\r\n   *\r\n   * @param options The options that should be available in this option list.\r\n   */\r\n  setOptions(options: string[]) {\r\n    assertIs(options, 'options', [Array]);\r\n\r\n    this.markAsDirty();\r\n    const optionObjects = new Array<{ value: PDFHexString }>(options.length);\r\n    for (let idx = 0, len = options.length; idx < len; idx++) {\r\n      optionObjects[idx] = { value: PDFHexString.fromText(options[idx]) };\r\n    }\r\n    this.acroField.setOptions(optionObjects);\r\n  }\r\n\r\n  /**\r\n   * Add to the list of options that are available for this option list. Users\r\n   * will be able to select these values in a PDF reader. In addition to the\r\n   * values passed as `options`, any preexisting options for this option list\r\n   * will still be available for users to select.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('rockets.optionList')\r\n   * optionList.addOptions(['Saturn IV', 'Falcon Heavy'])\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   * @param options New options that should be available in this option list.\r\n   */\r\n  addOptions(options: string | string[]) {\r\n    assertIs(options, 'options', ['string', Array]);\r\n\r\n    this.markAsDirty();\r\n\r\n    const optionsArr = Array.isArray(options) ? options : [options];\r\n\r\n    const existingOptions: {\r\n      value: PDFString | PDFHexString;\r\n      display?: PDFString | PDFHexString;\r\n    }[] = this.acroField.getOptions();\r\n\r\n    const newOptions = new Array<{ value: PDFHexString }>(optionsArr.length);\r\n    for (let idx = 0, len = optionsArr.length; idx < len; idx++) {\r\n      newOptions[idx] = { value: PDFHexString.fromText(optionsArr[idx]) };\r\n    }\r\n\r\n    this.acroField.setOptions(existingOptions.concat(newOptions));\r\n  }\r\n\r\n  /**\r\n   * Select one or more values for this option list. This operation is analogous\r\n   * to a human user opening the option list in a PDF reader and clicking on one\r\n   * or more values to select them. This method will update the underlying state\r\n   * of the option list to indicate which values have been selected. PDF\r\n   * libraries and readers will be able to extract these values from the saved\r\n   * document and determine which values were selected.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('best.superheroes.optionList')\r\n   * optionList.select(['One Punch Man', 'Iron Man'])\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   * @param options The options to be selected.\r\n   * @param merge Whether or not existing selections should be preserved.\r\n   */\r\n  select(options: string | string[], merge = false) {\r\n    assertIs(options, 'options', ['string', Array]);\r\n    assertIs(merge, 'merge', ['boolean']);\r\n\r\n    const optionsArr = Array.isArray(options) ? options : [options];\r\n\r\n    const validOptions = this.getOptions();\r\n    assertIsSubset(optionsArr, 'option', validOptions);\r\n\r\n    this.markAsDirty();\r\n\r\n    if (optionsArr.length > 1 || (optionsArr.length === 1 && merge)) {\r\n      this.enableMultiselect();\r\n    }\r\n\r\n    const values = new Array<PDFHexString>(optionsArr.length);\r\n    for (let idx = 0, len = optionsArr.length; idx < len; idx++) {\r\n      values[idx] = PDFHexString.fromText(optionsArr[idx]);\r\n    }\r\n\r\n    if (merge) {\r\n      const existingValues = this.acroField.getValues();\r\n      this.acroField.setValues(existingValues.concat(values));\r\n    } else {\r\n      this.acroField.setValues(values);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all selected values for this option list. This operation is\r\n   * equivalent to selecting an empty list. This method will update the\r\n   * underlying state of the option list to indicate that no values have been\r\n   * selected.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.clear()\r\n   * ```\r\n   * This method will mark this option list as dirty. See\r\n   * [[PDFOptionList.setOptions]] for more details about what this means.\r\n   */\r\n  clear() {\r\n    this.markAsDirty();\r\n    this.acroField.setValues([]);\r\n  }\r\n\r\n  /**\r\n   * Set the font size for the text in this field. There needs to be a\r\n   * default appearance string (DA) set with a font value specified\r\n   * for this to work. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.setFontSize(4);\r\n   * ```\r\n   * @param fontSize The font size to set the font to.\r\n   */\r\n\r\n  /**\r\n   * Set the font size for this field. Larger font sizes will result in larger\r\n   * text being displayed when PDF readers render this option list. Font sizes\r\n   * may be integer or floating point numbers. Supplying a negative font size\r\n   * will cause this method to throw an error.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.setFontSize(4)\r\n   * optionList.setFontSize(15.7)\r\n   * ```\r\n   *\r\n   * > This method depends upon the existence of a default appearance\r\n   * > (`/DA`) string. If this field does not have a default appearance string,\r\n   * > or that string does not contain a font size (via the `Tf` operator),\r\n   * > then this method will throw an error.\r\n   *\r\n   * @param fontSize The font size to be used when rendering text in this field.\r\n   */\r\n  setFontSize(fontSize: number) {\r\n    assertPositive(fontSize, 'fontSize');\r\n    this.acroField.setFontSize(fontSize);\r\n    this.markAsDirty();\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the options of this option list are always displayed\r\n   * in alphabetical order, irrespective of the order in which the options\r\n   * were added to the option list. See [[PDFOptionList.enableSorting]] and\r\n   * [[PDFOptionList.disableSorting]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isSorted()) console.log('Sorting is enabled')\r\n   * ```\r\n   * @returns Whether or not this option list is sorted.\r\n   */\r\n  isSorted(): boolean {\r\n    return this.acroField.hasFlag(AcroChoiceFlags.Sort);\r\n  }\r\n\r\n  /**\r\n   * Always display the options of this option list in alphabetical order,\r\n   * irrespective of the order in which the options were added to this option\r\n   * list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableSorting()\r\n   * ```\r\n   */\r\n  enableSorting() {\r\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, true);\r\n  }\r\n\r\n  /**\r\n   * Do not always display the options of this option list in alphabetical\r\n   * order. Instead, display the options in whichever order they were added\r\n   * to this option list. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableSorting()\r\n   * ```\r\n   */\r\n  disableSorting() {\r\n    this.acroField.setFlagTo(AcroChoiceFlags.Sort, false);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if multiple options can be selected from this option list.\r\n   * See [[PDFOptionList.enableMultiselect]] and\r\n   * [[PDFOptionList.disableMultiselect]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isMultiselect()) console.log('Multiselect is enabled')\r\n   * ```\r\n   * @returns Whether or not multiple options can be selected.\r\n   */\r\n  isMultiselect(): boolean {\r\n    return this.acroField.hasFlag(AcroChoiceFlags.MultiSelect);\r\n  }\r\n\r\n  /**\r\n   * Allow users to select more than one option from this option list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableMultiselect()\r\n   * ```\r\n   */\r\n  enableMultiselect() {\r\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, true);\r\n  }\r\n\r\n  /**\r\n   * Do not allow users to select more than one option from this option list.\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableMultiselect()\r\n   * ```\r\n   */\r\n  disableMultiselect() {\r\n    this.acroField.setFlagTo(AcroChoiceFlags.MultiSelect, false);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the option selected by a user is stored, or \"committed\",\r\n   * when the user clicks the option. The alternative is that the user's\r\n   * selection is stored when the user leaves this option list field (by\r\n   * clicking outside of it - on another field, for example). See\r\n   * [[PDFOptionList.enableSelectOnClick]] and\r\n   * [[PDFOptionList.disableSelectOnClick]]. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.isSelectOnClick()) console.log('Select on click is enabled')\r\n   * ```\r\n   * @returns Whether or not options are selected immediately after they are\r\n   *          clicked.\r\n   */\r\n  isSelectOnClick(): boolean {\r\n    return this.acroField.hasFlag(AcroChoiceFlags.CommitOnSelChange);\r\n  }\r\n\r\n  /**\r\n   * Store the option selected by a user immediately after the user clicks the\r\n   * option. Do not wait for the user to leave this option list field (by\r\n   * clicking outside of it - on another field, for example). For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.enableSelectOnClick()\r\n   * ```\r\n   */\r\n  enableSelectOnClick() {\r\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, true);\r\n  }\r\n\r\n  /**\r\n   * Wait to store the option selected by a user until they leave this option\r\n   * list field (by clicking outside of it - on another field, for example).\r\n   * For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.disableSelectOnClick()\r\n   * ```\r\n   */\r\n  disableSelectOnClick() {\r\n    this.acroField.setFlagTo(AcroChoiceFlags.CommitOnSelChange, false);\r\n  }\r\n\r\n  /**\r\n   * Show this option list on the specified page. For example:\r\n   * ```js\r\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const optionList = form.createOptionList('best.gundams')\r\n   * optionList.setOptions(['Exia', 'Dynames', 'Kyrios', 'Virtue'])\r\n   * optionList.select(['Exia', 'Virtue'])\r\n   *\r\n   * optionList.addToPage(page, {\r\n   *   x: 50,\r\n   *   y: 75,\r\n   *   width: 200,\r\n   *   height: 100,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   *   font: ubuntuFont,\r\n   * })\r\n   * ```\r\n   * This will create a new widget for this option list field.\r\n   * @param page The page to which this option list widget should be added.\r\n   * @param options The options to be used when adding this option list widget.\r\n   */\r\n  addToPage(page: PDFPage, options?: FieldAppearanceOptions) {\r\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\r\n    assertFieldAppearanceOptions(options);\r\n\r\n    if (!options) options = {};\r\n\r\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\r\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\r\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\r\n    if (!('borderWidth' in options)) options.borderWidth = 1;\r\n\r\n    // Create a widget for this option list\r\n    const widget = this.createWidget({\r\n      x: options.x ?? 0,\r\n      y: options.y ?? 0,\r\n      width: options.width ?? 200,\r\n      height: options.height ?? 100,\r\n      textColor: options.textColor,\r\n      backgroundColor: options.backgroundColor,\r\n      borderColor: options.borderColor,\r\n      borderWidth: options.borderWidth ?? 0,\r\n      rotate: options.rotate ?? degrees(0),\r\n      hidden: options.hidden,\r\n      page: page.ref,\r\n    });\r\n    const widgetRef = this.doc.context.register(widget.dict);\r\n\r\n    // Add widget to this field\r\n    this.acroField.addWidget(widgetRef);\r\n\r\n    // Set appearance streams for widget\r\n    const font = options.font ?? this.doc.getForm().getDefaultFont();\r\n    this.updateWidgetAppearance(widget, font);\r\n\r\n    // Add widget to the given page\r\n    page.node.addAnnot(widgetRef);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if this option list has been marked as dirty, or if any of\r\n   * this option list's widgets do not have an appearance stream. For example:\r\n   * ```js\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * if (optionList.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this option list needs an appearance update.\r\n   */\r\n  needsAppearancesUpdate(): boolean {\r\n    if (this.isDirty()) return true;\r\n\r\n    const widgets = this.acroField.getWidgets();\r\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\r\n      const widget = widgets[idx];\r\n      const hasAppearances =\r\n        widget.getAppearances()?.normal instanceof PDFStream;\r\n      if (!hasAppearances) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Update the appearance streams for each of this option list's widgets using\r\n   * the default appearance provider for option lists. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.defaultUpdateAppearances(helvetica)\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   */\r\n  defaultUpdateAppearances(font: PDFFont) {\r\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\r\n    this.updateAppearances(font);\r\n  }\r\n\r\n  /**\r\n   * Update the appearance streams for each of this option list's widgets using\r\n   * the given appearance provider. If no `provider` is passed, the default\r\n   * appearance provider for option lists will be used. For example:\r\n   * ```js\r\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\r\n   * const optionList = form.getOptionList('some.optionList.field')\r\n   * optionList.updateAppearances(helvetica, (field, widget, font) => {\r\n   *   ...\r\n   *   return drawOptionList(...)\r\n   * })\r\n   * ```\r\n   * @param font The font to be used for creating the appearance streams.\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\r\n  updateAppearances(\r\n    font: PDFFont,\r\n    provider?: AppearanceProviderFor<PDFOptionList>,\r\n  ) {\r\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\r\n    assertOrUndefined(provider, 'provider', [Function]);\r\n\r\n    const widgets = this.acroField.getWidgets();\r\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\r\n      const widget = widgets[idx];\r\n      this.updateWidgetAppearance(widget, font, provider);\r\n    }\r\n    this.markAsClean();\r\n  }\r\n\r\n  // getOption(index: number): string {}\r\n  // getSelectedIndices(): number[] {}\r\n  // removeOptions(option: string | string[]) {}\r\n  // removeIndices(option: number[]) {}\r\n  // deselect(options: string | string[]) {}\r\n  // deselectIndices(optionIndices: number[]) {}\r\n\r\n  private updateWidgetAppearance(\r\n    widget: PDFWidgetAnnotation,\r\n    font: PDFFont,\r\n    provider?: AppearanceProviderFor<PDFOptionList>,\r\n  ) {\r\n    const apProvider = provider ?? defaultOptionListAppearanceProvider;\r\n    const appearances = normalizeAppearance(apProvider(this, widget, font));\r\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}